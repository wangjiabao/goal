// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.0
// - protoc             v3.21.7
// source: api/play/service/v1/play.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationPlayAllowedPlayList = "/api.play.service.v1.Play/AllowedPlayList"
const OperationPlayCreatePlayGame = "/api.play.service.v1.Play/CreatePlayGame"
const OperationPlayCreatePlayGameGoal = "/api.play.service.v1.Play/CreatePlayGameGoal"
const OperationPlayCreatePlayGameResult = "/api.play.service.v1.Play/CreatePlayGameResult"
const OperationPlayCreatePlayGameScore = "/api.play.service.v1.Play/CreatePlayGameScore"
const OperationPlayCreatePlayGameSort = "/api.play.service.v1.Play/CreatePlayGameSort"
const OperationPlayCreatePlaySort = "/api.play.service.v1.Play/CreatePlaySort"
const OperationPlayCreateRoom = "/api.play.service.v1.Play/CreateRoom"
const OperationPlayGameUserList = "/api.play.service.v1.Play/GameUserList"
const OperationPlayGetRoomUserList = "/api.play.service.v1.Play/GetRoomUserList"
const OperationPlayGetUserPlayList = "/api.play.service.v1.Play/GetUserPlayList"
const OperationPlayPlayAmountTotal = "/api.play.service.v1.Play/PlayAmountTotal"
const OperationPlayPlayAmountTotalGoal = "/api.play.service.v1.Play/PlayAmountTotalGoal"
const OperationPlayPlayAmountTotalResult = "/api.play.service.v1.Play/PlayAmountTotalResult"
const OperationPlayPlayAmountTotalScore = "/api.play.service.v1.Play/PlayAmountTotalScore"
const OperationPlayPlayAmountTotalSort = "/api.play.service.v1.Play/PlayAmountTotalSort"
const OperationPlayPlayAmountTotalSortOther = "/api.play.service.v1.Play/PlayAmountTotalSortOther"
const OperationPlayRoomAccount = "/api.play.service.v1.Play/RoomAccount"
const OperationPlayRoomInfo = "/api.play.service.v1.Play/RoomInfo"
const OperationPlayRoomPlayList = "/api.play.service.v1.Play/RoomPlayList"

type PlayHTTPServer interface {
	AllowedPlayList(context.Context, *AllowedPlayListRequest) (*AllowedPlayListReply, error)
	CreatePlayGame(context.Context, *CreatePlayGameRequest) (*CreatePlayGameReply, error)
	CreatePlayGameGoal(context.Context, *CreatePlayGameGoalRequest) (*CreatePlayGameGoalReply, error)
	CreatePlayGameResult(context.Context, *CreatePlayGameResultRequest) (*CreatePlayGameResultReply, error)
	CreatePlayGameScore(context.Context, *CreatePlayGameScoreRequest) (*CreatePlayGameScoreReply, error)
	CreatePlayGameSort(context.Context, *CreatePlayGameSortRequest) (*CreatePlayGameSortReply, error)
	CreatePlaySort(context.Context, *CreatePlaySortRequest) (*CreatePlaySortReply, error)
	CreateRoom(context.Context, *CreateRoomRequest) (*CreateRoomReply, error)
	GameUserList(context.Context, *GameUserListRequest) (*GameUserListReply, error)
	GetRoomUserList(context.Context, *GetRoomUserListRequest) (*GetRoomUserListReply, error)
	GetUserPlayList(context.Context, *GetUserPlayListRequest) (*GetUserPlayListReply, error)
	PlayAmountTotal(context.Context, *PlayAmountTotalRequest) (*PlayAmountTotalReply, error)
	PlayAmountTotalGoal(context.Context, *PlayAmountTotalGoalRequest) (*PlayAmountTotalGoalReply, error)
	PlayAmountTotalResult(context.Context, *PlayAmountTotalResultRequest) (*PlayAmountTotalResultReply, error)
	PlayAmountTotalScore(context.Context, *PlayAmountTotalScoreRequest) (*PlayAmountTotalScoreReply, error)
	PlayAmountTotalSort(context.Context, *PlayAmountTotalSortRequest) (*PlayAmountTotalSortReply, error)
	PlayAmountTotalSortOther(context.Context, *PlayAmountTotalSortOtherRequest) (*PlayAmountTotalSortOtherReply, error)
	RoomAccount(context.Context, *RoomAccountRequest) (*RoomAccountReply, error)
	RoomInfo(context.Context, *RoomInfoRequest) (*RoomInfoReply, error)
	RoomPlayList(context.Context, *RoomPlayListRequest) (*RoomPlayListReply, error)
}

func RegisterPlayHTTPServer(s *http.Server, srv PlayHTTPServer) {
	r := s.Route("/")
	r.GET("/api/play_server/allowed_play_list/{game_id}", _Play_AllowedPlayList0_HTTP_Handler(srv))
	r.GET("/api/play_server/room_play_list/{room_id}", _Play_RoomPlayList0_HTTP_Handler(srv))
	r.GET("/api/play_server/room_info/{room_id}", _Play_RoomInfo0_HTTP_Handler(srv))
	r.POST("/api/play_server/play/sort", _Play_CreatePlaySort0_HTTP_Handler(srv))
	r.POST("/api/play_server/play/game", _Play_CreatePlayGame0_HTTP_Handler(srv))
	r.POST("/api/play_server/room/account", _Play_RoomAccount0_HTTP_Handler(srv))
	r.GET("/api/play_server/play_amount_total", _Play_PlayAmountTotal0_HTTP_Handler(srv))
	r.GET("/api/play_server/play_amount_result_total", _Play_PlayAmountTotalResult0_HTTP_Handler(srv))
	r.GET("/api/play_server/play_amount_goal_total", _Play_PlayAmountTotalGoal0_HTTP_Handler(srv))
	r.GET("/api/play_server/play_amount_total_score", _Play_PlayAmountTotalScore0_HTTP_Handler(srv))
	r.GET("/api/play_server/play_amount_total_sort", _Play_PlayAmountTotalSort0_HTTP_Handler(srv))
	r.GET("/api/play_server/play_amount_total_sort_other", _Play_PlayAmountTotalSortOther0_HTTP_Handler(srv))
	r.POST("/api/play_server/room", _Play_CreateRoom0_HTTP_Handler(srv))
	r.POST("/api/play_server/play/game_score", _Play_CreatePlayGameScore0_HTTP_Handler(srv))
	r.POST("/api/play_server/play/game_result", _Play_CreatePlayGameResult0_HTTP_Handler(srv))
	r.POST("/api/play_server/play/game_goal", _Play_CreatePlayGameGoal0_HTTP_Handler(srv))
	r.POST("/api/play_server/play/game_sort", _Play_CreatePlayGameSort0_HTTP_Handler(srv))
	r.GET("/api/play_server/play/user/list", _Play_GetUserPlayList0_HTTP_Handler(srv))
	r.GET("/api/play_server/game/{game_id}/user_list", _Play_GameUserList0_HTTP_Handler(srv))
	r.GET("/api/play_server/room_user_list", _Play_GetRoomUserList0_HTTP_Handler(srv))
}

func _Play_AllowedPlayList0_HTTP_Handler(srv PlayHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AllowedPlayListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPlayAllowedPlayList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AllowedPlayList(ctx, req.(*AllowedPlayListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AllowedPlayListReply)
		return ctx.Result(200, reply)
	}
}

func _Play_RoomPlayList0_HTTP_Handler(srv PlayHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RoomPlayListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPlayRoomPlayList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RoomPlayList(ctx, req.(*RoomPlayListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RoomPlayListReply)
		return ctx.Result(200, reply)
	}
}

func _Play_RoomInfo0_HTTP_Handler(srv PlayHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RoomInfoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPlayRoomInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RoomInfo(ctx, req.(*RoomInfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RoomInfoReply)
		return ctx.Result(200, reply)
	}
}

func _Play_CreatePlaySort0_HTTP_Handler(srv PlayHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreatePlaySortRequest
		if err := ctx.Bind(&in.SendBody); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPlayCreatePlaySort)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreatePlaySort(ctx, req.(*CreatePlaySortRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreatePlaySortReply)
		return ctx.Result(200, reply)
	}
}

func _Play_CreatePlayGame0_HTTP_Handler(srv PlayHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreatePlayGameRequest
		if err := ctx.Bind(&in.SendBody); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPlayCreatePlayGame)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreatePlayGame(ctx, req.(*CreatePlayGameRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreatePlayGameReply)
		return ctx.Result(200, reply)
	}
}

func _Play_RoomAccount0_HTTP_Handler(srv PlayHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RoomAccountRequest
		if err := ctx.Bind(&in.SendBody); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPlayRoomAccount)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RoomAccount(ctx, req.(*RoomAccountRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RoomAccountReply)
		return ctx.Result(200, reply)
	}
}

func _Play_PlayAmountTotal0_HTTP_Handler(srv PlayHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PlayAmountTotalRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPlayPlayAmountTotal)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PlayAmountTotal(ctx, req.(*PlayAmountTotalRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PlayAmountTotalReply)
		return ctx.Result(200, reply)
	}
}

func _Play_PlayAmountTotalResult0_HTTP_Handler(srv PlayHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PlayAmountTotalResultRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPlayPlayAmountTotalResult)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PlayAmountTotalResult(ctx, req.(*PlayAmountTotalResultRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PlayAmountTotalResultReply)
		return ctx.Result(200, reply)
	}
}

func _Play_PlayAmountTotalGoal0_HTTP_Handler(srv PlayHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PlayAmountTotalGoalRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPlayPlayAmountTotalGoal)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PlayAmountTotalGoal(ctx, req.(*PlayAmountTotalGoalRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PlayAmountTotalGoalReply)
		return ctx.Result(200, reply)
	}
}

func _Play_PlayAmountTotalScore0_HTTP_Handler(srv PlayHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PlayAmountTotalScoreRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPlayPlayAmountTotalScore)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PlayAmountTotalScore(ctx, req.(*PlayAmountTotalScoreRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PlayAmountTotalScoreReply)
		return ctx.Result(200, reply)
	}
}

func _Play_PlayAmountTotalSort0_HTTP_Handler(srv PlayHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PlayAmountTotalSortRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPlayPlayAmountTotalSort)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PlayAmountTotalSort(ctx, req.(*PlayAmountTotalSortRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PlayAmountTotalSortReply)
		return ctx.Result(200, reply)
	}
}

func _Play_PlayAmountTotalSortOther0_HTTP_Handler(srv PlayHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PlayAmountTotalSortOtherRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPlayPlayAmountTotalSortOther)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PlayAmountTotalSortOther(ctx, req.(*PlayAmountTotalSortOtherRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PlayAmountTotalSortOtherReply)
		return ctx.Result(200, reply)
	}
}

func _Play_CreateRoom0_HTTP_Handler(srv PlayHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateRoomRequest
		if err := ctx.Bind(&in.SendBody); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPlayCreateRoom)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateRoom(ctx, req.(*CreateRoomRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateRoomReply)
		return ctx.Result(200, reply)
	}
}

func _Play_CreatePlayGameScore0_HTTP_Handler(srv PlayHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreatePlayGameScoreRequest
		if err := ctx.Bind(&in.SendBody); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPlayCreatePlayGameScore)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreatePlayGameScore(ctx, req.(*CreatePlayGameScoreRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreatePlayGameScoreReply)
		return ctx.Result(200, reply)
	}
}

func _Play_CreatePlayGameResult0_HTTP_Handler(srv PlayHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreatePlayGameResultRequest
		if err := ctx.Bind(&in.SendBody); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPlayCreatePlayGameResult)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreatePlayGameResult(ctx, req.(*CreatePlayGameResultRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreatePlayGameResultReply)
		return ctx.Result(200, reply)
	}
}

func _Play_CreatePlayGameGoal0_HTTP_Handler(srv PlayHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreatePlayGameGoalRequest
		if err := ctx.Bind(&in.SendBody); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPlayCreatePlayGameGoal)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreatePlayGameGoal(ctx, req.(*CreatePlayGameGoalRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreatePlayGameGoalReply)
		return ctx.Result(200, reply)
	}
}

func _Play_CreatePlayGameSort0_HTTP_Handler(srv PlayHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreatePlayGameSortRequest
		if err := ctx.Bind(&in.SendBody); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPlayCreatePlayGameSort)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreatePlayGameSort(ctx, req.(*CreatePlayGameSortRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreatePlayGameSortReply)
		return ctx.Result(200, reply)
	}
}

func _Play_GetUserPlayList0_HTTP_Handler(srv PlayHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserPlayListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPlayGetUserPlayList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserPlayList(ctx, req.(*GetUserPlayListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserPlayListReply)
		return ctx.Result(200, reply)
	}
}

func _Play_GameUserList0_HTTP_Handler(srv PlayHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GameUserListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPlayGameUserList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GameUserList(ctx, req.(*GameUserListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GameUserListReply)
		return ctx.Result(200, reply)
	}
}

func _Play_GetRoomUserList0_HTTP_Handler(srv PlayHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetRoomUserListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPlayGetRoomUserList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetRoomUserList(ctx, req.(*GetRoomUserListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetRoomUserListReply)
		return ctx.Result(200, reply)
	}
}

type PlayHTTPClient interface {
	AllowedPlayList(ctx context.Context, req *AllowedPlayListRequest, opts ...http.CallOption) (rsp *AllowedPlayListReply, err error)
	CreatePlayGame(ctx context.Context, req *CreatePlayGameRequest, opts ...http.CallOption) (rsp *CreatePlayGameReply, err error)
	CreatePlayGameGoal(ctx context.Context, req *CreatePlayGameGoalRequest, opts ...http.CallOption) (rsp *CreatePlayGameGoalReply, err error)
	CreatePlayGameResult(ctx context.Context, req *CreatePlayGameResultRequest, opts ...http.CallOption) (rsp *CreatePlayGameResultReply, err error)
	CreatePlayGameScore(ctx context.Context, req *CreatePlayGameScoreRequest, opts ...http.CallOption) (rsp *CreatePlayGameScoreReply, err error)
	CreatePlayGameSort(ctx context.Context, req *CreatePlayGameSortRequest, opts ...http.CallOption) (rsp *CreatePlayGameSortReply, err error)
	CreatePlaySort(ctx context.Context, req *CreatePlaySortRequest, opts ...http.CallOption) (rsp *CreatePlaySortReply, err error)
	CreateRoom(ctx context.Context, req *CreateRoomRequest, opts ...http.CallOption) (rsp *CreateRoomReply, err error)
	GameUserList(ctx context.Context, req *GameUserListRequest, opts ...http.CallOption) (rsp *GameUserListReply, err error)
	GetRoomUserList(ctx context.Context, req *GetRoomUserListRequest, opts ...http.CallOption) (rsp *GetRoomUserListReply, err error)
	GetUserPlayList(ctx context.Context, req *GetUserPlayListRequest, opts ...http.CallOption) (rsp *GetUserPlayListReply, err error)
	PlayAmountTotal(ctx context.Context, req *PlayAmountTotalRequest, opts ...http.CallOption) (rsp *PlayAmountTotalReply, err error)
	PlayAmountTotalGoal(ctx context.Context, req *PlayAmountTotalGoalRequest, opts ...http.CallOption) (rsp *PlayAmountTotalGoalReply, err error)
	PlayAmountTotalResult(ctx context.Context, req *PlayAmountTotalResultRequest, opts ...http.CallOption) (rsp *PlayAmountTotalResultReply, err error)
	PlayAmountTotalScore(ctx context.Context, req *PlayAmountTotalScoreRequest, opts ...http.CallOption) (rsp *PlayAmountTotalScoreReply, err error)
	PlayAmountTotalSort(ctx context.Context, req *PlayAmountTotalSortRequest, opts ...http.CallOption) (rsp *PlayAmountTotalSortReply, err error)
	PlayAmountTotalSortOther(ctx context.Context, req *PlayAmountTotalSortOtherRequest, opts ...http.CallOption) (rsp *PlayAmountTotalSortOtherReply, err error)
	RoomAccount(ctx context.Context, req *RoomAccountRequest, opts ...http.CallOption) (rsp *RoomAccountReply, err error)
	RoomInfo(ctx context.Context, req *RoomInfoRequest, opts ...http.CallOption) (rsp *RoomInfoReply, err error)
	RoomPlayList(ctx context.Context, req *RoomPlayListRequest, opts ...http.CallOption) (rsp *RoomPlayListReply, err error)
}

type PlayHTTPClientImpl struct {
	cc *http.Client
}

func NewPlayHTTPClient(client *http.Client) PlayHTTPClient {
	return &PlayHTTPClientImpl{client}
}

func (c *PlayHTTPClientImpl) AllowedPlayList(ctx context.Context, in *AllowedPlayListRequest, opts ...http.CallOption) (*AllowedPlayListReply, error) {
	var out AllowedPlayListReply
	pattern := "/api/play_server/allowed_play_list/{game_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPlayAllowedPlayList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PlayHTTPClientImpl) CreatePlayGame(ctx context.Context, in *CreatePlayGameRequest, opts ...http.CallOption) (*CreatePlayGameReply, error) {
	var out CreatePlayGameReply
	pattern := "/api/play_server/play/game"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPlayCreatePlayGame))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.SendBody, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PlayHTTPClientImpl) CreatePlayGameGoal(ctx context.Context, in *CreatePlayGameGoalRequest, opts ...http.CallOption) (*CreatePlayGameGoalReply, error) {
	var out CreatePlayGameGoalReply
	pattern := "/api/play_server/play/game_goal"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPlayCreatePlayGameGoal))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.SendBody, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PlayHTTPClientImpl) CreatePlayGameResult(ctx context.Context, in *CreatePlayGameResultRequest, opts ...http.CallOption) (*CreatePlayGameResultReply, error) {
	var out CreatePlayGameResultReply
	pattern := "/api/play_server/play/game_result"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPlayCreatePlayGameResult))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.SendBody, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PlayHTTPClientImpl) CreatePlayGameScore(ctx context.Context, in *CreatePlayGameScoreRequest, opts ...http.CallOption) (*CreatePlayGameScoreReply, error) {
	var out CreatePlayGameScoreReply
	pattern := "/api/play_server/play/game_score"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPlayCreatePlayGameScore))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.SendBody, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PlayHTTPClientImpl) CreatePlayGameSort(ctx context.Context, in *CreatePlayGameSortRequest, opts ...http.CallOption) (*CreatePlayGameSortReply, error) {
	var out CreatePlayGameSortReply
	pattern := "/api/play_server/play/game_sort"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPlayCreatePlayGameSort))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.SendBody, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PlayHTTPClientImpl) CreatePlaySort(ctx context.Context, in *CreatePlaySortRequest, opts ...http.CallOption) (*CreatePlaySortReply, error) {
	var out CreatePlaySortReply
	pattern := "/api/play_server/play/sort"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPlayCreatePlaySort))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.SendBody, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PlayHTTPClientImpl) CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...http.CallOption) (*CreateRoomReply, error) {
	var out CreateRoomReply
	pattern := "/api/play_server/room"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPlayCreateRoom))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.SendBody, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PlayHTTPClientImpl) GameUserList(ctx context.Context, in *GameUserListRequest, opts ...http.CallOption) (*GameUserListReply, error) {
	var out GameUserListReply
	pattern := "/api/play_server/game/{game_id}/user_list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPlayGameUserList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PlayHTTPClientImpl) GetRoomUserList(ctx context.Context, in *GetRoomUserListRequest, opts ...http.CallOption) (*GetRoomUserListReply, error) {
	var out GetRoomUserListReply
	pattern := "/api/play_server/room_user_list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPlayGetRoomUserList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PlayHTTPClientImpl) GetUserPlayList(ctx context.Context, in *GetUserPlayListRequest, opts ...http.CallOption) (*GetUserPlayListReply, error) {
	var out GetUserPlayListReply
	pattern := "/api/play_server/play/user/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPlayGetUserPlayList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PlayHTTPClientImpl) PlayAmountTotal(ctx context.Context, in *PlayAmountTotalRequest, opts ...http.CallOption) (*PlayAmountTotalReply, error) {
	var out PlayAmountTotalReply
	pattern := "/api/play_server/play_amount_total"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPlayPlayAmountTotal))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PlayHTTPClientImpl) PlayAmountTotalGoal(ctx context.Context, in *PlayAmountTotalGoalRequest, opts ...http.CallOption) (*PlayAmountTotalGoalReply, error) {
	var out PlayAmountTotalGoalReply
	pattern := "/api/play_server/play_amount_goal_total"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPlayPlayAmountTotalGoal))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PlayHTTPClientImpl) PlayAmountTotalResult(ctx context.Context, in *PlayAmountTotalResultRequest, opts ...http.CallOption) (*PlayAmountTotalResultReply, error) {
	var out PlayAmountTotalResultReply
	pattern := "/api/play_server/play_amount_result_total"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPlayPlayAmountTotalResult))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PlayHTTPClientImpl) PlayAmountTotalScore(ctx context.Context, in *PlayAmountTotalScoreRequest, opts ...http.CallOption) (*PlayAmountTotalScoreReply, error) {
	var out PlayAmountTotalScoreReply
	pattern := "/api/play_server/play_amount_total_score"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPlayPlayAmountTotalScore))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PlayHTTPClientImpl) PlayAmountTotalSort(ctx context.Context, in *PlayAmountTotalSortRequest, opts ...http.CallOption) (*PlayAmountTotalSortReply, error) {
	var out PlayAmountTotalSortReply
	pattern := "/api/play_server/play_amount_total_sort"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPlayPlayAmountTotalSort))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PlayHTTPClientImpl) PlayAmountTotalSortOther(ctx context.Context, in *PlayAmountTotalSortOtherRequest, opts ...http.CallOption) (*PlayAmountTotalSortOtherReply, error) {
	var out PlayAmountTotalSortOtherReply
	pattern := "/api/play_server/play_amount_total_sort_other"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPlayPlayAmountTotalSortOther))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PlayHTTPClientImpl) RoomAccount(ctx context.Context, in *RoomAccountRequest, opts ...http.CallOption) (*RoomAccountReply, error) {
	var out RoomAccountReply
	pattern := "/api/play_server/room/account"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPlayRoomAccount))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.SendBody, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PlayHTTPClientImpl) RoomInfo(ctx context.Context, in *RoomInfoRequest, opts ...http.CallOption) (*RoomInfoReply, error) {
	var out RoomInfoReply
	pattern := "/api/play_server/room_info/{room_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPlayRoomInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PlayHTTPClientImpl) RoomPlayList(ctx context.Context, in *RoomPlayListRequest, opts ...http.CallOption) (*RoomPlayListReply, error) {
	var out RoomPlayListReply
	pattern := "/api/play_server/room_play_list/{room_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPlayRoomPlayList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
