// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: api/play/service/v1/play.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PlayClient is the client API for Play service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlayClient interface {
	AllowedPlayList(ctx context.Context, in *AllowedPlayListRequest, opts ...grpc.CallOption) (*AllowedPlayListReply, error)
	RoomPlayList(ctx context.Context, in *RoomPlayListRequest, opts ...grpc.CallOption) (*RoomPlayListReply, error)
	CreatePlaySort(ctx context.Context, in *CreatePlaySortRequest, opts ...grpc.CallOption) (*CreatePlaySortReply, error)
	CreatePlayGame(ctx context.Context, in *CreatePlayGameRequest, opts ...grpc.CallOption) (*CreatePlayGameReply, error)
	RoomAccount(ctx context.Context, in *RoomAccountRequest, opts ...grpc.CallOption) (*RoomAccountReply, error)
	CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*CreateRoomReply, error)
	CreatePlayGameScore(ctx context.Context, in *CreatePlayGameScoreRequest, opts ...grpc.CallOption) (*CreatePlayGameScoreReply, error)
	CreatePlayGameResult(ctx context.Context, in *CreatePlayGameResultRequest, opts ...grpc.CallOption) (*CreatePlayGameResultReply, error)
	CreatePlayGameGoal(ctx context.Context, in *CreatePlayGameGoalRequest, opts ...grpc.CallOption) (*CreatePlayGameGoalReply, error)
	CreatePlayGameSort(ctx context.Context, in *CreatePlayGameSortRequest, opts ...grpc.CallOption) (*CreatePlayGameSortReply, error)
}

type playClient struct {
	cc grpc.ClientConnInterface
}

func NewPlayClient(cc grpc.ClientConnInterface) PlayClient {
	return &playClient{cc}
}

func (c *playClient) AllowedPlayList(ctx context.Context, in *AllowedPlayListRequest, opts ...grpc.CallOption) (*AllowedPlayListReply, error) {
	out := new(AllowedPlayListReply)
	err := c.cc.Invoke(ctx, "/api.play.service.v1.Play/AllowedPlayList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playClient) RoomPlayList(ctx context.Context, in *RoomPlayListRequest, opts ...grpc.CallOption) (*RoomPlayListReply, error) {
	out := new(RoomPlayListReply)
	err := c.cc.Invoke(ctx, "/api.play.service.v1.Play/RoomPlayList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playClient) CreatePlaySort(ctx context.Context, in *CreatePlaySortRequest, opts ...grpc.CallOption) (*CreatePlaySortReply, error) {
	out := new(CreatePlaySortReply)
	err := c.cc.Invoke(ctx, "/api.play.service.v1.Play/CreatePlaySort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playClient) CreatePlayGame(ctx context.Context, in *CreatePlayGameRequest, opts ...grpc.CallOption) (*CreatePlayGameReply, error) {
	out := new(CreatePlayGameReply)
	err := c.cc.Invoke(ctx, "/api.play.service.v1.Play/CreatePlayGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playClient) RoomAccount(ctx context.Context, in *RoomAccountRequest, opts ...grpc.CallOption) (*RoomAccountReply, error) {
	out := new(RoomAccountReply)
	err := c.cc.Invoke(ctx, "/api.play.service.v1.Play/RoomAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playClient) CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*CreateRoomReply, error) {
	out := new(CreateRoomReply)
	err := c.cc.Invoke(ctx, "/api.play.service.v1.Play/CreateRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playClient) CreatePlayGameScore(ctx context.Context, in *CreatePlayGameScoreRequest, opts ...grpc.CallOption) (*CreatePlayGameScoreReply, error) {
	out := new(CreatePlayGameScoreReply)
	err := c.cc.Invoke(ctx, "/api.play.service.v1.Play/CreatePlayGameScore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playClient) CreatePlayGameResult(ctx context.Context, in *CreatePlayGameResultRequest, opts ...grpc.CallOption) (*CreatePlayGameResultReply, error) {
	out := new(CreatePlayGameResultReply)
	err := c.cc.Invoke(ctx, "/api.play.service.v1.Play/CreatePlayGameResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playClient) CreatePlayGameGoal(ctx context.Context, in *CreatePlayGameGoalRequest, opts ...grpc.CallOption) (*CreatePlayGameGoalReply, error) {
	out := new(CreatePlayGameGoalReply)
	err := c.cc.Invoke(ctx, "/api.play.service.v1.Play/CreatePlayGameGoal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playClient) CreatePlayGameSort(ctx context.Context, in *CreatePlayGameSortRequest, opts ...grpc.CallOption) (*CreatePlayGameSortReply, error) {
	out := new(CreatePlayGameSortReply)
	err := c.cc.Invoke(ctx, "/api.play.service.v1.Play/CreatePlayGameSort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlayServer is the server API for Play service.
// All implementations must embed UnimplementedPlayServer
// for forward compatibility
type PlayServer interface {
	AllowedPlayList(context.Context, *AllowedPlayListRequest) (*AllowedPlayListReply, error)
	RoomPlayList(context.Context, *RoomPlayListRequest) (*RoomPlayListReply, error)
	CreatePlaySort(context.Context, *CreatePlaySortRequest) (*CreatePlaySortReply, error)
	CreatePlayGame(context.Context, *CreatePlayGameRequest) (*CreatePlayGameReply, error)
	RoomAccount(context.Context, *RoomAccountRequest) (*RoomAccountReply, error)
	CreateRoom(context.Context, *CreateRoomRequest) (*CreateRoomReply, error)
	CreatePlayGameScore(context.Context, *CreatePlayGameScoreRequest) (*CreatePlayGameScoreReply, error)
	CreatePlayGameResult(context.Context, *CreatePlayGameResultRequest) (*CreatePlayGameResultReply, error)
	CreatePlayGameGoal(context.Context, *CreatePlayGameGoalRequest) (*CreatePlayGameGoalReply, error)
	CreatePlayGameSort(context.Context, *CreatePlayGameSortRequest) (*CreatePlayGameSortReply, error)
	mustEmbedUnimplementedPlayServer()
}

// UnimplementedPlayServer must be embedded to have forward compatible implementations.
type UnimplementedPlayServer struct {
}

func (UnimplementedPlayServer) AllowedPlayList(context.Context, *AllowedPlayListRequest) (*AllowedPlayListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllowedPlayList not implemented")
}
func (UnimplementedPlayServer) RoomPlayList(context.Context, *RoomPlayListRequest) (*RoomPlayListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomPlayList not implemented")
}
func (UnimplementedPlayServer) CreatePlaySort(context.Context, *CreatePlaySortRequest) (*CreatePlaySortReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlaySort not implemented")
}
func (UnimplementedPlayServer) CreatePlayGame(context.Context, *CreatePlayGameRequest) (*CreatePlayGameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlayGame not implemented")
}
func (UnimplementedPlayServer) RoomAccount(context.Context, *RoomAccountRequest) (*RoomAccountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomAccount not implemented")
}
func (UnimplementedPlayServer) CreateRoom(context.Context, *CreateRoomRequest) (*CreateRoomReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoom not implemented")
}
func (UnimplementedPlayServer) CreatePlayGameScore(context.Context, *CreatePlayGameScoreRequest) (*CreatePlayGameScoreReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlayGameScore not implemented")
}
func (UnimplementedPlayServer) CreatePlayGameResult(context.Context, *CreatePlayGameResultRequest) (*CreatePlayGameResultReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlayGameResult not implemented")
}
func (UnimplementedPlayServer) CreatePlayGameGoal(context.Context, *CreatePlayGameGoalRequest) (*CreatePlayGameGoalReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlayGameGoal not implemented")
}
func (UnimplementedPlayServer) CreatePlayGameSort(context.Context, *CreatePlayGameSortRequest) (*CreatePlayGameSortReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlayGameSort not implemented")
}
func (UnimplementedPlayServer) mustEmbedUnimplementedPlayServer() {}

// UnsafePlayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlayServer will
// result in compilation errors.
type UnsafePlayServer interface {
	mustEmbedUnimplementedPlayServer()
}

func RegisterPlayServer(s grpc.ServiceRegistrar, srv PlayServer) {
	s.RegisterService(&Play_ServiceDesc, srv)
}

func _Play_AllowedPlayList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllowedPlayListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayServer).AllowedPlayList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.play.service.v1.Play/AllowedPlayList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayServer).AllowedPlayList(ctx, req.(*AllowedPlayListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Play_RoomPlayList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomPlayListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayServer).RoomPlayList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.play.service.v1.Play/RoomPlayList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayServer).RoomPlayList(ctx, req.(*RoomPlayListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Play_CreatePlaySort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlaySortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayServer).CreatePlaySort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.play.service.v1.Play/CreatePlaySort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayServer).CreatePlaySort(ctx, req.(*CreatePlaySortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Play_CreatePlayGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlayGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayServer).CreatePlayGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.play.service.v1.Play/CreatePlayGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayServer).CreatePlayGame(ctx, req.(*CreatePlayGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Play_RoomAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayServer).RoomAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.play.service.v1.Play/RoomAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayServer).RoomAccount(ctx, req.(*RoomAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Play_CreateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayServer).CreateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.play.service.v1.Play/CreateRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayServer).CreateRoom(ctx, req.(*CreateRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Play_CreatePlayGameScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlayGameScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayServer).CreatePlayGameScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.play.service.v1.Play/CreatePlayGameScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayServer).CreatePlayGameScore(ctx, req.(*CreatePlayGameScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Play_CreatePlayGameResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlayGameResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayServer).CreatePlayGameResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.play.service.v1.Play/CreatePlayGameResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayServer).CreatePlayGameResult(ctx, req.(*CreatePlayGameResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Play_CreatePlayGameGoal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlayGameGoalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayServer).CreatePlayGameGoal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.play.service.v1.Play/CreatePlayGameGoal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayServer).CreatePlayGameGoal(ctx, req.(*CreatePlayGameGoalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Play_CreatePlayGameSort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlayGameSortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayServer).CreatePlayGameSort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.play.service.v1.Play/CreatePlayGameSort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayServer).CreatePlayGameSort(ctx, req.(*CreatePlayGameSortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Play_ServiceDesc is the grpc.ServiceDesc for Play service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Play_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.play.service.v1.Play",
	HandlerType: (*PlayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AllowedPlayList",
			Handler:    _Play_AllowedPlayList_Handler,
		},
		{
			MethodName: "RoomPlayList",
			Handler:    _Play_RoomPlayList_Handler,
		},
		{
			MethodName: "CreatePlaySort",
			Handler:    _Play_CreatePlaySort_Handler,
		},
		{
			MethodName: "CreatePlayGame",
			Handler:    _Play_CreatePlayGame_Handler,
		},
		{
			MethodName: "RoomAccount",
			Handler:    _Play_RoomAccount_Handler,
		},
		{
			MethodName: "CreateRoom",
			Handler:    _Play_CreateRoom_Handler,
		},
		{
			MethodName: "CreatePlayGameScore",
			Handler:    _Play_CreatePlayGameScore_Handler,
		},
		{
			MethodName: "CreatePlayGameResult",
			Handler:    _Play_CreatePlayGameResult_Handler,
		},
		{
			MethodName: "CreatePlayGameGoal",
			Handler:    _Play_CreatePlayGameGoal_Handler,
		},
		{
			MethodName: "CreatePlayGameSort",
			Handler:    _Play_CreatePlayGameSort_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/play/service/v1/play.proto",
}
