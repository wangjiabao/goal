// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/play/service/v1/play.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AllowedPlayListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AllowedPlayListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AllowedPlayListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AllowedPlayListRequestMultiError, or nil if none found.
func (m *AllowedPlayListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AllowedPlayListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GameId

	if len(errors) > 0 {
		return AllowedPlayListRequestMultiError(errors)
	}

	return nil
}

// AllowedPlayListRequestMultiError is an error wrapping multiple validation
// errors returned by AllowedPlayListRequest.ValidateAll() if the designated
// constraints aren't met.
type AllowedPlayListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AllowedPlayListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AllowedPlayListRequestMultiError) AllErrors() []error { return m }

// AllowedPlayListRequestValidationError is the validation error returned by
// AllowedPlayListRequest.Validate if the designated constraints aren't met.
type AllowedPlayListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AllowedPlayListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AllowedPlayListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AllowedPlayListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AllowedPlayListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AllowedPlayListRequestValidationError) ErrorName() string {
	return "AllowedPlayListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AllowedPlayListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAllowedPlayListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AllowedPlayListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AllowedPlayListRequestValidationError{}

// Validate checks the field values on AllowedPlayListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AllowedPlayListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AllowedPlayListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AllowedPlayListReplyMultiError, or nil if none found.
func (m *AllowedPlayListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AllowedPlayListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AllowedPlayListReplyValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AllowedPlayListReplyValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AllowedPlayListReplyValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AllowedPlayListReplyMultiError(errors)
	}

	return nil
}

// AllowedPlayListReplyMultiError is an error wrapping multiple validation
// errors returned by AllowedPlayListReply.ValidateAll() if the designated
// constraints aren't met.
type AllowedPlayListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AllowedPlayListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AllowedPlayListReplyMultiError) AllErrors() []error { return m }

// AllowedPlayListReplyValidationError is the validation error returned by
// AllowedPlayListReply.Validate if the designated constraints aren't met.
type AllowedPlayListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AllowedPlayListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AllowedPlayListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AllowedPlayListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AllowedPlayListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AllowedPlayListReplyValidationError) ErrorName() string {
	return "AllowedPlayListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AllowedPlayListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAllowedPlayListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AllowedPlayListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AllowedPlayListReplyValidationError{}

// Validate checks the field values on RoomPlayListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RoomPlayListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoomPlayListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoomPlayListRequestMultiError, or nil if none found.
func (m *RoomPlayListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RoomPlayListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoomId

	if len(errors) > 0 {
		return RoomPlayListRequestMultiError(errors)
	}

	return nil
}

// RoomPlayListRequestMultiError is an error wrapping multiple validation
// errors returned by RoomPlayListRequest.ValidateAll() if the designated
// constraints aren't met.
type RoomPlayListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoomPlayListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoomPlayListRequestMultiError) AllErrors() []error { return m }

// RoomPlayListRequestValidationError is the validation error returned by
// RoomPlayListRequest.Validate if the designated constraints aren't met.
type RoomPlayListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoomPlayListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoomPlayListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoomPlayListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoomPlayListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoomPlayListRequestValidationError) ErrorName() string {
	return "RoomPlayListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RoomPlayListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoomPlayListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoomPlayListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoomPlayListRequestValidationError{}

// Validate checks the field values on RoomPlayListReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RoomPlayListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoomPlayListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoomPlayListReplyMultiError, or nil if none found.
func (m *RoomPlayListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *RoomPlayListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RoomPlayListReplyValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RoomPlayListReplyValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RoomPlayListReplyValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RoomPlayListReplyMultiError(errors)
	}

	return nil
}

// RoomPlayListReplyMultiError is an error wrapping multiple validation errors
// returned by RoomPlayListReply.ValidateAll() if the designated constraints
// aren't met.
type RoomPlayListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoomPlayListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoomPlayListReplyMultiError) AllErrors() []error { return m }

// RoomPlayListReplyValidationError is the validation error returned by
// RoomPlayListReply.Validate if the designated constraints aren't met.
type RoomPlayListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoomPlayListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoomPlayListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoomPlayListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoomPlayListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoomPlayListReplyValidationError) ErrorName() string {
	return "RoomPlayListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e RoomPlayListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoomPlayListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoomPlayListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoomPlayListReplyValidationError{}

// Validate checks the field values on GameUserListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GameUserListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GameUserListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GameUserListRequestMultiError, or nil if none found.
func (m *GameUserListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GameUserListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GameId

	if len(errors) > 0 {
		return GameUserListRequestMultiError(errors)
	}

	return nil
}

// GameUserListRequestMultiError is an error wrapping multiple validation
// errors returned by GameUserListRequest.ValidateAll() if the designated
// constraints aren't met.
type GameUserListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GameUserListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GameUserListRequestMultiError) AllErrors() []error { return m }

// GameUserListRequestValidationError is the validation error returned by
// GameUserListRequest.Validate if the designated constraints aren't met.
type GameUserListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GameUserListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GameUserListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GameUserListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GameUserListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GameUserListRequestValidationError) ErrorName() string {
	return "GameUserListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GameUserListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGameUserListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GameUserListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GameUserListRequestValidationError{}

// Validate checks the field values on GameUserListReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GameUserListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GameUserListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GameUserListReplyMultiError, or nil if none found.
func (m *GameUserListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GameUserListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GameUserListReplyValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GameUserListReplyValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GameUserListReplyValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GameUserListReplyMultiError(errors)
	}

	return nil
}

// GameUserListReplyMultiError is an error wrapping multiple validation errors
// returned by GameUserListReply.ValidateAll() if the designated constraints
// aren't met.
type GameUserListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GameUserListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GameUserListReplyMultiError) AllErrors() []error { return m }

// GameUserListReplyValidationError is the validation error returned by
// GameUserListReply.Validate if the designated constraints aren't met.
type GameUserListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GameUserListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GameUserListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GameUserListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GameUserListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GameUserListReplyValidationError) ErrorName() string {
	return "GameUserListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GameUserListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGameUserListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GameUserListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GameUserListReplyValidationError{}

// Validate checks the field values on GetRoomUserListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRoomUserListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRoomUserListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRoomUserListRequestMultiError, or nil if none found.
func (m *GetRoomUserListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRoomUserListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetRoomUserListRequestMultiError(errors)
	}

	return nil
}

// GetRoomUserListRequestMultiError is an error wrapping multiple validation
// errors returned by GetRoomUserListRequest.ValidateAll() if the designated
// constraints aren't met.
type GetRoomUserListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRoomUserListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRoomUserListRequestMultiError) AllErrors() []error { return m }

// GetRoomUserListRequestValidationError is the validation error returned by
// GetRoomUserListRequest.Validate if the designated constraints aren't met.
type GetRoomUserListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRoomUserListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRoomUserListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRoomUserListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRoomUserListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRoomUserListRequestValidationError) ErrorName() string {
	return "GetRoomUserListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetRoomUserListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRoomUserListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRoomUserListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRoomUserListRequestValidationError{}

// Validate checks the field values on GetRoomUserListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRoomUserListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRoomUserListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRoomUserListReplyMultiError, or nil if none found.
func (m *GetRoomUserListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRoomUserListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetRoomUserListReplyValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetRoomUserListReplyValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetRoomUserListReplyValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetRoomUserListReplyMultiError(errors)
	}

	return nil
}

// GetRoomUserListReplyMultiError is an error wrapping multiple validation
// errors returned by GetRoomUserListReply.ValidateAll() if the designated
// constraints aren't met.
type GetRoomUserListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRoomUserListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRoomUserListReplyMultiError) AllErrors() []error { return m }

// GetRoomUserListReplyValidationError is the validation error returned by
// GetRoomUserListReply.Validate if the designated constraints aren't met.
type GetRoomUserListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRoomUserListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRoomUserListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRoomUserListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRoomUserListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRoomUserListReplyValidationError) ErrorName() string {
	return "GetRoomUserListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetRoomUserListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRoomUserListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRoomUserListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRoomUserListReplyValidationError{}

// Validate checks the field values on CreatePlaySortRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePlaySortRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePlaySortRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePlaySortRequestMultiError, or nil if none found.
func (m *CreatePlaySortRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePlaySortRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSendBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePlaySortRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePlaySortRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSendBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePlaySortRequestValidationError{
				field:  "SendBody",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePlaySortRequestMultiError(errors)
	}

	return nil
}

// CreatePlaySortRequestMultiError is an error wrapping multiple validation
// errors returned by CreatePlaySortRequest.ValidateAll() if the designated
// constraints aren't met.
type CreatePlaySortRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePlaySortRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePlaySortRequestMultiError) AllErrors() []error { return m }

// CreatePlaySortRequestValidationError is the validation error returned by
// CreatePlaySortRequest.Validate if the designated constraints aren't met.
type CreatePlaySortRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePlaySortRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePlaySortRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePlaySortRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePlaySortRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePlaySortRequestValidationError) ErrorName() string {
	return "CreatePlaySortRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePlaySortRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePlaySortRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePlaySortRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePlaySortRequestValidationError{}

// Validate checks the field values on CreatePlaySortReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePlaySortReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePlaySortReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePlaySortReplyMultiError, or nil if none found.
func (m *CreatePlaySortReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePlaySortReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PlayId

	if len(errors) > 0 {
		return CreatePlaySortReplyMultiError(errors)
	}

	return nil
}

// CreatePlaySortReplyMultiError is an error wrapping multiple validation
// errors returned by CreatePlaySortReply.ValidateAll() if the designated
// constraints aren't met.
type CreatePlaySortReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePlaySortReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePlaySortReplyMultiError) AllErrors() []error { return m }

// CreatePlaySortReplyValidationError is the validation error returned by
// CreatePlaySortReply.Validate if the designated constraints aren't met.
type CreatePlaySortReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePlaySortReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePlaySortReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePlaySortReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePlaySortReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePlaySortReplyValidationError) ErrorName() string {
	return "CreatePlaySortReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePlaySortReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePlaySortReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePlaySortReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePlaySortReplyValidationError{}

// Validate checks the field values on CreatePlayGameRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePlayGameRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePlayGameRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePlayGameRequestMultiError, or nil if none found.
func (m *CreatePlayGameRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePlayGameRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSendBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePlayGameRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePlayGameRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSendBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePlayGameRequestValidationError{
				field:  "SendBody",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePlayGameRequestMultiError(errors)
	}

	return nil
}

// CreatePlayGameRequestMultiError is an error wrapping multiple validation
// errors returned by CreatePlayGameRequest.ValidateAll() if the designated
// constraints aren't met.
type CreatePlayGameRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePlayGameRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePlayGameRequestMultiError) AllErrors() []error { return m }

// CreatePlayGameRequestValidationError is the validation error returned by
// CreatePlayGameRequest.Validate if the designated constraints aren't met.
type CreatePlayGameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePlayGameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePlayGameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePlayGameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePlayGameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePlayGameRequestValidationError) ErrorName() string {
	return "CreatePlayGameRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePlayGameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePlayGameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePlayGameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePlayGameRequestValidationError{}

// Validate checks the field values on CreatePlayGameReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePlayGameReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePlayGameReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePlayGameReplyMultiError, or nil if none found.
func (m *CreatePlayGameReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePlayGameReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PlayId

	if len(errors) > 0 {
		return CreatePlayGameReplyMultiError(errors)
	}

	return nil
}

// CreatePlayGameReplyMultiError is an error wrapping multiple validation
// errors returned by CreatePlayGameReply.ValidateAll() if the designated
// constraints aren't met.
type CreatePlayGameReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePlayGameReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePlayGameReplyMultiError) AllErrors() []error { return m }

// CreatePlayGameReplyValidationError is the validation error returned by
// CreatePlayGameReply.Validate if the designated constraints aren't met.
type CreatePlayGameReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePlayGameReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePlayGameReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePlayGameReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePlayGameReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePlayGameReplyValidationError) ErrorName() string {
	return "CreatePlayGameReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePlayGameReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePlayGameReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePlayGameReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePlayGameReplyValidationError{}

// Validate checks the field values on RoomAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RoomAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoomAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoomAccountRequestMultiError, or nil if none found.
func (m *RoomAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RoomAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSendBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RoomAccountRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RoomAccountRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSendBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoomAccountRequestValidationError{
				field:  "SendBody",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RoomAccountRequestMultiError(errors)
	}

	return nil
}

// RoomAccountRequestMultiError is an error wrapping multiple validation errors
// returned by RoomAccountRequest.ValidateAll() if the designated constraints
// aren't met.
type RoomAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoomAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoomAccountRequestMultiError) AllErrors() []error { return m }

// RoomAccountRequestValidationError is the validation error returned by
// RoomAccountRequest.Validate if the designated constraints aren't met.
type RoomAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoomAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoomAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoomAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoomAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoomAccountRequestValidationError) ErrorName() string {
	return "RoomAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RoomAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoomAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoomAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoomAccountRequestValidationError{}

// Validate checks the field values on RoomAccountReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RoomAccountReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoomAccountReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoomAccountReplyMultiError, or nil if none found.
func (m *RoomAccountReply) ValidateAll() error {
	return m.validate(true)
}

func (m *RoomAccountReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoomId

	// no validation rules for RoomType

	if len(errors) > 0 {
		return RoomAccountReplyMultiError(errors)
	}

	return nil
}

// RoomAccountReplyMultiError is an error wrapping multiple validation errors
// returned by RoomAccountReply.ValidateAll() if the designated constraints
// aren't met.
type RoomAccountReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoomAccountReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoomAccountReplyMultiError) AllErrors() []error { return m }

// RoomAccountReplyValidationError is the validation error returned by
// RoomAccountReply.Validate if the designated constraints aren't met.
type RoomAccountReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoomAccountReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoomAccountReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoomAccountReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoomAccountReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoomAccountReplyValidationError) ErrorName() string { return "RoomAccountReplyValidationError" }

// Error satisfies the builtin error interface
func (e RoomAccountReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoomAccountReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoomAccountReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoomAccountReplyValidationError{}

// Validate checks the field values on PlayAmountTotalRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PlayAmountTotalRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlayAmountTotalRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PlayAmountTotalRequestMultiError, or nil if none found.
func (m *PlayAmountTotalRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PlayAmountTotalRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PlayId

	if len(errors) > 0 {
		return PlayAmountTotalRequestMultiError(errors)
	}

	return nil
}

// PlayAmountTotalRequestMultiError is an error wrapping multiple validation
// errors returned by PlayAmountTotalRequest.ValidateAll() if the designated
// constraints aren't met.
type PlayAmountTotalRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlayAmountTotalRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlayAmountTotalRequestMultiError) AllErrors() []error { return m }

// PlayAmountTotalRequestValidationError is the validation error returned by
// PlayAmountTotalRequest.Validate if the designated constraints aren't met.
type PlayAmountTotalRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlayAmountTotalRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlayAmountTotalRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlayAmountTotalRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlayAmountTotalRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlayAmountTotalRequestValidationError) ErrorName() string {
	return "PlayAmountTotalRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PlayAmountTotalRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlayAmountTotalRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlayAmountTotalRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlayAmountTotalRequestValidationError{}

// Validate checks the field values on PlayAmountTotalReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PlayAmountTotalReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlayAmountTotalReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PlayAmountTotalReplyMultiError, or nil if none found.
func (m *PlayAmountTotalReply) ValidateAll() error {
	return m.validate(true)
}

func (m *PlayAmountTotalReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TotalAmount

	if len(errors) > 0 {
		return PlayAmountTotalReplyMultiError(errors)
	}

	return nil
}

// PlayAmountTotalReplyMultiError is an error wrapping multiple validation
// errors returned by PlayAmountTotalReply.ValidateAll() if the designated
// constraints aren't met.
type PlayAmountTotalReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlayAmountTotalReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlayAmountTotalReplyMultiError) AllErrors() []error { return m }

// PlayAmountTotalReplyValidationError is the validation error returned by
// PlayAmountTotalReply.Validate if the designated constraints aren't met.
type PlayAmountTotalReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlayAmountTotalReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlayAmountTotalReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlayAmountTotalReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlayAmountTotalReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlayAmountTotalReplyValidationError) ErrorName() string {
	return "PlayAmountTotalReplyValidationError"
}

// Error satisfies the builtin error interface
func (e PlayAmountTotalReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlayAmountTotalReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlayAmountTotalReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlayAmountTotalReplyValidationError{}

// Validate checks the field values on CreateRoomRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateRoomRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRoomRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRoomRequestMultiError, or nil if none found.
func (m *CreateRoomRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRoomRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSendBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateRoomRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateRoomRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSendBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateRoomRequestValidationError{
				field:  "SendBody",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateRoomRequestMultiError(errors)
	}

	return nil
}

// CreateRoomRequestMultiError is an error wrapping multiple validation errors
// returned by CreateRoomRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateRoomRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRoomRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRoomRequestMultiError) AllErrors() []error { return m }

// CreateRoomRequestValidationError is the validation error returned by
// CreateRoomRequest.Validate if the designated constraints aren't met.
type CreateRoomRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRoomRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRoomRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRoomRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRoomRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRoomRequestValidationError) ErrorName() string {
	return "CreateRoomRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRoomRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRoomRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRoomRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRoomRequestValidationError{}

// Validate checks the field values on CreateRoomReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateRoomReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRoomReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRoomReplyMultiError, or nil if none found.
func (m *CreateRoomReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRoomReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoomId

	// no validation rules for Account

	// no validation rules for RoomType

	// no validation rules for GameId

	if len(errors) > 0 {
		return CreateRoomReplyMultiError(errors)
	}

	return nil
}

// CreateRoomReplyMultiError is an error wrapping multiple validation errors
// returned by CreateRoomReply.ValidateAll() if the designated constraints
// aren't met.
type CreateRoomReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRoomReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRoomReplyMultiError) AllErrors() []error { return m }

// CreateRoomReplyValidationError is the validation error returned by
// CreateRoomReply.Validate if the designated constraints aren't met.
type CreateRoomReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRoomReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRoomReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRoomReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRoomReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRoomReplyValidationError) ErrorName() string { return "CreateRoomReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateRoomReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRoomReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRoomReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRoomReplyValidationError{}

// Validate checks the field values on CreatePlayGameScoreRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePlayGameScoreRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePlayGameScoreRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePlayGameScoreRequestMultiError, or nil if none found.
func (m *CreatePlayGameScoreRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePlayGameScoreRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSendBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePlayGameScoreRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePlayGameScoreRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSendBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePlayGameScoreRequestValidationError{
				field:  "SendBody",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePlayGameScoreRequestMultiError(errors)
	}

	return nil
}

// CreatePlayGameScoreRequestMultiError is an error wrapping multiple
// validation errors returned by CreatePlayGameScoreRequest.ValidateAll() if
// the designated constraints aren't met.
type CreatePlayGameScoreRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePlayGameScoreRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePlayGameScoreRequestMultiError) AllErrors() []error { return m }

// CreatePlayGameScoreRequestValidationError is the validation error returned
// by CreatePlayGameScoreRequest.Validate if the designated constraints aren't met.
type CreatePlayGameScoreRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePlayGameScoreRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePlayGameScoreRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePlayGameScoreRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePlayGameScoreRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePlayGameScoreRequestValidationError) ErrorName() string {
	return "CreatePlayGameScoreRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePlayGameScoreRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePlayGameScoreRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePlayGameScoreRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePlayGameScoreRequestValidationError{}

// Validate checks the field values on CreatePlayGameScoreReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePlayGameScoreReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePlayGameScoreReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePlayGameScoreReplyMultiError, or nil if none found.
func (m *CreatePlayGameScoreReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePlayGameScoreReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PlayId

	if len(errors) > 0 {
		return CreatePlayGameScoreReplyMultiError(errors)
	}

	return nil
}

// CreatePlayGameScoreReplyMultiError is an error wrapping multiple validation
// errors returned by CreatePlayGameScoreReply.ValidateAll() if the designated
// constraints aren't met.
type CreatePlayGameScoreReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePlayGameScoreReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePlayGameScoreReplyMultiError) AllErrors() []error { return m }

// CreatePlayGameScoreReplyValidationError is the validation error returned by
// CreatePlayGameScoreReply.Validate if the designated constraints aren't met.
type CreatePlayGameScoreReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePlayGameScoreReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePlayGameScoreReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePlayGameScoreReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePlayGameScoreReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePlayGameScoreReplyValidationError) ErrorName() string {
	return "CreatePlayGameScoreReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePlayGameScoreReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePlayGameScoreReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePlayGameScoreReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePlayGameScoreReplyValidationError{}

// Validate checks the field values on CreatePlayGameResultRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePlayGameResultRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePlayGameResultRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePlayGameResultRequestMultiError, or nil if none found.
func (m *CreatePlayGameResultRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePlayGameResultRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSendBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePlayGameResultRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePlayGameResultRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSendBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePlayGameResultRequestValidationError{
				field:  "SendBody",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePlayGameResultRequestMultiError(errors)
	}

	return nil
}

// CreatePlayGameResultRequestMultiError is an error wrapping multiple
// validation errors returned by CreatePlayGameResultRequest.ValidateAll() if
// the designated constraints aren't met.
type CreatePlayGameResultRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePlayGameResultRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePlayGameResultRequestMultiError) AllErrors() []error { return m }

// CreatePlayGameResultRequestValidationError is the validation error returned
// by CreatePlayGameResultRequest.Validate if the designated constraints
// aren't met.
type CreatePlayGameResultRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePlayGameResultRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePlayGameResultRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePlayGameResultRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePlayGameResultRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePlayGameResultRequestValidationError) ErrorName() string {
	return "CreatePlayGameResultRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePlayGameResultRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePlayGameResultRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePlayGameResultRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePlayGameResultRequestValidationError{}

// Validate checks the field values on CreatePlayGameResultReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePlayGameResultReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePlayGameResultReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePlayGameResultReplyMultiError, or nil if none found.
func (m *CreatePlayGameResultReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePlayGameResultReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PlayId

	if len(errors) > 0 {
		return CreatePlayGameResultReplyMultiError(errors)
	}

	return nil
}

// CreatePlayGameResultReplyMultiError is an error wrapping multiple validation
// errors returned by CreatePlayGameResultReply.ValidateAll() if the
// designated constraints aren't met.
type CreatePlayGameResultReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePlayGameResultReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePlayGameResultReplyMultiError) AllErrors() []error { return m }

// CreatePlayGameResultReplyValidationError is the validation error returned by
// CreatePlayGameResultReply.Validate if the designated constraints aren't met.
type CreatePlayGameResultReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePlayGameResultReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePlayGameResultReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePlayGameResultReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePlayGameResultReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePlayGameResultReplyValidationError) ErrorName() string {
	return "CreatePlayGameResultReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePlayGameResultReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePlayGameResultReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePlayGameResultReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePlayGameResultReplyValidationError{}

// Validate checks the field values on CreatePlayGameSortRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePlayGameSortRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePlayGameSortRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePlayGameSortRequestMultiError, or nil if none found.
func (m *CreatePlayGameSortRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePlayGameSortRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSendBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePlayGameSortRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePlayGameSortRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSendBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePlayGameSortRequestValidationError{
				field:  "SendBody",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePlayGameSortRequestMultiError(errors)
	}

	return nil
}

// CreatePlayGameSortRequestMultiError is an error wrapping multiple validation
// errors returned by CreatePlayGameSortRequest.ValidateAll() if the
// designated constraints aren't met.
type CreatePlayGameSortRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePlayGameSortRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePlayGameSortRequestMultiError) AllErrors() []error { return m }

// CreatePlayGameSortRequestValidationError is the validation error returned by
// CreatePlayGameSortRequest.Validate if the designated constraints aren't met.
type CreatePlayGameSortRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePlayGameSortRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePlayGameSortRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePlayGameSortRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePlayGameSortRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePlayGameSortRequestValidationError) ErrorName() string {
	return "CreatePlayGameSortRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePlayGameSortRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePlayGameSortRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePlayGameSortRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePlayGameSortRequestValidationError{}

// Validate checks the field values on CreatePlayGameSortReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePlayGameSortReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePlayGameSortReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePlayGameSortReplyMultiError, or nil if none found.
func (m *CreatePlayGameSortReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePlayGameSortReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PlayId

	if len(errors) > 0 {
		return CreatePlayGameSortReplyMultiError(errors)
	}

	return nil
}

// CreatePlayGameSortReplyMultiError is an error wrapping multiple validation
// errors returned by CreatePlayGameSortReply.ValidateAll() if the designated
// constraints aren't met.
type CreatePlayGameSortReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePlayGameSortReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePlayGameSortReplyMultiError) AllErrors() []error { return m }

// CreatePlayGameSortReplyValidationError is the validation error returned by
// CreatePlayGameSortReply.Validate if the designated constraints aren't met.
type CreatePlayGameSortReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePlayGameSortReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePlayGameSortReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePlayGameSortReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePlayGameSortReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePlayGameSortReplyValidationError) ErrorName() string {
	return "CreatePlayGameSortReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePlayGameSortReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePlayGameSortReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePlayGameSortReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePlayGameSortReplyValidationError{}

// Validate checks the field values on CreatePlayGameGoalRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePlayGameGoalRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePlayGameGoalRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePlayGameGoalRequestMultiError, or nil if none found.
func (m *CreatePlayGameGoalRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePlayGameGoalRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSendBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePlayGameGoalRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePlayGameGoalRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSendBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePlayGameGoalRequestValidationError{
				field:  "SendBody",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePlayGameGoalRequestMultiError(errors)
	}

	return nil
}

// CreatePlayGameGoalRequestMultiError is an error wrapping multiple validation
// errors returned by CreatePlayGameGoalRequest.ValidateAll() if the
// designated constraints aren't met.
type CreatePlayGameGoalRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePlayGameGoalRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePlayGameGoalRequestMultiError) AllErrors() []error { return m }

// CreatePlayGameGoalRequestValidationError is the validation error returned by
// CreatePlayGameGoalRequest.Validate if the designated constraints aren't met.
type CreatePlayGameGoalRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePlayGameGoalRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePlayGameGoalRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePlayGameGoalRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePlayGameGoalRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePlayGameGoalRequestValidationError) ErrorName() string {
	return "CreatePlayGameGoalRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePlayGameGoalRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePlayGameGoalRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePlayGameGoalRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePlayGameGoalRequestValidationError{}

// Validate checks the field values on CreatePlayGameGoalReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePlayGameGoalReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePlayGameGoalReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePlayGameGoalReplyMultiError, or nil if none found.
func (m *CreatePlayGameGoalReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePlayGameGoalReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PlayId

	if len(errors) > 0 {
		return CreatePlayGameGoalReplyMultiError(errors)
	}

	return nil
}

// CreatePlayGameGoalReplyMultiError is an error wrapping multiple validation
// errors returned by CreatePlayGameGoalReply.ValidateAll() if the designated
// constraints aren't met.
type CreatePlayGameGoalReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePlayGameGoalReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePlayGameGoalReplyMultiError) AllErrors() []error { return m }

// CreatePlayGameGoalReplyValidationError is the validation error returned by
// CreatePlayGameGoalReply.Validate if the designated constraints aren't met.
type CreatePlayGameGoalReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePlayGameGoalReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePlayGameGoalReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePlayGameGoalReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePlayGameGoalReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePlayGameGoalReplyValidationError) ErrorName() string {
	return "CreatePlayGameGoalReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePlayGameGoalReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePlayGameGoalReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePlayGameGoalReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePlayGameGoalReplyValidationError{}

// Validate checks the field values on GetUserPlayListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserPlayListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserPlayListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserPlayListRequestMultiError, or nil if none found.
func (m *GetUserPlayListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserPlayListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetUserPlayListRequestMultiError(errors)
	}

	return nil
}

// GetUserPlayListRequestMultiError is an error wrapping multiple validation
// errors returned by GetUserPlayListRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserPlayListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserPlayListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserPlayListRequestMultiError) AllErrors() []error { return m }

// GetUserPlayListRequestValidationError is the validation error returned by
// GetUserPlayListRequest.Validate if the designated constraints aren't met.
type GetUserPlayListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserPlayListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserPlayListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserPlayListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserPlayListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserPlayListRequestValidationError) ErrorName() string {
	return "GetUserPlayListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserPlayListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserPlayListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserPlayListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserPlayListRequestValidationError{}

// Validate checks the field values on GetUserPlayListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserPlayListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserPlayListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserPlayListReplyMultiError, or nil if none found.
func (m *GetUserPlayListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserPlayListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserPlayListReplyValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserPlayListReplyValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserPlayListReplyValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetUserPlayListReplyMultiError(errors)
	}

	return nil
}

// GetUserPlayListReplyMultiError is an error wrapping multiple validation
// errors returned by GetUserPlayListReply.ValidateAll() if the designated
// constraints aren't met.
type GetUserPlayListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserPlayListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserPlayListReplyMultiError) AllErrors() []error { return m }

// GetUserPlayListReplyValidationError is the validation error returned by
// GetUserPlayListReply.Validate if the designated constraints aren't met.
type GetUserPlayListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserPlayListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserPlayListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserPlayListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserPlayListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserPlayListReplyValidationError) ErrorName() string {
	return "GetUserPlayListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserPlayListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserPlayListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserPlayListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserPlayListReplyValidationError{}

// Validate checks the field values on RoomInfoRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RoomInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoomInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoomInfoRequestMultiError, or nil if none found.
func (m *RoomInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RoomInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoomId

	if len(errors) > 0 {
		return RoomInfoRequestMultiError(errors)
	}

	return nil
}

// RoomInfoRequestMultiError is an error wrapping multiple validation errors
// returned by RoomInfoRequest.ValidateAll() if the designated constraints
// aren't met.
type RoomInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoomInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoomInfoRequestMultiError) AllErrors() []error { return m }

// RoomInfoRequestValidationError is the validation error returned by
// RoomInfoRequest.Validate if the designated constraints aren't met.
type RoomInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoomInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoomInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoomInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoomInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoomInfoRequestValidationError) ErrorName() string { return "RoomInfoRequestValidationError" }

// Error satisfies the builtin error interface
func (e RoomInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoomInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoomInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoomInfoRequestValidationError{}

// Validate checks the field values on RoomInfoReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RoomInfoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoomInfoReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RoomInfoReplyMultiError, or
// nil if none found.
func (m *RoomInfoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *RoomInfoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CreatedRoomUser

	// no validation rules for GameId

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RoomInfoReplyValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RoomInfoReplyValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RoomInfoReplyValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RoomInfoReplyMultiError(errors)
	}

	return nil
}

// RoomInfoReplyMultiError is an error wrapping multiple validation errors
// returned by RoomInfoReply.ValidateAll() if the designated constraints
// aren't met.
type RoomInfoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoomInfoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoomInfoReplyMultiError) AllErrors() []error { return m }

// RoomInfoReplyValidationError is the validation error returned by
// RoomInfoReply.Validate if the designated constraints aren't met.
type RoomInfoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoomInfoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoomInfoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoomInfoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoomInfoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoomInfoReplyValidationError) ErrorName() string { return "RoomInfoReplyValidationError" }

// Error satisfies the builtin error interface
func (e RoomInfoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoomInfoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoomInfoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoomInfoReplyValidationError{}

// Validate checks the field values on AllowedPlayListReply_Item with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AllowedPlayListReply_Item) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AllowedPlayListReply_Item with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AllowedPlayListReply_ItemMultiError, or nil if none found.
func (m *AllowedPlayListReply_Item) ValidateAll() error {
	return m.validate(true)
}

func (m *AllowedPlayListReply_Item) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for Type

	// no validation rules for StartTime

	// no validation rules for EndTime

	if len(errors) > 0 {
		return AllowedPlayListReply_ItemMultiError(errors)
	}

	return nil
}

// AllowedPlayListReply_ItemMultiError is an error wrapping multiple validation
// errors returned by AllowedPlayListReply_Item.ValidateAll() if the
// designated constraints aren't met.
type AllowedPlayListReply_ItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AllowedPlayListReply_ItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AllowedPlayListReply_ItemMultiError) AllErrors() []error { return m }

// AllowedPlayListReply_ItemValidationError is the validation error returned by
// AllowedPlayListReply_Item.Validate if the designated constraints aren't met.
type AllowedPlayListReply_ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AllowedPlayListReply_ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AllowedPlayListReply_ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AllowedPlayListReply_ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AllowedPlayListReply_ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AllowedPlayListReply_ItemValidationError) ErrorName() string {
	return "AllowedPlayListReply_ItemValidationError"
}

// Error satisfies the builtin error interface
func (e AllowedPlayListReply_ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAllowedPlayListReply_Item.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AllowedPlayListReply_ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AllowedPlayListReply_ItemValidationError{}

// Validate checks the field values on RoomPlayListReply_Item with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RoomPlayListReply_Item) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoomPlayListReply_Item with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoomPlayListReply_ItemMultiError, or nil if none found.
func (m *RoomPlayListReply_Item) ValidateAll() error {
	return m.validate(true)
}

func (m *RoomPlayListReply_Item) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for Type

	// no validation rules for StartTime

	// no validation rules for EndTime

	if len(errors) > 0 {
		return RoomPlayListReply_ItemMultiError(errors)
	}

	return nil
}

// RoomPlayListReply_ItemMultiError is an error wrapping multiple validation
// errors returned by RoomPlayListReply_Item.ValidateAll() if the designated
// constraints aren't met.
type RoomPlayListReply_ItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoomPlayListReply_ItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoomPlayListReply_ItemMultiError) AllErrors() []error { return m }

// RoomPlayListReply_ItemValidationError is the validation error returned by
// RoomPlayListReply_Item.Validate if the designated constraints aren't met.
type RoomPlayListReply_ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoomPlayListReply_ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoomPlayListReply_ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoomPlayListReply_ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoomPlayListReply_ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoomPlayListReply_ItemValidationError) ErrorName() string {
	return "RoomPlayListReply_ItemValidationError"
}

// Error satisfies the builtin error interface
func (e RoomPlayListReply_ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoomPlayListReply_Item.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoomPlayListReply_ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoomPlayListReply_ItemValidationError{}

// Validate checks the field values on GameUserListReply_Item with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GameUserListReply_Item) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GameUserListReply_Item with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GameUserListReply_ItemMultiError, or nil if none found.
func (m *GameUserListReply_Item) ValidateAll() error {
	return m.validate(true)
}

func (m *GameUserListReply_Item) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Address

	if len(errors) > 0 {
		return GameUserListReply_ItemMultiError(errors)
	}

	return nil
}

// GameUserListReply_ItemMultiError is an error wrapping multiple validation
// errors returned by GameUserListReply_Item.ValidateAll() if the designated
// constraints aren't met.
type GameUserListReply_ItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GameUserListReply_ItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GameUserListReply_ItemMultiError) AllErrors() []error { return m }

// GameUserListReply_ItemValidationError is the validation error returned by
// GameUserListReply_Item.Validate if the designated constraints aren't met.
type GameUserListReply_ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GameUserListReply_ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GameUserListReply_ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GameUserListReply_ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GameUserListReply_ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GameUserListReply_ItemValidationError) ErrorName() string {
	return "GameUserListReply_ItemValidationError"
}

// Error satisfies the builtin error interface
func (e GameUserListReply_ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGameUserListReply_Item.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GameUserListReply_ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GameUserListReply_ItemValidationError{}

// Validate checks the field values on GetRoomUserListReply_Item with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRoomUserListReply_Item) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRoomUserListReply_Item with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRoomUserListReply_ItemMultiError, or nil if none found.
func (m *GetRoomUserListReply_Item) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRoomUserListReply_Item) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Account

	// no validation rules for CreatedAt

	if len(errors) > 0 {
		return GetRoomUserListReply_ItemMultiError(errors)
	}

	return nil
}

// GetRoomUserListReply_ItemMultiError is an error wrapping multiple validation
// errors returned by GetRoomUserListReply_Item.ValidateAll() if the
// designated constraints aren't met.
type GetRoomUserListReply_ItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRoomUserListReply_ItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRoomUserListReply_ItemMultiError) AllErrors() []error { return m }

// GetRoomUserListReply_ItemValidationError is the validation error returned by
// GetRoomUserListReply_Item.Validate if the designated constraints aren't met.
type GetRoomUserListReply_ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRoomUserListReply_ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRoomUserListReply_ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRoomUserListReply_ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRoomUserListReply_ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRoomUserListReply_ItemValidationError) ErrorName() string {
	return "GetRoomUserListReply_ItemValidationError"
}

// Error satisfies the builtin error interface
func (e GetRoomUserListReply_ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRoomUserListReply_Item.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRoomUserListReply_ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRoomUserListReply_ItemValidationError{}

// Validate checks the field values on CreatePlaySortRequest_SendBody with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePlaySortRequest_SendBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePlaySortRequest_SendBody with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreatePlaySortRequest_SendBodyMultiError, or nil if none found.
func (m *CreatePlaySortRequest_SendBody) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePlaySortRequest_SendBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StartTime

	// no validation rules for EndTime

	// no validation rules for PlayType

	// no validation rules for SortId

	// no validation rules for RoomId

	if len(errors) > 0 {
		return CreatePlaySortRequest_SendBodyMultiError(errors)
	}

	return nil
}

// CreatePlaySortRequest_SendBodyMultiError is an error wrapping multiple
// validation errors returned by CreatePlaySortRequest_SendBody.ValidateAll()
// if the designated constraints aren't met.
type CreatePlaySortRequest_SendBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePlaySortRequest_SendBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePlaySortRequest_SendBodyMultiError) AllErrors() []error { return m }

// CreatePlaySortRequest_SendBodyValidationError is the validation error
// returned by CreatePlaySortRequest_SendBody.Validate if the designated
// constraints aren't met.
type CreatePlaySortRequest_SendBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePlaySortRequest_SendBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePlaySortRequest_SendBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePlaySortRequest_SendBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePlaySortRequest_SendBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePlaySortRequest_SendBodyValidationError) ErrorName() string {
	return "CreatePlaySortRequest_SendBodyValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePlaySortRequest_SendBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePlaySortRequest_SendBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePlaySortRequest_SendBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePlaySortRequest_SendBodyValidationError{}

// Validate checks the field values on CreatePlayGameRequest_SendBody with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePlayGameRequest_SendBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePlayGameRequest_SendBody with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreatePlayGameRequest_SendBodyMultiError, or nil if none found.
func (m *CreatePlayGameRequest_SendBody) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePlayGameRequest_SendBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StartTime

	// no validation rules for EndTime

	// no validation rules for PlayType

	// no validation rules for GameId

	// no validation rules for RoomId

	if len(errors) > 0 {
		return CreatePlayGameRequest_SendBodyMultiError(errors)
	}

	return nil
}

// CreatePlayGameRequest_SendBodyMultiError is an error wrapping multiple
// validation errors returned by CreatePlayGameRequest_SendBody.ValidateAll()
// if the designated constraints aren't met.
type CreatePlayGameRequest_SendBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePlayGameRequest_SendBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePlayGameRequest_SendBodyMultiError) AllErrors() []error { return m }

// CreatePlayGameRequest_SendBodyValidationError is the validation error
// returned by CreatePlayGameRequest_SendBody.Validate if the designated
// constraints aren't met.
type CreatePlayGameRequest_SendBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePlayGameRequest_SendBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePlayGameRequest_SendBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePlayGameRequest_SendBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePlayGameRequest_SendBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePlayGameRequest_SendBodyValidationError) ErrorName() string {
	return "CreatePlayGameRequest_SendBodyValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePlayGameRequest_SendBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePlayGameRequest_SendBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePlayGameRequest_SendBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePlayGameRequest_SendBodyValidationError{}

// Validate checks the field values on RoomAccountRequest_SendBody with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RoomAccountRequest_SendBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoomAccountRequest_SendBody with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoomAccountRequest_SendBodyMultiError, or nil if none found.
func (m *RoomAccountRequest_SendBody) ValidateAll() error {
	return m.validate(true)
}

func (m *RoomAccountRequest_SendBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetAccount()); l < 15 || l > 45 {
		err := RoomAccountRequest_SendBodyValidationError{
			field:  "Account",
			reason: "value length must be between 15 and 45 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RoomAccountRequest_SendBodyMultiError(errors)
	}

	return nil
}

// RoomAccountRequest_SendBodyMultiError is an error wrapping multiple
// validation errors returned by RoomAccountRequest_SendBody.ValidateAll() if
// the designated constraints aren't met.
type RoomAccountRequest_SendBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoomAccountRequest_SendBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoomAccountRequest_SendBodyMultiError) AllErrors() []error { return m }

// RoomAccountRequest_SendBodyValidationError is the validation error returned
// by RoomAccountRequest_SendBody.Validate if the designated constraints
// aren't met.
type RoomAccountRequest_SendBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoomAccountRequest_SendBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoomAccountRequest_SendBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoomAccountRequest_SendBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoomAccountRequest_SendBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoomAccountRequest_SendBodyValidationError) ErrorName() string {
	return "RoomAccountRequest_SendBodyValidationError"
}

// Error satisfies the builtin error interface
func (e RoomAccountRequest_SendBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoomAccountRequest_SendBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoomAccountRequest_SendBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoomAccountRequest_SendBodyValidationError{}

// Validate checks the field values on CreateRoomRequest_SendBody with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateRoomRequest_SendBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRoomRequest_SendBody with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRoomRequest_SendBodyMultiError, or nil if none found.
func (m *CreateRoomRequest_SendBody) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRoomRequest_SendBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GameId

	// no validation rules for RoomType

	if len(errors) > 0 {
		return CreateRoomRequest_SendBodyMultiError(errors)
	}

	return nil
}

// CreateRoomRequest_SendBodyMultiError is an error wrapping multiple
// validation errors returned by CreateRoomRequest_SendBody.ValidateAll() if
// the designated constraints aren't met.
type CreateRoomRequest_SendBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRoomRequest_SendBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRoomRequest_SendBodyMultiError) AllErrors() []error { return m }

// CreateRoomRequest_SendBodyValidationError is the validation error returned
// by CreateRoomRequest_SendBody.Validate if the designated constraints aren't met.
type CreateRoomRequest_SendBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRoomRequest_SendBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRoomRequest_SendBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRoomRequest_SendBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRoomRequest_SendBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRoomRequest_SendBodyValidationError) ErrorName() string {
	return "CreateRoomRequest_SendBodyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRoomRequest_SendBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRoomRequest_SendBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRoomRequest_SendBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRoomRequest_SendBodyValidationError{}

// Validate checks the field values on CreatePlayGameScoreRequest_SendBody with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreatePlayGameScoreRequest_SendBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePlayGameScoreRequest_SendBody
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreatePlayGameScoreRequest_SendBodyMultiError, or nil if none found.
func (m *CreatePlayGameScoreRequest_SendBody) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePlayGameScoreRequest_SendBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PlayId

	// no validation rules for Pay

	// no validation rules for RedScore

	// no validation rules for BlueScore

	// no validation rules for PlayType

	if len(errors) > 0 {
		return CreatePlayGameScoreRequest_SendBodyMultiError(errors)
	}

	return nil
}

// CreatePlayGameScoreRequest_SendBodyMultiError is an error wrapping multiple
// validation errors returned by
// CreatePlayGameScoreRequest_SendBody.ValidateAll() if the designated
// constraints aren't met.
type CreatePlayGameScoreRequest_SendBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePlayGameScoreRequest_SendBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePlayGameScoreRequest_SendBodyMultiError) AllErrors() []error { return m }

// CreatePlayGameScoreRequest_SendBodyValidationError is the validation error
// returned by CreatePlayGameScoreRequest_SendBody.Validate if the designated
// constraints aren't met.
type CreatePlayGameScoreRequest_SendBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePlayGameScoreRequest_SendBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePlayGameScoreRequest_SendBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePlayGameScoreRequest_SendBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePlayGameScoreRequest_SendBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePlayGameScoreRequest_SendBodyValidationError) ErrorName() string {
	return "CreatePlayGameScoreRequest_SendBodyValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePlayGameScoreRequest_SendBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePlayGameScoreRequest_SendBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePlayGameScoreRequest_SendBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePlayGameScoreRequest_SendBodyValidationError{}

// Validate checks the field values on CreatePlayGameResultRequest_SendBody
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreatePlayGameResultRequest_SendBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePlayGameResultRequest_SendBody
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreatePlayGameResultRequest_SendBodyMultiError, or nil if none found.
func (m *CreatePlayGameResultRequest_SendBody) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePlayGameResultRequest_SendBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PlayId

	// no validation rules for Pay

	// no validation rules for Result

	// no validation rules for PlayType

	if len(errors) > 0 {
		return CreatePlayGameResultRequest_SendBodyMultiError(errors)
	}

	return nil
}

// CreatePlayGameResultRequest_SendBodyMultiError is an error wrapping multiple
// validation errors returned by
// CreatePlayGameResultRequest_SendBody.ValidateAll() if the designated
// constraints aren't met.
type CreatePlayGameResultRequest_SendBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePlayGameResultRequest_SendBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePlayGameResultRequest_SendBodyMultiError) AllErrors() []error { return m }

// CreatePlayGameResultRequest_SendBodyValidationError is the validation error
// returned by CreatePlayGameResultRequest_SendBody.Validate if the designated
// constraints aren't met.
type CreatePlayGameResultRequest_SendBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePlayGameResultRequest_SendBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePlayGameResultRequest_SendBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePlayGameResultRequest_SendBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePlayGameResultRequest_SendBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePlayGameResultRequest_SendBodyValidationError) ErrorName() string {
	return "CreatePlayGameResultRequest_SendBodyValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePlayGameResultRequest_SendBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePlayGameResultRequest_SendBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePlayGameResultRequest_SendBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePlayGameResultRequest_SendBodyValidationError{}

// Validate checks the field values on CreatePlayGameSortRequest_SendBody with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreatePlayGameSortRequest_SendBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePlayGameSortRequest_SendBody
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreatePlayGameSortRequest_SendBodyMultiError, or nil if none found.
func (m *CreatePlayGameSortRequest_SendBody) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePlayGameSortRequest_SendBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PlayId

	// no validation rules for Pay

	// no validation rules for Content

	// no validation rules for SortId

	if len(errors) > 0 {
		return CreatePlayGameSortRequest_SendBodyMultiError(errors)
	}

	return nil
}

// CreatePlayGameSortRequest_SendBodyMultiError is an error wrapping multiple
// validation errors returned by
// CreatePlayGameSortRequest_SendBody.ValidateAll() if the designated
// constraints aren't met.
type CreatePlayGameSortRequest_SendBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePlayGameSortRequest_SendBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePlayGameSortRequest_SendBodyMultiError) AllErrors() []error { return m }

// CreatePlayGameSortRequest_SendBodyValidationError is the validation error
// returned by CreatePlayGameSortRequest_SendBody.Validate if the designated
// constraints aren't met.
type CreatePlayGameSortRequest_SendBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePlayGameSortRequest_SendBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePlayGameSortRequest_SendBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePlayGameSortRequest_SendBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePlayGameSortRequest_SendBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePlayGameSortRequest_SendBodyValidationError) ErrorName() string {
	return "CreatePlayGameSortRequest_SendBodyValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePlayGameSortRequest_SendBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePlayGameSortRequest_SendBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePlayGameSortRequest_SendBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePlayGameSortRequest_SendBodyValidationError{}

// Validate checks the field values on CreatePlayGameGoalRequest_SendBody with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreatePlayGameGoalRequest_SendBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePlayGameGoalRequest_SendBody
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreatePlayGameGoalRequest_SendBodyMultiError, or nil if none found.
func (m *CreatePlayGameGoalRequest_SendBody) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePlayGameGoalRequest_SendBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PlayId

	// no validation rules for Pay

	// no validation rules for TeamId

	// no validation rules for Goal

	// no validation rules for PlayType

	if len(errors) > 0 {
		return CreatePlayGameGoalRequest_SendBodyMultiError(errors)
	}

	return nil
}

// CreatePlayGameGoalRequest_SendBodyMultiError is an error wrapping multiple
// validation errors returned by
// CreatePlayGameGoalRequest_SendBody.ValidateAll() if the designated
// constraints aren't met.
type CreatePlayGameGoalRequest_SendBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePlayGameGoalRequest_SendBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePlayGameGoalRequest_SendBodyMultiError) AllErrors() []error { return m }

// CreatePlayGameGoalRequest_SendBodyValidationError is the validation error
// returned by CreatePlayGameGoalRequest_SendBody.Validate if the designated
// constraints aren't met.
type CreatePlayGameGoalRequest_SendBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePlayGameGoalRequest_SendBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePlayGameGoalRequest_SendBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePlayGameGoalRequest_SendBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePlayGameGoalRequest_SendBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePlayGameGoalRequest_SendBodyValidationError) ErrorName() string {
	return "CreatePlayGameGoalRequest_SendBodyValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePlayGameGoalRequest_SendBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePlayGameGoalRequest_SendBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePlayGameGoalRequest_SendBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePlayGameGoalRequest_SendBodyValidationError{}

// Validate checks the field values on GetUserPlayListReply_Item with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserPlayListReply_Item) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserPlayListReply_Item with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserPlayListReply_ItemMultiError, or nil if none found.
func (m *GetUserPlayListReply_Item) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserPlayListReply_Item) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for PlayId

	// no validation rules for Pay

	// no validation rules for Status

	// no validation rules for CreatedAt

	if len(errors) > 0 {
		return GetUserPlayListReply_ItemMultiError(errors)
	}

	return nil
}

// GetUserPlayListReply_ItemMultiError is an error wrapping multiple validation
// errors returned by GetUserPlayListReply_Item.ValidateAll() if the
// designated constraints aren't met.
type GetUserPlayListReply_ItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserPlayListReply_ItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserPlayListReply_ItemMultiError) AllErrors() []error { return m }

// GetUserPlayListReply_ItemValidationError is the validation error returned by
// GetUserPlayListReply_Item.Validate if the designated constraints aren't met.
type GetUserPlayListReply_ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserPlayListReply_ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserPlayListReply_ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserPlayListReply_ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserPlayListReply_ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserPlayListReply_ItemValidationError) ErrorName() string {
	return "GetUserPlayListReply_ItemValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserPlayListReply_ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserPlayListReply_Item.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserPlayListReply_ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserPlayListReply_ItemValidationError{}

// Validate checks the field values on RoomInfoReply_User with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RoomInfoReply_User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoomInfoReply_User with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoomInfoReply_UserMultiError, or nil if none found.
func (m *RoomInfoReply_User) ValidateAll() error {
	return m.validate(true)
}

func (m *RoomInfoReply_User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for Address

	if len(errors) > 0 {
		return RoomInfoReply_UserMultiError(errors)
	}

	return nil
}

// RoomInfoReply_UserMultiError is an error wrapping multiple validation errors
// returned by RoomInfoReply_User.ValidateAll() if the designated constraints
// aren't met.
type RoomInfoReply_UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoomInfoReply_UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoomInfoReply_UserMultiError) AllErrors() []error { return m }

// RoomInfoReply_UserValidationError is the validation error returned by
// RoomInfoReply_User.Validate if the designated constraints aren't met.
type RoomInfoReply_UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoomInfoReply_UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoomInfoReply_UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoomInfoReply_UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoomInfoReply_UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoomInfoReply_UserValidationError) ErrorName() string {
	return "RoomInfoReply_UserValidationError"
}

// Error satisfies the builtin error interface
func (e RoomInfoReply_UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoomInfoReply_User.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoomInfoReply_UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoomInfoReply_UserValidationError{}
