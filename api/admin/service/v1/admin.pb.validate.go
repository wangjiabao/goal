// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/admin/service/v1/admin.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GamePlayGrantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GamePlayGrantRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GamePlayGrantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GamePlayGrantRequestMultiError, or nil if none found.
func (m *GamePlayGrantRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GamePlayGrantRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSendBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GamePlayGrantRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GamePlayGrantRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSendBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GamePlayGrantRequestValidationError{
				field:  "SendBody",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GamePlayGrantRequestMultiError(errors)
	}

	return nil
}

// GamePlayGrantRequestMultiError is an error wrapping multiple validation
// errors returned by GamePlayGrantRequest.ValidateAll() if the designated
// constraints aren't met.
type GamePlayGrantRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GamePlayGrantRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GamePlayGrantRequestMultiError) AllErrors() []error { return m }

// GamePlayGrantRequestValidationError is the validation error returned by
// GamePlayGrantRequest.Validate if the designated constraints aren't met.
type GamePlayGrantRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GamePlayGrantRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GamePlayGrantRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GamePlayGrantRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GamePlayGrantRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GamePlayGrantRequestValidationError) ErrorName() string {
	return "GamePlayGrantRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GamePlayGrantRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGamePlayGrantRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GamePlayGrantRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GamePlayGrantRequestValidationError{}

// Validate checks the field values on GamePlayGrantReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GamePlayGrantReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GamePlayGrantReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GamePlayGrantReplyMultiError, or nil if none found.
func (m *GamePlayGrantReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GamePlayGrantReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return GamePlayGrantReplyMultiError(errors)
	}

	return nil
}

// GamePlayGrantReplyMultiError is an error wrapping multiple validation errors
// returned by GamePlayGrantReply.ValidateAll() if the designated constraints
// aren't met.
type GamePlayGrantReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GamePlayGrantReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GamePlayGrantReplyMultiError) AllErrors() []error { return m }

// GamePlayGrantReplyValidationError is the validation error returned by
// GamePlayGrantReply.Validate if the designated constraints aren't met.
type GamePlayGrantReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GamePlayGrantReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GamePlayGrantReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GamePlayGrantReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GamePlayGrantReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GamePlayGrantReplyValidationError) ErrorName() string {
	return "GamePlayGrantReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GamePlayGrantReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGamePlayGrantReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GamePlayGrantReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GamePlayGrantReplyValidationError{}

// Validate checks the field values on CreateGameRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateGameRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateGameRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateGameRequestMultiError, or nil if none found.
func (m *CreateGameRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateGameRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSendBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateGameRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateGameRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSendBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateGameRequestValidationError{
				field:  "SendBody",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateGameRequestMultiError(errors)
	}

	return nil
}

// CreateGameRequestMultiError is an error wrapping multiple validation errors
// returned by CreateGameRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateGameRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateGameRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateGameRequestMultiError) AllErrors() []error { return m }

// CreateGameRequestValidationError is the validation error returned by
// CreateGameRequest.Validate if the designated constraints aren't met.
type CreateGameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGameRequestValidationError) ErrorName() string {
	return "CreateGameRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateGameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGameRequestValidationError{}

// Validate checks the field values on CreateGameReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateGameReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateGameReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateGameReplyMultiError, or nil if none found.
func (m *CreateGameReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateGameReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GameId

	if len(errors) > 0 {
		return CreateGameReplyMultiError(errors)
	}

	return nil
}

// CreateGameReplyMultiError is an error wrapping multiple validation errors
// returned by CreateGameReply.ValidateAll() if the designated constraints
// aren't met.
type CreateGameReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateGameReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateGameReplyMultiError) AllErrors() []error { return m }

// CreateGameReplyValidationError is the validation error returned by
// CreateGameReply.Validate if the designated constraints aren't met.
type CreateGameReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGameReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGameReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGameReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGameReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGameReplyValidationError) ErrorName() string { return "CreateGameReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateGameReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGameReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGameReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGameReplyValidationError{}

// Validate checks the field values on UpdateGameRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateGameRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateGameRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateGameRequestMultiError, or nil if none found.
func (m *UpdateGameRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateGameRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSendBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateGameRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateGameRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSendBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateGameRequestValidationError{
				field:  "SendBody",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateGameRequestMultiError(errors)
	}

	return nil
}

// UpdateGameRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateGameRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateGameRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateGameRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateGameRequestMultiError) AllErrors() []error { return m }

// UpdateGameRequestValidationError is the validation error returned by
// UpdateGameRequest.Validate if the designated constraints aren't met.
type UpdateGameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGameRequestValidationError) ErrorName() string {
	return "UpdateGameRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGameRequestValidationError{}

// Validate checks the field values on UpdateGameReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateGameReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateGameReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateGameReplyMultiError, or nil if none found.
func (m *UpdateGameReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateGameReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GameId

	if len(errors) > 0 {
		return UpdateGameReplyMultiError(errors)
	}

	return nil
}

// UpdateGameReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateGameReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateGameReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateGameReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateGameReplyMultiError) AllErrors() []error { return m }

// UpdateGameReplyValidationError is the validation error returned by
// UpdateGameReply.Validate if the designated constraints aren't met.
type UpdateGameReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGameReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGameReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGameReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGameReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGameReplyValidationError) ErrorName() string { return "UpdateGameReplyValidationError" }

// Error satisfies the builtin error interface
func (e UpdateGameReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGameReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGameReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGameReplyValidationError{}

// Validate checks the field values on DisplayGameIndexRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DisplayGameIndexRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisplayGameIndexRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DisplayGameIndexRequestMultiError, or nil if none found.
func (m *DisplayGameIndexRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DisplayGameIndexRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DisplayGameIndexRequestMultiError(errors)
	}

	return nil
}

// DisplayGameIndexRequestMultiError is an error wrapping multiple validation
// errors returned by DisplayGameIndexRequest.ValidateAll() if the designated
// constraints aren't met.
type DisplayGameIndexRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisplayGameIndexRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisplayGameIndexRequestMultiError) AllErrors() []error { return m }

// DisplayGameIndexRequestValidationError is the validation error returned by
// DisplayGameIndexRequest.Validate if the designated constraints aren't met.
type DisplayGameIndexRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisplayGameIndexRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisplayGameIndexRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisplayGameIndexRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisplayGameIndexRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisplayGameIndexRequestValidationError) ErrorName() string {
	return "DisplayGameIndexRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DisplayGameIndexRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisplayGameIndexRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisplayGameIndexRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisplayGameIndexRequestValidationError{}

// Validate checks the field values on DisplayGameIndexReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DisplayGameIndexReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisplayGameIndexReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DisplayGameIndexReplyMultiError, or nil if none found.
func (m *DisplayGameIndexReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DisplayGameIndexReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GameId

	if len(errors) > 0 {
		return DisplayGameIndexReplyMultiError(errors)
	}

	return nil
}

// DisplayGameIndexReplyMultiError is an error wrapping multiple validation
// errors returned by DisplayGameIndexReply.ValidateAll() if the designated
// constraints aren't met.
type DisplayGameIndexReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisplayGameIndexReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisplayGameIndexReplyMultiError) AllErrors() []error { return m }

// DisplayGameIndexReplyValidationError is the validation error returned by
// DisplayGameIndexReply.Validate if the designated constraints aren't met.
type DisplayGameIndexReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisplayGameIndexReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisplayGameIndexReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisplayGameIndexReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisplayGameIndexReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisplayGameIndexReplyValidationError) ErrorName() string {
	return "DisplayGameIndexReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DisplayGameIndexReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisplayGameIndexReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisplayGameIndexReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisplayGameIndexReplyValidationError{}

// Validate checks the field values on GetGameRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetGameRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGameRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetGameRequestMultiError,
// or nil if none found.
func (m *GetGameRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGameRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GameId

	if len(errors) > 0 {
		return GetGameRequestMultiError(errors)
	}

	return nil
}

// GetGameRequestMultiError is an error wrapping multiple validation errors
// returned by GetGameRequest.ValidateAll() if the designated constraints
// aren't met.
type GetGameRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGameRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGameRequestMultiError) AllErrors() []error { return m }

// GetGameRequestValidationError is the validation error returned by
// GetGameRequest.Validate if the designated constraints aren't met.
type GetGameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGameRequestValidationError) ErrorName() string { return "GetGameRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetGameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGameRequestValidationError{}

// Validate checks the field values on GetGameReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetGameReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGameReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetGameReplyMultiError, or
// nil if none found.
func (m *GetGameReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGameReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RedTeamId

	// no validation rules for BlueTeamId

	// no validation rules for StartTime

	// no validation rules for EndTime

	// no validation rules for UpEndTime

	// no validation rules for DownStartTime

	// no validation rules for GameId

	// no validation rules for Status

	// no validation rules for RedTeamUpGoal

	// no validation rules for BlueTeamUpGoal

	// no validation rules for RedTeamDownGoal

	// no validation rules for BlueTeamDownGoal

	// no validation rules for WinTeamId

	// no validation rules for Name

	// no validation rules for Result

	if len(errors) > 0 {
		return GetGameReplyMultiError(errors)
	}

	return nil
}

// GetGameReplyMultiError is an error wrapping multiple validation errors
// returned by GetGameReply.ValidateAll() if the designated constraints aren't met.
type GetGameReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGameReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGameReplyMultiError) AllErrors() []error { return m }

// GetGameReplyValidationError is the validation error returned by
// GetGameReply.Validate if the designated constraints aren't met.
type GetGameReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGameReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGameReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGameReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGameReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGameReplyValidationError) ErrorName() string { return "GetGameReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetGameReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGameReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGameReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGameReplyValidationError{}

// Validate checks the field values on GetGameListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGameListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGameListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGameListRequestMultiError, or nil if none found.
func (m *GetGameListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGameListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetGameListRequestMultiError(errors)
	}

	return nil
}

// GetGameListRequestMultiError is an error wrapping multiple validation errors
// returned by GetGameListRequest.ValidateAll() if the designated constraints
// aren't met.
type GetGameListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGameListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGameListRequestMultiError) AllErrors() []error { return m }

// GetGameListRequestValidationError is the validation error returned by
// GetGameListRequest.Validate if the designated constraints aren't met.
type GetGameListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGameListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGameListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGameListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGameListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGameListRequestValidationError) ErrorName() string {
	return "GetGameListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetGameListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGameListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGameListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGameListRequestValidationError{}

// Validate checks the field values on GetGameListReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetGameListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGameListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGameListReplyMultiError, or nil if none found.
func (m *GetGameListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGameListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetGameListReplyValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetGameListReplyValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetGameListReplyValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetGameListReplyMultiError(errors)
	}

	return nil
}

// GetGameListReplyMultiError is an error wrapping multiple validation errors
// returned by GetGameListReply.ValidateAll() if the designated constraints
// aren't met.
type GetGameListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGameListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGameListReplyMultiError) AllErrors() []error { return m }

// GetGameListReplyValidationError is the validation error returned by
// GetGameListReply.Validate if the designated constraints aren't met.
type GetGameListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGameListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGameListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGameListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGameListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGameListReplyValidationError) ErrorName() string { return "GetGameListReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetGameListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGameListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGameListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGameListReplyValidationError{}

// Validate checks the field values on GetGameSortListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGameSortListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGameSortListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGameSortListRequestMultiError, or nil if none found.
func (m *GetGameSortListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGameSortListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetGameSortListRequestMultiError(errors)
	}

	return nil
}

// GetGameSortListRequestMultiError is an error wrapping multiple validation
// errors returned by GetGameSortListRequest.ValidateAll() if the designated
// constraints aren't met.
type GetGameSortListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGameSortListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGameSortListRequestMultiError) AllErrors() []error { return m }

// GetGameSortListRequestValidationError is the validation error returned by
// GetGameSortListRequest.Validate if the designated constraints aren't met.
type GetGameSortListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGameSortListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGameSortListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGameSortListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGameSortListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGameSortListRequestValidationError) ErrorName() string {
	return "GetGameSortListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetGameSortListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGameSortListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGameSortListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGameSortListRequestValidationError{}

// Validate checks the field values on GetGameSortListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGameSortListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGameSortListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGameSortListReplyMultiError, or nil if none found.
func (m *GetGameSortListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGameSortListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSorts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetGameSortListReplyValidationError{
						field:  fmt.Sprintf("Sorts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetGameSortListReplyValidationError{
						field:  fmt.Sprintf("Sorts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetGameSortListReplyValidationError{
					field:  fmt.Sprintf("Sorts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetGameSortListReplyMultiError(errors)
	}

	return nil
}

// GetGameSortListReplyMultiError is an error wrapping multiple validation
// errors returned by GetGameSortListReply.ValidateAll() if the designated
// constraints aren't met.
type GetGameSortListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGameSortListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGameSortListReplyMultiError) AllErrors() []error { return m }

// GetGameSortListReplyValidationError is the validation error returned by
// GetGameSortListReply.Validate if the designated constraints aren't met.
type GetGameSortListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGameSortListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGameSortListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGameSortListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGameSortListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGameSortListReplyValidationError) ErrorName() string {
	return "GetGameSortListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetGameSortListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGameSortListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGameSortListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGameSortListReplyValidationError{}

// Validate checks the field values on SaveDisplayGameIndexRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SaveDisplayGameIndexRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SaveDisplayGameIndexRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SaveDisplayGameIndexRequestMultiError, or nil if none found.
func (m *SaveDisplayGameIndexRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SaveDisplayGameIndexRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSendBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SaveDisplayGameIndexRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SaveDisplayGameIndexRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSendBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SaveDisplayGameIndexRequestValidationError{
				field:  "SendBody",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SaveDisplayGameIndexRequestMultiError(errors)
	}

	return nil
}

// SaveDisplayGameIndexRequestMultiError is an error wrapping multiple
// validation errors returned by SaveDisplayGameIndexRequest.ValidateAll() if
// the designated constraints aren't met.
type SaveDisplayGameIndexRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SaveDisplayGameIndexRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SaveDisplayGameIndexRequestMultiError) AllErrors() []error { return m }

// SaveDisplayGameIndexRequestValidationError is the validation error returned
// by SaveDisplayGameIndexRequest.Validate if the designated constraints
// aren't met.
type SaveDisplayGameIndexRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaveDisplayGameIndexRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaveDisplayGameIndexRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaveDisplayGameIndexRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaveDisplayGameIndexRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaveDisplayGameIndexRequestValidationError) ErrorName() string {
	return "SaveDisplayGameIndexRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SaveDisplayGameIndexRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaveDisplayGameIndexRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaveDisplayGameIndexRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaveDisplayGameIndexRequestValidationError{}

// Validate checks the field values on SaveDisplayGameIndexReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SaveDisplayGameIndexReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SaveDisplayGameIndexReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SaveDisplayGameIndexReplyMultiError, or nil if none found.
func (m *SaveDisplayGameIndexReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SaveDisplayGameIndexReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GameId

	if len(errors) > 0 {
		return SaveDisplayGameIndexReplyMultiError(errors)
	}

	return nil
}

// SaveDisplayGameIndexReplyMultiError is an error wrapping multiple validation
// errors returned by SaveDisplayGameIndexReply.ValidateAll() if the
// designated constraints aren't met.
type SaveDisplayGameIndexReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SaveDisplayGameIndexReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SaveDisplayGameIndexReplyMultiError) AllErrors() []error { return m }

// SaveDisplayGameIndexReplyValidationError is the validation error returned by
// SaveDisplayGameIndexReply.Validate if the designated constraints aren't met.
type SaveDisplayGameIndexReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaveDisplayGameIndexReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaveDisplayGameIndexReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaveDisplayGameIndexReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaveDisplayGameIndexReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaveDisplayGameIndexReplyValidationError) ErrorName() string {
	return "SaveDisplayGameIndexReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SaveDisplayGameIndexReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaveDisplayGameIndexReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaveDisplayGameIndexReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaveDisplayGameIndexReplyValidationError{}

// Validate checks the field values on CreatePlayGameRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePlayGameRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePlayGameRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePlayGameRequestMultiError, or nil if none found.
func (m *CreatePlayGameRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePlayGameRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSendBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePlayGameRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePlayGameRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSendBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePlayGameRequestValidationError{
				field:  "SendBody",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePlayGameRequestMultiError(errors)
	}

	return nil
}

// CreatePlayGameRequestMultiError is an error wrapping multiple validation
// errors returned by CreatePlayGameRequest.ValidateAll() if the designated
// constraints aren't met.
type CreatePlayGameRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePlayGameRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePlayGameRequestMultiError) AllErrors() []error { return m }

// CreatePlayGameRequestValidationError is the validation error returned by
// CreatePlayGameRequest.Validate if the designated constraints aren't met.
type CreatePlayGameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePlayGameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePlayGameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePlayGameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePlayGameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePlayGameRequestValidationError) ErrorName() string {
	return "CreatePlayGameRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePlayGameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePlayGameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePlayGameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePlayGameRequestValidationError{}

// Validate checks the field values on CreatePlayGameReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePlayGameReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePlayGameReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePlayGameReplyMultiError, or nil if none found.
func (m *CreatePlayGameReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePlayGameReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PlayId

	if len(errors) > 0 {
		return CreatePlayGameReplyMultiError(errors)
	}

	return nil
}

// CreatePlayGameReplyMultiError is an error wrapping multiple validation
// errors returned by CreatePlayGameReply.ValidateAll() if the designated
// constraints aren't met.
type CreatePlayGameReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePlayGameReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePlayGameReplyMultiError) AllErrors() []error { return m }

// CreatePlayGameReplyValidationError is the validation error returned by
// CreatePlayGameReply.Validate if the designated constraints aren't met.
type CreatePlayGameReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePlayGameReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePlayGameReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePlayGameReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePlayGameReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePlayGameReplyValidationError) ErrorName() string {
	return "CreatePlayGameReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePlayGameReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePlayGameReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePlayGameReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePlayGameReplyValidationError{}

// Validate checks the field values on CreatePlaySortRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePlaySortRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePlaySortRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePlaySortRequestMultiError, or nil if none found.
func (m *CreatePlaySortRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePlaySortRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSendBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePlaySortRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePlaySortRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSendBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePlaySortRequestValidationError{
				field:  "SendBody",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePlaySortRequestMultiError(errors)
	}

	return nil
}

// CreatePlaySortRequestMultiError is an error wrapping multiple validation
// errors returned by CreatePlaySortRequest.ValidateAll() if the designated
// constraints aren't met.
type CreatePlaySortRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePlaySortRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePlaySortRequestMultiError) AllErrors() []error { return m }

// CreatePlaySortRequestValidationError is the validation error returned by
// CreatePlaySortRequest.Validate if the designated constraints aren't met.
type CreatePlaySortRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePlaySortRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePlaySortRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePlaySortRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePlaySortRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePlaySortRequestValidationError) ErrorName() string {
	return "CreatePlaySortRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePlaySortRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePlaySortRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePlaySortRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePlaySortRequestValidationError{}

// Validate checks the field values on CreatePlaySortReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePlaySortReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePlaySortReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePlaySortReplyMultiError, or nil if none found.
func (m *CreatePlaySortReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePlaySortReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PlayId

	if len(errors) > 0 {
		return CreatePlaySortReplyMultiError(errors)
	}

	return nil
}

// CreatePlaySortReplyMultiError is an error wrapping multiple validation
// errors returned by CreatePlaySortReply.ValidateAll() if the designated
// constraints aren't met.
type CreatePlaySortReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePlaySortReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePlaySortReplyMultiError) AllErrors() []error { return m }

// CreatePlaySortReplyValidationError is the validation error returned by
// CreatePlaySortReply.Validate if the designated constraints aren't met.
type CreatePlaySortReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePlaySortReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePlaySortReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePlaySortReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePlaySortReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePlaySortReplyValidationError) ErrorName() string {
	return "CreatePlaySortReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePlaySortReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePlaySortReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePlaySortReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePlaySortReplyValidationError{}

// Validate checks the field values on CreateSortRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateSortRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSortRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSortRequestMultiError, or nil if none found.
func (m *CreateSortRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSortRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSendBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateSortRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateSortRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSendBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateSortRequestValidationError{
				field:  "SendBody",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateSortRequestMultiError(errors)
	}

	return nil
}

// CreateSortRequestMultiError is an error wrapping multiple validation errors
// returned by CreateSortRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateSortRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSortRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSortRequestMultiError) AllErrors() []error { return m }

// CreateSortRequestValidationError is the validation error returned by
// CreateSortRequest.Validate if the designated constraints aren't met.
type CreateSortRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSortRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSortRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSortRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSortRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSortRequestValidationError) ErrorName() string {
	return "CreateSortRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSortRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSortRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSortRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSortRequestValidationError{}

// Validate checks the field values on CreateSortReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateSortReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSortReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSortReplyMultiError, or nil if none found.
func (m *CreateSortReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSortReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SortId

	if len(errors) > 0 {
		return CreateSortReplyMultiError(errors)
	}

	return nil
}

// CreateSortReplyMultiError is an error wrapping multiple validation errors
// returned by CreateSortReply.ValidateAll() if the designated constraints
// aren't met.
type CreateSortReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSortReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSortReplyMultiError) AllErrors() []error { return m }

// CreateSortReplyValidationError is the validation error returned by
// CreateSortReply.Validate if the designated constraints aren't met.
type CreateSortReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSortReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSortReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSortReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSortReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSortReplyValidationError) ErrorName() string { return "CreateSortReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateSortReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSortReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSortReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSortReplyValidationError{}

// Validate checks the field values on GamePlayGrantRequest_SendBody with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GamePlayGrantRequest_SendBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GamePlayGrantRequest_SendBody with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GamePlayGrantRequest_SendBodyMultiError, or nil if none found.
func (m *GamePlayGrantRequest_SendBody) ValidateAll() error {
	return m.validate(true)
}

func (m *GamePlayGrantRequest_SendBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GameId

	if len(errors) > 0 {
		return GamePlayGrantRequest_SendBodyMultiError(errors)
	}

	return nil
}

// GamePlayGrantRequest_SendBodyMultiError is an error wrapping multiple
// validation errors returned by GamePlayGrantRequest_SendBody.ValidateAll()
// if the designated constraints aren't met.
type GamePlayGrantRequest_SendBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GamePlayGrantRequest_SendBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GamePlayGrantRequest_SendBodyMultiError) AllErrors() []error { return m }

// GamePlayGrantRequest_SendBodyValidationError is the validation error
// returned by GamePlayGrantRequest_SendBody.Validate if the designated
// constraints aren't met.
type GamePlayGrantRequest_SendBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GamePlayGrantRequest_SendBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GamePlayGrantRequest_SendBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GamePlayGrantRequest_SendBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GamePlayGrantRequest_SendBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GamePlayGrantRequest_SendBodyValidationError) ErrorName() string {
	return "GamePlayGrantRequest_SendBodyValidationError"
}

// Error satisfies the builtin error interface
func (e GamePlayGrantRequest_SendBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGamePlayGrantRequest_SendBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GamePlayGrantRequest_SendBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GamePlayGrantRequest_SendBodyValidationError{}

// Validate checks the field values on CreateGameRequest_SendBody with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateGameRequest_SendBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateGameRequest_SendBody with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateGameRequest_SendBodyMultiError, or nil if none found.
func (m *CreateGameRequest_SendBody) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateGameRequest_SendBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RedTeamId

	// no validation rules for BlueTeamId

	// no validation rules for StartTime

	// no validation rules for EndTime

	// no validation rules for UpEndTime

	// no validation rules for DownStartTime

	// no validation rules for Name

	if len(errors) > 0 {
		return CreateGameRequest_SendBodyMultiError(errors)
	}

	return nil
}

// CreateGameRequest_SendBodyMultiError is an error wrapping multiple
// validation errors returned by CreateGameRequest_SendBody.ValidateAll() if
// the designated constraints aren't met.
type CreateGameRequest_SendBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateGameRequest_SendBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateGameRequest_SendBodyMultiError) AllErrors() []error { return m }

// CreateGameRequest_SendBodyValidationError is the validation error returned
// by CreateGameRequest_SendBody.Validate if the designated constraints aren't met.
type CreateGameRequest_SendBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGameRequest_SendBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGameRequest_SendBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGameRequest_SendBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGameRequest_SendBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGameRequest_SendBodyValidationError) ErrorName() string {
	return "CreateGameRequest_SendBodyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateGameRequest_SendBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGameRequest_SendBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGameRequest_SendBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGameRequest_SendBodyValidationError{}

// Validate checks the field values on UpdateGameRequest_SendBody with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateGameRequest_SendBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateGameRequest_SendBody with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateGameRequest_SendBodyMultiError, or nil if none found.
func (m *UpdateGameRequest_SendBody) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateGameRequest_SendBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RedTeamId

	// no validation rules for BlueTeamId

	// no validation rules for StartTime

	// no validation rules for EndTime

	// no validation rules for UpEndTime

	// no validation rules for DownStartTime

	// no validation rules for GameId

	// no validation rules for Status

	// no validation rules for RedTeamUpGoal

	// no validation rules for BlueTeamUpGoal

	// no validation rules for RedTeamDownGoal

	// no validation rules for BlueTeamDownGoal

	// no validation rules for WinTeamId

	// no validation rules for Name

	if len(errors) > 0 {
		return UpdateGameRequest_SendBodyMultiError(errors)
	}

	return nil
}

// UpdateGameRequest_SendBodyMultiError is an error wrapping multiple
// validation errors returned by UpdateGameRequest_SendBody.ValidateAll() if
// the designated constraints aren't met.
type UpdateGameRequest_SendBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateGameRequest_SendBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateGameRequest_SendBodyMultiError) AllErrors() []error { return m }

// UpdateGameRequest_SendBodyValidationError is the validation error returned
// by UpdateGameRequest_SendBody.Validate if the designated constraints aren't met.
type UpdateGameRequest_SendBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGameRequest_SendBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGameRequest_SendBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGameRequest_SendBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGameRequest_SendBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGameRequest_SendBodyValidationError) ErrorName() string {
	return "UpdateGameRequest_SendBodyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGameRequest_SendBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGameRequest_SendBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGameRequest_SendBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGameRequest_SendBodyValidationError{}

// Validate checks the field values on GetGameListReply_Item with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGameListReply_Item) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGameListReply_Item with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGameListReply_ItemMultiError, or nil if none found.
func (m *GetGameListReply_Item) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGameListReply_Item) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GameId

	// no validation rules for Name

	// no validation rules for StartTime

	// no validation rules for EndTime

	// no validation rules for UpEndTime

	// no validation rules for DownStartTime

	if len(errors) > 0 {
		return GetGameListReply_ItemMultiError(errors)
	}

	return nil
}

// GetGameListReply_ItemMultiError is an error wrapping multiple validation
// errors returned by GetGameListReply_Item.ValidateAll() if the designated
// constraints aren't met.
type GetGameListReply_ItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGameListReply_ItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGameListReply_ItemMultiError) AllErrors() []error { return m }

// GetGameListReply_ItemValidationError is the validation error returned by
// GetGameListReply_Item.Validate if the designated constraints aren't met.
type GetGameListReply_ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGameListReply_ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGameListReply_ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGameListReply_ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGameListReply_ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGameListReply_ItemValidationError) ErrorName() string {
	return "GetGameListReply_ItemValidationError"
}

// Error satisfies the builtin error interface
func (e GetGameListReply_ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGameListReply_Item.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGameListReply_ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGameListReply_ItemValidationError{}

// Validate checks the field values on GetGameSortListReply_Sort with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGameSortListReply_Sort) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGameSortListReply_Sort with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGameSortListReply_SortMultiError, or nil if none found.
func (m *GetGameSortListReply_Sort) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGameSortListReply_Sort) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SortId

	// no validation rules for SortType

	// no validation rules for SortName

	// no validation rules for EndTime

	if len(errors) > 0 {
		return GetGameSortListReply_SortMultiError(errors)
	}

	return nil
}

// GetGameSortListReply_SortMultiError is an error wrapping multiple validation
// errors returned by GetGameSortListReply_Sort.ValidateAll() if the
// designated constraints aren't met.
type GetGameSortListReply_SortMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGameSortListReply_SortMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGameSortListReply_SortMultiError) AllErrors() []error { return m }

// GetGameSortListReply_SortValidationError is the validation error returned by
// GetGameSortListReply_Sort.Validate if the designated constraints aren't met.
type GetGameSortListReply_SortValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGameSortListReply_SortValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGameSortListReply_SortValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGameSortListReply_SortValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGameSortListReply_SortValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGameSortListReply_SortValidationError) ErrorName() string {
	return "GetGameSortListReply_SortValidationError"
}

// Error satisfies the builtin error interface
func (e GetGameSortListReply_SortValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGameSortListReply_Sort.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGameSortListReply_SortValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGameSortListReply_SortValidationError{}

// Validate checks the field values on SaveDisplayGameIndexRequest_SendBody
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SaveDisplayGameIndexRequest_SendBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SaveDisplayGameIndexRequest_SendBody
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SaveDisplayGameIndexRequest_SendBodyMultiError, or nil if none found.
func (m *SaveDisplayGameIndexRequest_SendBody) ValidateAll() error {
	return m.validate(true)
}

func (m *SaveDisplayGameIndexRequest_SendBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GameId

	if len(errors) > 0 {
		return SaveDisplayGameIndexRequest_SendBodyMultiError(errors)
	}

	return nil
}

// SaveDisplayGameIndexRequest_SendBodyMultiError is an error wrapping multiple
// validation errors returned by
// SaveDisplayGameIndexRequest_SendBody.ValidateAll() if the designated
// constraints aren't met.
type SaveDisplayGameIndexRequest_SendBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SaveDisplayGameIndexRequest_SendBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SaveDisplayGameIndexRequest_SendBodyMultiError) AllErrors() []error { return m }

// SaveDisplayGameIndexRequest_SendBodyValidationError is the validation error
// returned by SaveDisplayGameIndexRequest_SendBody.Validate if the designated
// constraints aren't met.
type SaveDisplayGameIndexRequest_SendBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaveDisplayGameIndexRequest_SendBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaveDisplayGameIndexRequest_SendBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaveDisplayGameIndexRequest_SendBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaveDisplayGameIndexRequest_SendBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaveDisplayGameIndexRequest_SendBodyValidationError) ErrorName() string {
	return "SaveDisplayGameIndexRequest_SendBodyValidationError"
}

// Error satisfies the builtin error interface
func (e SaveDisplayGameIndexRequest_SendBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaveDisplayGameIndexRequest_SendBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaveDisplayGameIndexRequest_SendBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaveDisplayGameIndexRequest_SendBodyValidationError{}

// Validate checks the field values on CreatePlayGameRequest_SendBody with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePlayGameRequest_SendBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePlayGameRequest_SendBody with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreatePlayGameRequest_SendBodyMultiError, or nil if none found.
func (m *CreatePlayGameRequest_SendBody) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePlayGameRequest_SendBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StartTime

	// no validation rules for EndTime

	// no validation rules for PlayType

	// no validation rules for GameId

	if len(errors) > 0 {
		return CreatePlayGameRequest_SendBodyMultiError(errors)
	}

	return nil
}

// CreatePlayGameRequest_SendBodyMultiError is an error wrapping multiple
// validation errors returned by CreatePlayGameRequest_SendBody.ValidateAll()
// if the designated constraints aren't met.
type CreatePlayGameRequest_SendBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePlayGameRequest_SendBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePlayGameRequest_SendBodyMultiError) AllErrors() []error { return m }

// CreatePlayGameRequest_SendBodyValidationError is the validation error
// returned by CreatePlayGameRequest_SendBody.Validate if the designated
// constraints aren't met.
type CreatePlayGameRequest_SendBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePlayGameRequest_SendBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePlayGameRequest_SendBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePlayGameRequest_SendBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePlayGameRequest_SendBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePlayGameRequest_SendBodyValidationError) ErrorName() string {
	return "CreatePlayGameRequest_SendBodyValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePlayGameRequest_SendBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePlayGameRequest_SendBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePlayGameRequest_SendBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePlayGameRequest_SendBodyValidationError{}

// Validate checks the field values on CreatePlaySortRequest_SendBody with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePlaySortRequest_SendBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePlaySortRequest_SendBody with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreatePlaySortRequest_SendBodyMultiError, or nil if none found.
func (m *CreatePlaySortRequest_SendBody) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePlaySortRequest_SendBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StartTime

	// no validation rules for EndTime

	// no validation rules for SortId

	if len(errors) > 0 {
		return CreatePlaySortRequest_SendBodyMultiError(errors)
	}

	return nil
}

// CreatePlaySortRequest_SendBodyMultiError is an error wrapping multiple
// validation errors returned by CreatePlaySortRequest_SendBody.ValidateAll()
// if the designated constraints aren't met.
type CreatePlaySortRequest_SendBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePlaySortRequest_SendBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePlaySortRequest_SendBodyMultiError) AllErrors() []error { return m }

// CreatePlaySortRequest_SendBodyValidationError is the validation error
// returned by CreatePlaySortRequest_SendBody.Validate if the designated
// constraints aren't met.
type CreatePlaySortRequest_SendBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePlaySortRequest_SendBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePlaySortRequest_SendBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePlaySortRequest_SendBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePlaySortRequest_SendBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePlaySortRequest_SendBodyValidationError) ErrorName() string {
	return "CreatePlaySortRequest_SendBodyValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePlaySortRequest_SendBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePlaySortRequest_SendBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePlaySortRequest_SendBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePlaySortRequest_SendBodyValidationError{}

// Validate checks the field values on CreateSortRequest_SendBody with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSortRequest_SendBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSortRequest_SendBody with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSortRequest_SendBodyMultiError, or nil if none found.
func (m *CreateSortRequest_SendBody) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSortRequest_SendBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SortName

	// no validation rules for Type

	// no validation rules for EndTime

	if len(errors) > 0 {
		return CreateSortRequest_SendBodyMultiError(errors)
	}

	return nil
}

// CreateSortRequest_SendBodyMultiError is an error wrapping multiple
// validation errors returned by CreateSortRequest_SendBody.ValidateAll() if
// the designated constraints aren't met.
type CreateSortRequest_SendBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSortRequest_SendBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSortRequest_SendBodyMultiError) AllErrors() []error { return m }

// CreateSortRequest_SendBodyValidationError is the validation error returned
// by CreateSortRequest_SendBody.Validate if the designated constraints aren't met.
type CreateSortRequest_SendBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSortRequest_SendBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSortRequest_SendBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSortRequest_SendBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSortRequest_SendBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSortRequest_SendBodyValidationError) ErrorName() string {
	return "CreateSortRequest_SendBodyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSortRequest_SendBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSortRequest_SendBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSortRequest_SendBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSortRequest_SendBodyValidationError{}
