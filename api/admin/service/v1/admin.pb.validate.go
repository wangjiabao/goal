// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/admin/service/v1/admin.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GamePlayGrantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GamePlayGrantRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GamePlayGrantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GamePlayGrantRequestMultiError, or nil if none found.
func (m *GamePlayGrantRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GamePlayGrantRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSendBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GamePlayGrantRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GamePlayGrantRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSendBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GamePlayGrantRequestValidationError{
				field:  "SendBody",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GamePlayGrantRequestMultiError(errors)
	}

	return nil
}

// GamePlayGrantRequestMultiError is an error wrapping multiple validation
// errors returned by GamePlayGrantRequest.ValidateAll() if the designated
// constraints aren't met.
type GamePlayGrantRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GamePlayGrantRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GamePlayGrantRequestMultiError) AllErrors() []error { return m }

// GamePlayGrantRequestValidationError is the validation error returned by
// GamePlayGrantRequest.Validate if the designated constraints aren't met.
type GamePlayGrantRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GamePlayGrantRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GamePlayGrantRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GamePlayGrantRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GamePlayGrantRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GamePlayGrantRequestValidationError) ErrorName() string {
	return "GamePlayGrantRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GamePlayGrantRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGamePlayGrantRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GamePlayGrantRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GamePlayGrantRequestValidationError{}

// Validate checks the field values on GamePlayGrantReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GamePlayGrantReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GamePlayGrantReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GamePlayGrantReplyMultiError, or nil if none found.
func (m *GamePlayGrantReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GamePlayGrantReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return GamePlayGrantReplyMultiError(errors)
	}

	return nil
}

// GamePlayGrantReplyMultiError is an error wrapping multiple validation errors
// returned by GamePlayGrantReply.ValidateAll() if the designated constraints
// aren't met.
type GamePlayGrantReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GamePlayGrantReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GamePlayGrantReplyMultiError) AllErrors() []error { return m }

// GamePlayGrantReplyValidationError is the validation error returned by
// GamePlayGrantReply.Validate if the designated constraints aren't met.
type GamePlayGrantReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GamePlayGrantReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GamePlayGrantReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GamePlayGrantReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GamePlayGrantReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GamePlayGrantReplyValidationError) ErrorName() string {
	return "GamePlayGrantReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GamePlayGrantReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGamePlayGrantReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GamePlayGrantReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GamePlayGrantReplyValidationError{}

// Validate checks the field values on SortPlayGrantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SortPlayGrantRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SortPlayGrantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SortPlayGrantRequestMultiError, or nil if none found.
func (m *SortPlayGrantRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SortPlayGrantRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSendBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SortPlayGrantRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SortPlayGrantRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSendBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SortPlayGrantRequestValidationError{
				field:  "SendBody",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SortPlayGrantRequestMultiError(errors)
	}

	return nil
}

// SortPlayGrantRequestMultiError is an error wrapping multiple validation
// errors returned by SortPlayGrantRequest.ValidateAll() if the designated
// constraints aren't met.
type SortPlayGrantRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SortPlayGrantRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SortPlayGrantRequestMultiError) AllErrors() []error { return m }

// SortPlayGrantRequestValidationError is the validation error returned by
// SortPlayGrantRequest.Validate if the designated constraints aren't met.
type SortPlayGrantRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SortPlayGrantRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SortPlayGrantRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SortPlayGrantRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SortPlayGrantRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SortPlayGrantRequestValidationError) ErrorName() string {
	return "SortPlayGrantRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SortPlayGrantRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSortPlayGrantRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SortPlayGrantRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SortPlayGrantRequestValidationError{}

// Validate checks the field values on SortPlayGrantReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SortPlayGrantReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SortPlayGrantReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SortPlayGrantReplyMultiError, or nil if none found.
func (m *SortPlayGrantReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SortPlayGrantReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return SortPlayGrantReplyMultiError(errors)
	}

	return nil
}

// SortPlayGrantReplyMultiError is an error wrapping multiple validation errors
// returned by SortPlayGrantReply.ValidateAll() if the designated constraints
// aren't met.
type SortPlayGrantReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SortPlayGrantReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SortPlayGrantReplyMultiError) AllErrors() []error { return m }

// SortPlayGrantReplyValidationError is the validation error returned by
// SortPlayGrantReply.Validate if the designated constraints aren't met.
type SortPlayGrantReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SortPlayGrantReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SortPlayGrantReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SortPlayGrantReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SortPlayGrantReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SortPlayGrantReplyValidationError) ErrorName() string {
	return "SortPlayGrantReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SortPlayGrantReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSortPlayGrantReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SortPlayGrantReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SortPlayGrantReplyValidationError{}

// Validate checks the field values on UpdateConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateConfigRequestMultiError, or nil if none found.
func (m *UpdateConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSendBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateConfigRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateConfigRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSendBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateConfigRequestValidationError{
				field:  "SendBody",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateConfigRequestMultiError(errors)
	}

	return nil
}

// UpdateConfigRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateConfigRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateConfigRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateConfigRequestMultiError) AllErrors() []error { return m }

// UpdateConfigRequestValidationError is the validation error returned by
// UpdateConfigRequest.Validate if the designated constraints aren't met.
type UpdateConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateConfigRequestValidationError) ErrorName() string {
	return "UpdateConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateConfigRequestValidationError{}

// Validate checks the field values on UpdateConfigReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateConfigReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateConfigReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateConfigReplyMultiError, or nil if none found.
func (m *UpdateConfigReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateConfigReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return UpdateConfigReplyMultiError(errors)
	}

	return nil
}

// UpdateConfigReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateConfigReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateConfigReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateConfigReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateConfigReplyMultiError) AllErrors() []error { return m }

// UpdateConfigReplyValidationError is the validation error returned by
// UpdateConfigReply.Validate if the designated constraints aren't met.
type UpdateConfigReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateConfigReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateConfigReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateConfigReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateConfigReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateConfigReplyValidationError) ErrorName() string {
	return "UpdateConfigReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateConfigReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateConfigReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateConfigReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateConfigReplyValidationError{}

// Validate checks the field values on CreateGameRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateGameRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateGameRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateGameRequestMultiError, or nil if none found.
func (m *CreateGameRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateGameRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSendBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateGameRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateGameRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSendBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateGameRequestValidationError{
				field:  "SendBody",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateGameRequestMultiError(errors)
	}

	return nil
}

// CreateGameRequestMultiError is an error wrapping multiple validation errors
// returned by CreateGameRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateGameRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateGameRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateGameRequestMultiError) AllErrors() []error { return m }

// CreateGameRequestValidationError is the validation error returned by
// CreateGameRequest.Validate if the designated constraints aren't met.
type CreateGameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGameRequestValidationError) ErrorName() string {
	return "CreateGameRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateGameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGameRequestValidationError{}

// Validate checks the field values on CreateGameReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateGameReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateGameReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateGameReplyMultiError, or nil if none found.
func (m *CreateGameReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateGameReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GameId

	if len(errors) > 0 {
		return CreateGameReplyMultiError(errors)
	}

	return nil
}

// CreateGameReplyMultiError is an error wrapping multiple validation errors
// returned by CreateGameReply.ValidateAll() if the designated constraints
// aren't met.
type CreateGameReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateGameReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateGameReplyMultiError) AllErrors() []error { return m }

// CreateGameReplyValidationError is the validation error returned by
// CreateGameReply.Validate if the designated constraints aren't met.
type CreateGameReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGameReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGameReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGameReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGameReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGameReplyValidationError) ErrorName() string { return "CreateGameReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateGameReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGameReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGameReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGameReplyValidationError{}

// Validate checks the field values on UpdateGameRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateGameRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateGameRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateGameRequestMultiError, or nil if none found.
func (m *UpdateGameRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateGameRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSendBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateGameRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateGameRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSendBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateGameRequestValidationError{
				field:  "SendBody",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateGameRequestMultiError(errors)
	}

	return nil
}

// UpdateGameRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateGameRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateGameRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateGameRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateGameRequestMultiError) AllErrors() []error { return m }

// UpdateGameRequestValidationError is the validation error returned by
// UpdateGameRequest.Validate if the designated constraints aren't met.
type UpdateGameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGameRequestValidationError) ErrorName() string {
	return "UpdateGameRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGameRequestValidationError{}

// Validate checks the field values on UpdateGameReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateGameReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateGameReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateGameReplyMultiError, or nil if none found.
func (m *UpdateGameReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateGameReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GameId

	if len(errors) > 0 {
		return UpdateGameReplyMultiError(errors)
	}

	return nil
}

// UpdateGameReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateGameReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateGameReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateGameReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateGameReplyMultiError) AllErrors() []error { return m }

// UpdateGameReplyValidationError is the validation error returned by
// UpdateGameReply.Validate if the designated constraints aren't met.
type UpdateGameReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGameReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGameReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGameReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGameReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGameReplyValidationError) ErrorName() string { return "UpdateGameReplyValidationError" }

// Error satisfies the builtin error interface
func (e UpdateGameReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGameReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGameReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGameReplyValidationError{}

// Validate checks the field values on UpdateSortRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateSortRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSortRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSortRequestMultiError, or nil if none found.
func (m *UpdateSortRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSortRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSendBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateSortRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateSortRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSendBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateSortRequestValidationError{
				field:  "SendBody",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateSortRequestMultiError(errors)
	}

	return nil
}

// UpdateSortRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateSortRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateSortRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSortRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSortRequestMultiError) AllErrors() []error { return m }

// UpdateSortRequestValidationError is the validation error returned by
// UpdateSortRequest.Validate if the designated constraints aren't met.
type UpdateSortRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSortRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSortRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSortRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSortRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSortRequestValidationError) ErrorName() string {
	return "UpdateSortRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSortRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSortRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSortRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSortRequestValidationError{}

// Validate checks the field values on UpdateSortReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateSortReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSortReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSortReplyMultiError, or nil if none found.
func (m *UpdateSortReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSortReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SortId

	if len(errors) > 0 {
		return UpdateSortReplyMultiError(errors)
	}

	return nil
}

// UpdateSortReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateSortReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateSortReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSortReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSortReplyMultiError) AllErrors() []error { return m }

// UpdateSortReplyValidationError is the validation error returned by
// UpdateSortReply.Validate if the designated constraints aren't met.
type UpdateSortReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSortReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSortReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSortReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSortReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSortReplyValidationError) ErrorName() string { return "UpdateSortReplyValidationError" }

// Error satisfies the builtin error interface
func (e UpdateSortReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSortReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSortReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSortReplyValidationError{}

// Validate checks the field values on DisplayGameIndexRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DisplayGameIndexRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisplayGameIndexRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DisplayGameIndexRequestMultiError, or nil if none found.
func (m *DisplayGameIndexRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DisplayGameIndexRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DisplayGameIndexRequestMultiError(errors)
	}

	return nil
}

// DisplayGameIndexRequestMultiError is an error wrapping multiple validation
// errors returned by DisplayGameIndexRequest.ValidateAll() if the designated
// constraints aren't met.
type DisplayGameIndexRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisplayGameIndexRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisplayGameIndexRequestMultiError) AllErrors() []error { return m }

// DisplayGameIndexRequestValidationError is the validation error returned by
// DisplayGameIndexRequest.Validate if the designated constraints aren't met.
type DisplayGameIndexRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisplayGameIndexRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisplayGameIndexRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisplayGameIndexRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisplayGameIndexRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisplayGameIndexRequestValidationError) ErrorName() string {
	return "DisplayGameIndexRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DisplayGameIndexRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisplayGameIndexRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisplayGameIndexRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisplayGameIndexRequestValidationError{}

// Validate checks the field values on DisplayGameIndexReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DisplayGameIndexReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisplayGameIndexReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DisplayGameIndexReplyMultiError, or nil if none found.
func (m *DisplayGameIndexReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DisplayGameIndexReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GameId

	if len(errors) > 0 {
		return DisplayGameIndexReplyMultiError(errors)
	}

	return nil
}

// DisplayGameIndexReplyMultiError is an error wrapping multiple validation
// errors returned by DisplayGameIndexReply.ValidateAll() if the designated
// constraints aren't met.
type DisplayGameIndexReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisplayGameIndexReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisplayGameIndexReplyMultiError) AllErrors() []error { return m }

// DisplayGameIndexReplyValidationError is the validation error returned by
// DisplayGameIndexReply.Validate if the designated constraints aren't met.
type DisplayGameIndexReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisplayGameIndexReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisplayGameIndexReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisplayGameIndexReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisplayGameIndexReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisplayGameIndexReplyValidationError) ErrorName() string {
	return "DisplayGameIndexReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DisplayGameIndexReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisplayGameIndexReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisplayGameIndexReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisplayGameIndexReplyValidationError{}

// Validate checks the field values on GetGameRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetGameRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGameRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetGameRequestMultiError,
// or nil if none found.
func (m *GetGameRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGameRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GameId

	if len(errors) > 0 {
		return GetGameRequestMultiError(errors)
	}

	return nil
}

// GetGameRequestMultiError is an error wrapping multiple validation errors
// returned by GetGameRequest.ValidateAll() if the designated constraints
// aren't met.
type GetGameRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGameRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGameRequestMultiError) AllErrors() []error { return m }

// GetGameRequestValidationError is the validation error returned by
// GetGameRequest.Validate if the designated constraints aren't met.
type GetGameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGameRequestValidationError) ErrorName() string { return "GetGameRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetGameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGameRequestValidationError{}

// Validate checks the field values on GetGameReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetGameReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGameReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetGameReplyMultiError, or
// nil if none found.
func (m *GetGameReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGameReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RedTeamId

	// no validation rules for BlueTeamId

	// no validation rules for StartTime

	// no validation rules for EndTime

	// no validation rules for UpEndTime

	// no validation rules for DownStartTime

	// no validation rules for GameId

	// no validation rules for Status

	// no validation rules for RedTeamUpGoal

	// no validation rules for BlueTeamUpGoal

	// no validation rules for RedTeamDownGoal

	// no validation rules for BlueTeamDownGoal

	// no validation rules for WinTeamId

	// no validation rules for Name

	// no validation rules for Result

	if len(errors) > 0 {
		return GetGameReplyMultiError(errors)
	}

	return nil
}

// GetGameReplyMultiError is an error wrapping multiple validation errors
// returned by GetGameReply.ValidateAll() if the designated constraints aren't met.
type GetGameReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGameReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGameReplyMultiError) AllErrors() []error { return m }

// GetGameReplyValidationError is the validation error returned by
// GetGameReply.Validate if the designated constraints aren't met.
type GetGameReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGameReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGameReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGameReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGameReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGameReplyValidationError) ErrorName() string { return "GetGameReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetGameReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGameReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGameReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGameReplyValidationError{}

// Validate checks the field values on GetUserRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUserRequestMultiError,
// or nil if none found.
func (m *GetUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetUserRequestMultiError(errors)
	}

	return nil
}

// GetUserRequestMultiError is an error wrapping multiple validation errors
// returned by GetUserRequest.ValidateAll() if the designated constraints
// aren't met.
type GetUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserRequestMultiError) AllErrors() []error { return m }

// GetUserRequestValidationError is the validation error returned by
// GetUserRequest.Validate if the designated constraints aren't met.
type GetUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserRequestValidationError) ErrorName() string { return "GetUserRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserRequestValidationError{}

// Validate checks the field values on GetUserReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUserReplyMultiError, or
// nil if none found.
func (m *GetUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserBalance

	if len(errors) > 0 {
		return GetUserReplyMultiError(errors)
	}

	return nil
}

// GetUserReplyMultiError is an error wrapping multiple validation errors
// returned by GetUserReply.ValidateAll() if the designated constraints aren't met.
type GetUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserReplyMultiError) AllErrors() []error { return m }

// GetUserReplyValidationError is the validation error returned by
// GetUserReply.Validate if the designated constraints aren't met.
type GetUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserReplyValidationError) ErrorName() string { return "GetUserReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserReplyValidationError{}

// Validate checks the field values on GetUserRecommendListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserRecommendListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserRecommendListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserRecommendListRequestMultiError, or nil if none found.
func (m *GetUserRecommendListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserRecommendListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetUserRecommendListRequestMultiError(errors)
	}

	return nil
}

// GetUserRecommendListRequestMultiError is an error wrapping multiple
// validation errors returned by GetUserRecommendListRequest.ValidateAll() if
// the designated constraints aren't met.
type GetUserRecommendListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserRecommendListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserRecommendListRequestMultiError) AllErrors() []error { return m }

// GetUserRecommendListRequestValidationError is the validation error returned
// by GetUserRecommendListRequest.Validate if the designated constraints
// aren't met.
type GetUserRecommendListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserRecommendListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserRecommendListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserRecommendListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserRecommendListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserRecommendListRequestValidationError) ErrorName() string {
	return "GetUserRecommendListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserRecommendListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserRecommendListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserRecommendListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserRecommendListRequestValidationError{}

// Validate checks the field values on GetUserRecommendListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserRecommendListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserRecommendListReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserRecommendListReplyMultiError, or nil if none found.
func (m *GetUserRecommendListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserRecommendListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserRecommendListReplyValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserRecommendListReplyValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserRecommendListReplyValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetUserRecommendListReplyMultiError(errors)
	}

	return nil
}

// GetUserRecommendListReplyMultiError is an error wrapping multiple validation
// errors returned by GetUserRecommendListReply.ValidateAll() if the
// designated constraints aren't met.
type GetUserRecommendListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserRecommendListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserRecommendListReplyMultiError) AllErrors() []error { return m }

// GetUserRecommendListReplyValidationError is the validation error returned by
// GetUserRecommendListReply.Validate if the designated constraints aren't met.
type GetUserRecommendListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserRecommendListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserRecommendListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserRecommendListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserRecommendListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserRecommendListReplyValidationError) ErrorName() string {
	return "GetUserRecommendListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserRecommendListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserRecommendListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserRecommendListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserRecommendListReplyValidationError{}

// Validate checks the field values on GetGameListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGameListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGameListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGameListRequestMultiError, or nil if none found.
func (m *GetGameListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGameListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetGameListRequestMultiError(errors)
	}

	return nil
}

// GetGameListRequestMultiError is an error wrapping multiple validation errors
// returned by GetGameListRequest.ValidateAll() if the designated constraints
// aren't met.
type GetGameListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGameListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGameListRequestMultiError) AllErrors() []error { return m }

// GetGameListRequestValidationError is the validation error returned by
// GetGameListRequest.Validate if the designated constraints aren't met.
type GetGameListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGameListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGameListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGameListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGameListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGameListRequestValidationError) ErrorName() string {
	return "GetGameListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetGameListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGameListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGameListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGameListRequestValidationError{}

// Validate checks the field values on GetGameListReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetGameListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGameListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGameListReplyMultiError, or nil if none found.
func (m *GetGameListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGameListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetGameListReplyValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetGameListReplyValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetGameListReplyValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetGameListReplyMultiError(errors)
	}

	return nil
}

// GetGameListReplyMultiError is an error wrapping multiple validation errors
// returned by GetGameListReply.ValidateAll() if the designated constraints
// aren't met.
type GetGameListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGameListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGameListReplyMultiError) AllErrors() []error { return m }

// GetGameListReplyValidationError is the validation error returned by
// GetGameListReply.Validate if the designated constraints aren't met.
type GetGameListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGameListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGameListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGameListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGameListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGameListReplyValidationError) ErrorName() string { return "GetGameListReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetGameListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGameListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGameListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGameListReplyValidationError{}

// Validate checks the field values on GetPlayListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPlayListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPlayListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPlayListRequestMultiError, or nil if none found.
func (m *GetPlayListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPlayListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GameId

	if len(errors) > 0 {
		return GetPlayListRequestMultiError(errors)
	}

	return nil
}

// GetPlayListRequestMultiError is an error wrapping multiple validation errors
// returned by GetPlayListRequest.ValidateAll() if the designated constraints
// aren't met.
type GetPlayListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPlayListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPlayListRequestMultiError) AllErrors() []error { return m }

// GetPlayListRequestValidationError is the validation error returned by
// GetPlayListRequest.Validate if the designated constraints aren't met.
type GetPlayListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPlayListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPlayListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPlayListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPlayListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPlayListRequestValidationError) ErrorName() string {
	return "GetPlayListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPlayListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPlayListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPlayListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPlayListRequestValidationError{}

// Validate checks the field values on GetPlayListReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetPlayListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPlayListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPlayListReplyMultiError, or nil if none found.
func (m *GetPlayListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPlayListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPlayListReplyValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPlayListReplyValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPlayListReplyValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetPlayListReplyMultiError(errors)
	}

	return nil
}

// GetPlayListReplyMultiError is an error wrapping multiple validation errors
// returned by GetPlayListReply.ValidateAll() if the designated constraints
// aren't met.
type GetPlayListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPlayListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPlayListReplyMultiError) AllErrors() []error { return m }

// GetPlayListReplyValidationError is the validation error returned by
// GetPlayListReply.Validate if the designated constraints aren't met.
type GetPlayListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPlayListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPlayListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPlayListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPlayListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPlayListReplyValidationError) ErrorName() string { return "GetPlayListReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetPlayListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPlayListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPlayListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPlayListReplyValidationError{}

// Validate checks the field values on GetRoomPlayListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRoomPlayListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRoomPlayListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRoomPlayListRequestMultiError, or nil if none found.
func (m *GetRoomPlayListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRoomPlayListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoomId

	if len(errors) > 0 {
		return GetRoomPlayListRequestMultiError(errors)
	}

	return nil
}

// GetRoomPlayListRequestMultiError is an error wrapping multiple validation
// errors returned by GetRoomPlayListRequest.ValidateAll() if the designated
// constraints aren't met.
type GetRoomPlayListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRoomPlayListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRoomPlayListRequestMultiError) AllErrors() []error { return m }

// GetRoomPlayListRequestValidationError is the validation error returned by
// GetRoomPlayListRequest.Validate if the designated constraints aren't met.
type GetRoomPlayListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRoomPlayListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRoomPlayListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRoomPlayListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRoomPlayListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRoomPlayListRequestValidationError) ErrorName() string {
	return "GetRoomPlayListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetRoomPlayListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRoomPlayListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRoomPlayListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRoomPlayListRequestValidationError{}

// Validate checks the field values on GetRoomPlayListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRoomPlayListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRoomPlayListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRoomPlayListReplyMultiError, or nil if none found.
func (m *GetRoomPlayListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRoomPlayListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetRoomPlayListReplyValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetRoomPlayListReplyValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetRoomPlayListReplyValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetRoomPlayListReplyMultiError(errors)
	}

	return nil
}

// GetRoomPlayListReplyMultiError is an error wrapping multiple validation
// errors returned by GetRoomPlayListReply.ValidateAll() if the designated
// constraints aren't met.
type GetRoomPlayListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRoomPlayListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRoomPlayListReplyMultiError) AllErrors() []error { return m }

// GetRoomPlayListReplyValidationError is the validation error returned by
// GetRoomPlayListReply.Validate if the designated constraints aren't met.
type GetRoomPlayListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRoomPlayListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRoomPlayListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRoomPlayListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRoomPlayListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRoomPlayListReplyValidationError) ErrorName() string {
	return "GetRoomPlayListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetRoomPlayListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRoomPlayListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRoomPlayListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRoomPlayListReplyValidationError{}

// Validate checks the field values on GetPlayRelListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPlayRelListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPlayRelListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPlayRelListRequestMultiError, or nil if none found.
func (m *GetPlayRelListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPlayRelListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PlayId

	if len(errors) > 0 {
		return GetPlayRelListRequestMultiError(errors)
	}

	return nil
}

// GetPlayRelListRequestMultiError is an error wrapping multiple validation
// errors returned by GetPlayRelListRequest.ValidateAll() if the designated
// constraints aren't met.
type GetPlayRelListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPlayRelListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPlayRelListRequestMultiError) AllErrors() []error { return m }

// GetPlayRelListRequestValidationError is the validation error returned by
// GetPlayRelListRequest.Validate if the designated constraints aren't met.
type GetPlayRelListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPlayRelListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPlayRelListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPlayRelListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPlayRelListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPlayRelListRequestValidationError) ErrorName() string {
	return "GetPlayRelListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPlayRelListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPlayRelListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPlayRelListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPlayRelListRequestValidationError{}

// Validate checks the field values on GetPlayRelListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPlayRelListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPlayRelListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPlayRelListReplyMultiError, or nil if none found.
func (m *GetPlayRelListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPlayRelListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPlayRelListReplyValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPlayRelListReplyValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPlayRelListReplyValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetPlayRelListReplyMultiError(errors)
	}

	return nil
}

// GetPlayRelListReplyMultiError is an error wrapping multiple validation
// errors returned by GetPlayRelListReply.ValidateAll() if the designated
// constraints aren't met.
type GetPlayRelListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPlayRelListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPlayRelListReplyMultiError) AllErrors() []error { return m }

// GetPlayRelListReplyValidationError is the validation error returned by
// GetPlayRelListReply.Validate if the designated constraints aren't met.
type GetPlayRelListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPlayRelListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPlayRelListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPlayRelListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPlayRelListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPlayRelListReplyValidationError) ErrorName() string {
	return "GetPlayRelListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetPlayRelListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPlayRelListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPlayRelListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPlayRelListReplyValidationError{}

// Validate checks the field values on GetRoomListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRoomListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRoomListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRoomListRequestMultiError, or nil if none found.
func (m *GetRoomListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRoomListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetRoomListRequestMultiError(errors)
	}

	return nil
}

// GetRoomListRequestMultiError is an error wrapping multiple validation errors
// returned by GetRoomListRequest.ValidateAll() if the designated constraints
// aren't met.
type GetRoomListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRoomListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRoomListRequestMultiError) AllErrors() []error { return m }

// GetRoomListRequestValidationError is the validation error returned by
// GetRoomListRequest.Validate if the designated constraints aren't met.
type GetRoomListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRoomListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRoomListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRoomListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRoomListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRoomListRequestValidationError) ErrorName() string {
	return "GetRoomListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetRoomListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRoomListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRoomListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRoomListRequestValidationError{}

// Validate checks the field values on GetRoomListReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetRoomListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRoomListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRoomListReplyMultiError, or nil if none found.
func (m *GetRoomListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRoomListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetRoomListReplyValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetRoomListReplyValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetRoomListReplyValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetRoomListReplyMultiError(errors)
	}

	return nil
}

// GetRoomListReplyMultiError is an error wrapping multiple validation errors
// returned by GetRoomListReply.ValidateAll() if the designated constraints
// aren't met.
type GetRoomListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRoomListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRoomListReplyMultiError) AllErrors() []error { return m }

// GetRoomListReplyValidationError is the validation error returned by
// GetRoomListReply.Validate if the designated constraints aren't met.
type GetRoomListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRoomListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRoomListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRoomListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRoomListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRoomListReplyValidationError) ErrorName() string { return "GetRoomListReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetRoomListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRoomListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRoomListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRoomListReplyValidationError{}

// Validate checks the field values on GetConfigListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetConfigListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConfigListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConfigListRequestMultiError, or nil if none found.
func (m *GetConfigListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConfigListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetConfigListRequestMultiError(errors)
	}

	return nil
}

// GetConfigListRequestMultiError is an error wrapping multiple validation
// errors returned by GetConfigListRequest.ValidateAll() if the designated
// constraints aren't met.
type GetConfigListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConfigListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConfigListRequestMultiError) AllErrors() []error { return m }

// GetConfigListRequestValidationError is the validation error returned by
// GetConfigListRequest.Validate if the designated constraints aren't met.
type GetConfigListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConfigListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConfigListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConfigListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConfigListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConfigListRequestValidationError) ErrorName() string {
	return "GetConfigListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetConfigListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConfigListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConfigListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConfigListRequestValidationError{}

// Validate checks the field values on GetConfigListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetConfigListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConfigListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConfigListReplyMultiError, or nil if none found.
func (m *GetConfigListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConfigListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetConfigListReplyValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetConfigListReplyValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetConfigListReplyValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetConfigListReplyMultiError(errors)
	}

	return nil
}

// GetConfigListReplyMultiError is an error wrapping multiple validation errors
// returned by GetConfigListReply.ValidateAll() if the designated constraints
// aren't met.
type GetConfigListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConfigListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConfigListReplyMultiError) AllErrors() []error { return m }

// GetConfigListReplyValidationError is the validation error returned by
// GetConfigListReply.Validate if the designated constraints aren't met.
type GetConfigListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConfigListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConfigListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConfigListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConfigListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConfigListReplyValidationError) ErrorName() string {
	return "GetConfigListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetConfigListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConfigListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConfigListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConfigListReplyValidationError{}

// Validate checks the field values on GetUserListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserListRequestMultiError, or nil if none found.
func (m *GetUserListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetUserListRequestMultiError(errors)
	}

	return nil
}

// GetUserListRequestMultiError is an error wrapping multiple validation errors
// returned by GetUserListRequest.ValidateAll() if the designated constraints
// aren't met.
type GetUserListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserListRequestMultiError) AllErrors() []error { return m }

// GetUserListRequestValidationError is the validation error returned by
// GetUserListRequest.Validate if the designated constraints aren't met.
type GetUserListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserListRequestValidationError) ErrorName() string {
	return "GetUserListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserListRequestValidationError{}

// Validate checks the field values on GetUserListReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUserListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserListReplyMultiError, or nil if none found.
func (m *GetUserListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserListReplyValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserListReplyValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserListReplyValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetUserListReplyMultiError(errors)
	}

	return nil
}

// GetUserListReplyMultiError is an error wrapping multiple validation errors
// returned by GetUserListReply.ValidateAll() if the designated constraints
// aren't met.
type GetUserListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserListReplyMultiError) AllErrors() []error { return m }

// GetUserListReplyValidationError is the validation error returned by
// GetUserListReply.Validate if the designated constraints aren't met.
type GetUserListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserListReplyValidationError) ErrorName() string { return "GetUserListReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetUserListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserListReplyValidationError{}

// Validate checks the field values on GetUserProxyListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserProxyListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserProxyListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserProxyListRequestMultiError, or nil if none found.
func (m *GetUserProxyListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserProxyListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetUserProxyListRequestMultiError(errors)
	}

	return nil
}

// GetUserProxyListRequestMultiError is an error wrapping multiple validation
// errors returned by GetUserProxyListRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserProxyListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserProxyListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserProxyListRequestMultiError) AllErrors() []error { return m }

// GetUserProxyListRequestValidationError is the validation error returned by
// GetUserProxyListRequest.Validate if the designated constraints aren't met.
type GetUserProxyListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserProxyListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserProxyListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserProxyListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserProxyListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserProxyListRequestValidationError) ErrorName() string {
	return "GetUserProxyListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserProxyListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserProxyListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserProxyListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserProxyListRequestValidationError{}

// Validate checks the field values on GetUserProxyListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserProxyListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserProxyListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserProxyListReplyMultiError, or nil if none found.
func (m *GetUserProxyListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserProxyListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserProxyListReplyValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserProxyListReplyValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserProxyListReplyValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetUserProxyListReplyMultiError(errors)
	}

	return nil
}

// GetUserProxyListReplyMultiError is an error wrapping multiple validation
// errors returned by GetUserProxyListReply.ValidateAll() if the designated
// constraints aren't met.
type GetUserProxyListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserProxyListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserProxyListReplyMultiError) AllErrors() []error { return m }

// GetUserProxyListReplyValidationError is the validation error returned by
// GetUserProxyListReply.Validate if the designated constraints aren't met.
type GetUserProxyListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserProxyListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserProxyListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserProxyListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserProxyListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserProxyListReplyValidationError) ErrorName() string {
	return "GetUserProxyListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserProxyListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserProxyListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserProxyListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserProxyListReplyValidationError{}

// Validate checks the field values on GetUserBalanceRecordRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserBalanceRecordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserBalanceRecordRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserBalanceRecordRequestMultiError, or nil if none found.
func (m *GetUserBalanceRecordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserBalanceRecordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetUserBalanceRecordRequestMultiError(errors)
	}

	return nil
}

// GetUserBalanceRecordRequestMultiError is an error wrapping multiple
// validation errors returned by GetUserBalanceRecordRequest.ValidateAll() if
// the designated constraints aren't met.
type GetUserBalanceRecordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserBalanceRecordRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserBalanceRecordRequestMultiError) AllErrors() []error { return m }

// GetUserBalanceRecordRequestValidationError is the validation error returned
// by GetUserBalanceRecordRequest.Validate if the designated constraints
// aren't met.
type GetUserBalanceRecordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserBalanceRecordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserBalanceRecordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserBalanceRecordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserBalanceRecordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserBalanceRecordRequestValidationError) ErrorName() string {
	return "GetUserBalanceRecordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserBalanceRecordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserBalanceRecordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserBalanceRecordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserBalanceRecordRequestValidationError{}

// Validate checks the field values on GetUserBalanceRecordReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserBalanceRecordReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserBalanceRecordReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserBalanceRecordReplyMultiError, or nil if none found.
func (m *GetUserBalanceRecordReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserBalanceRecordReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserBalanceRecordReplyValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserBalanceRecordReplyValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserBalanceRecordReplyValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetUserBalanceRecordReplyMultiError(errors)
	}

	return nil
}

// GetUserBalanceRecordReplyMultiError is an error wrapping multiple validation
// errors returned by GetUserBalanceRecordReply.ValidateAll() if the
// designated constraints aren't met.
type GetUserBalanceRecordReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserBalanceRecordReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserBalanceRecordReplyMultiError) AllErrors() []error { return m }

// GetUserBalanceRecordReplyValidationError is the validation error returned by
// GetUserBalanceRecordReply.Validate if the designated constraints aren't met.
type GetUserBalanceRecordReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserBalanceRecordReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserBalanceRecordReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserBalanceRecordReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserBalanceRecordReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserBalanceRecordReplyValidationError) ErrorName() string {
	return "GetUserBalanceRecordReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserBalanceRecordReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserBalanceRecordReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserBalanceRecordReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserBalanceRecordReplyValidationError{}

// Validate checks the field values on CreatePlayGameScoreRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePlayGameScoreRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePlayGameScoreRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePlayGameScoreRequestMultiError, or nil if none found.
func (m *CreatePlayGameScoreRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePlayGameScoreRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSendBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePlayGameScoreRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePlayGameScoreRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSendBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePlayGameScoreRequestValidationError{
				field:  "SendBody",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePlayGameScoreRequestMultiError(errors)
	}

	return nil
}

// CreatePlayGameScoreRequestMultiError is an error wrapping multiple
// validation errors returned by CreatePlayGameScoreRequest.ValidateAll() if
// the designated constraints aren't met.
type CreatePlayGameScoreRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePlayGameScoreRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePlayGameScoreRequestMultiError) AllErrors() []error { return m }

// CreatePlayGameScoreRequestValidationError is the validation error returned
// by CreatePlayGameScoreRequest.Validate if the designated constraints aren't met.
type CreatePlayGameScoreRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePlayGameScoreRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePlayGameScoreRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePlayGameScoreRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePlayGameScoreRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePlayGameScoreRequestValidationError) ErrorName() string {
	return "CreatePlayGameScoreRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePlayGameScoreRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePlayGameScoreRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePlayGameScoreRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePlayGameScoreRequestValidationError{}

// Validate checks the field values on CreatePlayGameScoreReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePlayGameScoreReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePlayGameScoreReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePlayGameScoreReplyMultiError, or nil if none found.
func (m *CreatePlayGameScoreReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePlayGameScoreReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PlayId

	if len(errors) > 0 {
		return CreatePlayGameScoreReplyMultiError(errors)
	}

	return nil
}

// CreatePlayGameScoreReplyMultiError is an error wrapping multiple validation
// errors returned by CreatePlayGameScoreReply.ValidateAll() if the designated
// constraints aren't met.
type CreatePlayGameScoreReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePlayGameScoreReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePlayGameScoreReplyMultiError) AllErrors() []error { return m }

// CreatePlayGameScoreReplyValidationError is the validation error returned by
// CreatePlayGameScoreReply.Validate if the designated constraints aren't met.
type CreatePlayGameScoreReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePlayGameScoreReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePlayGameScoreReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePlayGameScoreReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePlayGameScoreReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePlayGameScoreReplyValidationError) ErrorName() string {
	return "CreatePlayGameScoreReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePlayGameScoreReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePlayGameScoreReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePlayGameScoreReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePlayGameScoreReplyValidationError{}

// Validate checks the field values on CreatePlayGameResultRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePlayGameResultRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePlayGameResultRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePlayGameResultRequestMultiError, or nil if none found.
func (m *CreatePlayGameResultRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePlayGameResultRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSendBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePlayGameResultRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePlayGameResultRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSendBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePlayGameResultRequestValidationError{
				field:  "SendBody",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePlayGameResultRequestMultiError(errors)
	}

	return nil
}

// CreatePlayGameResultRequestMultiError is an error wrapping multiple
// validation errors returned by CreatePlayGameResultRequest.ValidateAll() if
// the designated constraints aren't met.
type CreatePlayGameResultRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePlayGameResultRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePlayGameResultRequestMultiError) AllErrors() []error { return m }

// CreatePlayGameResultRequestValidationError is the validation error returned
// by CreatePlayGameResultRequest.Validate if the designated constraints
// aren't met.
type CreatePlayGameResultRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePlayGameResultRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePlayGameResultRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePlayGameResultRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePlayGameResultRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePlayGameResultRequestValidationError) ErrorName() string {
	return "CreatePlayGameResultRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePlayGameResultRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePlayGameResultRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePlayGameResultRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePlayGameResultRequestValidationError{}

// Validate checks the field values on CreatePlayGameResultReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePlayGameResultReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePlayGameResultReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePlayGameResultReplyMultiError, or nil if none found.
func (m *CreatePlayGameResultReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePlayGameResultReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PlayId

	if len(errors) > 0 {
		return CreatePlayGameResultReplyMultiError(errors)
	}

	return nil
}

// CreatePlayGameResultReplyMultiError is an error wrapping multiple validation
// errors returned by CreatePlayGameResultReply.ValidateAll() if the
// designated constraints aren't met.
type CreatePlayGameResultReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePlayGameResultReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePlayGameResultReplyMultiError) AllErrors() []error { return m }

// CreatePlayGameResultReplyValidationError is the validation error returned by
// CreatePlayGameResultReply.Validate if the designated constraints aren't met.
type CreatePlayGameResultReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePlayGameResultReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePlayGameResultReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePlayGameResultReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePlayGameResultReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePlayGameResultReplyValidationError) ErrorName() string {
	return "CreatePlayGameResultReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePlayGameResultReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePlayGameResultReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePlayGameResultReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePlayGameResultReplyValidationError{}

// Validate checks the field values on CreatePlayGameSortRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePlayGameSortRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePlayGameSortRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePlayGameSortRequestMultiError, or nil if none found.
func (m *CreatePlayGameSortRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePlayGameSortRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSendBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePlayGameSortRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePlayGameSortRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSendBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePlayGameSortRequestValidationError{
				field:  "SendBody",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePlayGameSortRequestMultiError(errors)
	}

	return nil
}

// CreatePlayGameSortRequestMultiError is an error wrapping multiple validation
// errors returned by CreatePlayGameSortRequest.ValidateAll() if the
// designated constraints aren't met.
type CreatePlayGameSortRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePlayGameSortRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePlayGameSortRequestMultiError) AllErrors() []error { return m }

// CreatePlayGameSortRequestValidationError is the validation error returned by
// CreatePlayGameSortRequest.Validate if the designated constraints aren't met.
type CreatePlayGameSortRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePlayGameSortRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePlayGameSortRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePlayGameSortRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePlayGameSortRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePlayGameSortRequestValidationError) ErrorName() string {
	return "CreatePlayGameSortRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePlayGameSortRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePlayGameSortRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePlayGameSortRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePlayGameSortRequestValidationError{}

// Validate checks the field values on CreatePlayGameSortReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePlayGameSortReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePlayGameSortReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePlayGameSortReplyMultiError, or nil if none found.
func (m *CreatePlayGameSortReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePlayGameSortReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PlayId

	if len(errors) > 0 {
		return CreatePlayGameSortReplyMultiError(errors)
	}

	return nil
}

// CreatePlayGameSortReplyMultiError is an error wrapping multiple validation
// errors returned by CreatePlayGameSortReply.ValidateAll() if the designated
// constraints aren't met.
type CreatePlayGameSortReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePlayGameSortReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePlayGameSortReplyMultiError) AllErrors() []error { return m }

// CreatePlayGameSortReplyValidationError is the validation error returned by
// CreatePlayGameSortReply.Validate if the designated constraints aren't met.
type CreatePlayGameSortReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePlayGameSortReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePlayGameSortReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePlayGameSortReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePlayGameSortReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePlayGameSortReplyValidationError) ErrorName() string {
	return "CreatePlayGameSortReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePlayGameSortReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePlayGameSortReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePlayGameSortReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePlayGameSortReplyValidationError{}

// Validate checks the field values on CreatePlayGameGoalRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePlayGameGoalRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePlayGameGoalRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePlayGameGoalRequestMultiError, or nil if none found.
func (m *CreatePlayGameGoalRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePlayGameGoalRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSendBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePlayGameGoalRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePlayGameGoalRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSendBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePlayGameGoalRequestValidationError{
				field:  "SendBody",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePlayGameGoalRequestMultiError(errors)
	}

	return nil
}

// CreatePlayGameGoalRequestMultiError is an error wrapping multiple validation
// errors returned by CreatePlayGameGoalRequest.ValidateAll() if the
// designated constraints aren't met.
type CreatePlayGameGoalRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePlayGameGoalRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePlayGameGoalRequestMultiError) AllErrors() []error { return m }

// CreatePlayGameGoalRequestValidationError is the validation error returned by
// CreatePlayGameGoalRequest.Validate if the designated constraints aren't met.
type CreatePlayGameGoalRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePlayGameGoalRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePlayGameGoalRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePlayGameGoalRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePlayGameGoalRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePlayGameGoalRequestValidationError) ErrorName() string {
	return "CreatePlayGameGoalRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePlayGameGoalRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePlayGameGoalRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePlayGameGoalRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePlayGameGoalRequestValidationError{}

// Validate checks the field values on CreatePlayGameGoalReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePlayGameGoalReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePlayGameGoalReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePlayGameGoalReplyMultiError, or nil if none found.
func (m *CreatePlayGameGoalReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePlayGameGoalReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PlayId

	if len(errors) > 0 {
		return CreatePlayGameGoalReplyMultiError(errors)
	}

	return nil
}

// CreatePlayGameGoalReplyMultiError is an error wrapping multiple validation
// errors returned by CreatePlayGameGoalReply.ValidateAll() if the designated
// constraints aren't met.
type CreatePlayGameGoalReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePlayGameGoalReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePlayGameGoalReplyMultiError) AllErrors() []error { return m }

// CreatePlayGameGoalReplyValidationError is the validation error returned by
// CreatePlayGameGoalReply.Validate if the designated constraints aren't met.
type CreatePlayGameGoalReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePlayGameGoalReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePlayGameGoalReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePlayGameGoalReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePlayGameGoalReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePlayGameGoalReplyValidationError) ErrorName() string {
	return "CreatePlayGameGoalReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePlayGameGoalReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePlayGameGoalReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePlayGameGoalReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePlayGameGoalReplyValidationError{}

// Validate checks the field values on GetGameSortListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGameSortListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGameSortListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGameSortListRequestMultiError, or nil if none found.
func (m *GetGameSortListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGameSortListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetGameSortListRequestMultiError(errors)
	}

	return nil
}

// GetGameSortListRequestMultiError is an error wrapping multiple validation
// errors returned by GetGameSortListRequest.ValidateAll() if the designated
// constraints aren't met.
type GetGameSortListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGameSortListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGameSortListRequestMultiError) AllErrors() []error { return m }

// GetGameSortListRequestValidationError is the validation error returned by
// GetGameSortListRequest.Validate if the designated constraints aren't met.
type GetGameSortListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGameSortListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGameSortListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGameSortListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGameSortListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGameSortListRequestValidationError) ErrorName() string {
	return "GetGameSortListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetGameSortListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGameSortListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGameSortListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGameSortListRequestValidationError{}

// Validate checks the field values on GetGameSortListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGameSortListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGameSortListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGameSortListReplyMultiError, or nil if none found.
func (m *GetGameSortListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGameSortListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSorts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetGameSortListReplyValidationError{
						field:  fmt.Sprintf("Sorts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetGameSortListReplyValidationError{
						field:  fmt.Sprintf("Sorts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetGameSortListReplyValidationError{
					field:  fmt.Sprintf("Sorts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetGameSortListReplyMultiError(errors)
	}

	return nil
}

// GetGameSortListReplyMultiError is an error wrapping multiple validation
// errors returned by GetGameSortListReply.ValidateAll() if the designated
// constraints aren't met.
type GetGameSortListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGameSortListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGameSortListReplyMultiError) AllErrors() []error { return m }

// GetGameSortListReplyValidationError is the validation error returned by
// GetGameSortListReply.Validate if the designated constraints aren't met.
type GetGameSortListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGameSortListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGameSortListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGameSortListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGameSortListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGameSortListReplyValidationError) ErrorName() string {
	return "GetGameSortListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetGameSortListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGameSortListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGameSortListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGameSortListReplyValidationError{}

// Validate checks the field values on SaveDisplayGameIndexRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SaveDisplayGameIndexRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SaveDisplayGameIndexRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SaveDisplayGameIndexRequestMultiError, or nil if none found.
func (m *SaveDisplayGameIndexRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SaveDisplayGameIndexRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSendBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SaveDisplayGameIndexRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SaveDisplayGameIndexRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSendBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SaveDisplayGameIndexRequestValidationError{
				field:  "SendBody",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SaveDisplayGameIndexRequestMultiError(errors)
	}

	return nil
}

// SaveDisplayGameIndexRequestMultiError is an error wrapping multiple
// validation errors returned by SaveDisplayGameIndexRequest.ValidateAll() if
// the designated constraints aren't met.
type SaveDisplayGameIndexRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SaveDisplayGameIndexRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SaveDisplayGameIndexRequestMultiError) AllErrors() []error { return m }

// SaveDisplayGameIndexRequestValidationError is the validation error returned
// by SaveDisplayGameIndexRequest.Validate if the designated constraints
// aren't met.
type SaveDisplayGameIndexRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaveDisplayGameIndexRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaveDisplayGameIndexRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaveDisplayGameIndexRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaveDisplayGameIndexRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaveDisplayGameIndexRequestValidationError) ErrorName() string {
	return "SaveDisplayGameIndexRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SaveDisplayGameIndexRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaveDisplayGameIndexRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaveDisplayGameIndexRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaveDisplayGameIndexRequestValidationError{}

// Validate checks the field values on SaveDisplayGameIndexReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SaveDisplayGameIndexReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SaveDisplayGameIndexReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SaveDisplayGameIndexReplyMultiError, or nil if none found.
func (m *SaveDisplayGameIndexReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SaveDisplayGameIndexReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GameId

	if len(errors) > 0 {
		return SaveDisplayGameIndexReplyMultiError(errors)
	}

	return nil
}

// SaveDisplayGameIndexReplyMultiError is an error wrapping multiple validation
// errors returned by SaveDisplayGameIndexReply.ValidateAll() if the
// designated constraints aren't met.
type SaveDisplayGameIndexReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SaveDisplayGameIndexReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SaveDisplayGameIndexReplyMultiError) AllErrors() []error { return m }

// SaveDisplayGameIndexReplyValidationError is the validation error returned by
// SaveDisplayGameIndexReply.Validate if the designated constraints aren't met.
type SaveDisplayGameIndexReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaveDisplayGameIndexReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaveDisplayGameIndexReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaveDisplayGameIndexReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaveDisplayGameIndexReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaveDisplayGameIndexReplyValidationError) ErrorName() string {
	return "SaveDisplayGameIndexReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SaveDisplayGameIndexReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaveDisplayGameIndexReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaveDisplayGameIndexReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaveDisplayGameIndexReplyValidationError{}

// Validate checks the field values on CreatePlayGameRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePlayGameRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePlayGameRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePlayGameRequestMultiError, or nil if none found.
func (m *CreatePlayGameRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePlayGameRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSendBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePlayGameRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePlayGameRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSendBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePlayGameRequestValidationError{
				field:  "SendBody",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePlayGameRequestMultiError(errors)
	}

	return nil
}

// CreatePlayGameRequestMultiError is an error wrapping multiple validation
// errors returned by CreatePlayGameRequest.ValidateAll() if the designated
// constraints aren't met.
type CreatePlayGameRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePlayGameRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePlayGameRequestMultiError) AllErrors() []error { return m }

// CreatePlayGameRequestValidationError is the validation error returned by
// CreatePlayGameRequest.Validate if the designated constraints aren't met.
type CreatePlayGameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePlayGameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePlayGameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePlayGameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePlayGameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePlayGameRequestValidationError) ErrorName() string {
	return "CreatePlayGameRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePlayGameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePlayGameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePlayGameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePlayGameRequestValidationError{}

// Validate checks the field values on CreatePlayGameReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePlayGameReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePlayGameReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePlayGameReplyMultiError, or nil if none found.
func (m *CreatePlayGameReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePlayGameReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PlayId

	if len(errors) > 0 {
		return CreatePlayGameReplyMultiError(errors)
	}

	return nil
}

// CreatePlayGameReplyMultiError is an error wrapping multiple validation
// errors returned by CreatePlayGameReply.ValidateAll() if the designated
// constraints aren't met.
type CreatePlayGameReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePlayGameReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePlayGameReplyMultiError) AllErrors() []error { return m }

// CreatePlayGameReplyValidationError is the validation error returned by
// CreatePlayGameReply.Validate if the designated constraints aren't met.
type CreatePlayGameReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePlayGameReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePlayGameReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePlayGameReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePlayGameReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePlayGameReplyValidationError) ErrorName() string {
	return "CreatePlayGameReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePlayGameReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePlayGameReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePlayGameReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePlayGameReplyValidationError{}

// Validate checks the field values on CreatePlaySortRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePlaySortRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePlaySortRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePlaySortRequestMultiError, or nil if none found.
func (m *CreatePlaySortRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePlaySortRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSendBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePlaySortRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePlaySortRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSendBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePlaySortRequestValidationError{
				field:  "SendBody",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePlaySortRequestMultiError(errors)
	}

	return nil
}

// CreatePlaySortRequestMultiError is an error wrapping multiple validation
// errors returned by CreatePlaySortRequest.ValidateAll() if the designated
// constraints aren't met.
type CreatePlaySortRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePlaySortRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePlaySortRequestMultiError) AllErrors() []error { return m }

// CreatePlaySortRequestValidationError is the validation error returned by
// CreatePlaySortRequest.Validate if the designated constraints aren't met.
type CreatePlaySortRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePlaySortRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePlaySortRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePlaySortRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePlaySortRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePlaySortRequestValidationError) ErrorName() string {
	return "CreatePlaySortRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePlaySortRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePlaySortRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePlaySortRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePlaySortRequestValidationError{}

// Validate checks the field values on CreatePlaySortReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePlaySortReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePlaySortReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePlaySortReplyMultiError, or nil if none found.
func (m *CreatePlaySortReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePlaySortReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PlayId

	if len(errors) > 0 {
		return CreatePlaySortReplyMultiError(errors)
	}

	return nil
}

// CreatePlaySortReplyMultiError is an error wrapping multiple validation
// errors returned by CreatePlaySortReply.ValidateAll() if the designated
// constraints aren't met.
type CreatePlaySortReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePlaySortReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePlaySortReplyMultiError) AllErrors() []error { return m }

// CreatePlaySortReplyValidationError is the validation error returned by
// CreatePlaySortReply.Validate if the designated constraints aren't met.
type CreatePlaySortReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePlaySortReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePlaySortReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePlaySortReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePlaySortReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePlaySortReplyValidationError) ErrorName() string {
	return "CreatePlaySortReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePlaySortReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePlaySortReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePlaySortReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePlaySortReplyValidationError{}

// Validate checks the field values on CreateSortRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateSortRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSortRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSortRequestMultiError, or nil if none found.
func (m *CreateSortRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSortRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSendBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateSortRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateSortRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSendBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateSortRequestValidationError{
				field:  "SendBody",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateSortRequestMultiError(errors)
	}

	return nil
}

// CreateSortRequestMultiError is an error wrapping multiple validation errors
// returned by CreateSortRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateSortRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSortRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSortRequestMultiError) AllErrors() []error { return m }

// CreateSortRequestValidationError is the validation error returned by
// CreateSortRequest.Validate if the designated constraints aren't met.
type CreateSortRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSortRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSortRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSortRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSortRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSortRequestValidationError) ErrorName() string {
	return "CreateSortRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSortRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSortRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSortRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSortRequestValidationError{}

// Validate checks the field values on CreateSortReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateSortReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSortReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSortReplyMultiError, or nil if none found.
func (m *CreateSortReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSortReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SortId

	if len(errors) > 0 {
		return CreateSortReplyMultiError(errors)
	}

	return nil
}

// CreateSortReplyMultiError is an error wrapping multiple validation errors
// returned by CreateSortReply.ValidateAll() if the designated constraints
// aren't met.
type CreateSortReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSortReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSortReplyMultiError) AllErrors() []error { return m }

// CreateSortReplyValidationError is the validation error returned by
// CreateSortReply.Validate if the designated constraints aren't met.
type CreateSortReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSortReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSortReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSortReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSortReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSortReplyValidationError) ErrorName() string { return "CreateSortReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateSortReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSortReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSortReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSortReplyValidationError{}

// Validate checks the field values on GetTeamListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTeamListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTeamListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTeamListRequestMultiError, or nil if none found.
func (m *GetTeamListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTeamListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetTeamListRequestMultiError(errors)
	}

	return nil
}

// GetTeamListRequestMultiError is an error wrapping multiple validation errors
// returned by GetTeamListRequest.ValidateAll() if the designated constraints
// aren't met.
type GetTeamListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTeamListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTeamListRequestMultiError) AllErrors() []error { return m }

// GetTeamListRequestValidationError is the validation error returned by
// GetTeamListRequest.Validate if the designated constraints aren't met.
type GetTeamListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTeamListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTeamListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTeamListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTeamListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTeamListRequestValidationError) ErrorName() string {
	return "GetTeamListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTeamListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTeamListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTeamListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTeamListRequestValidationError{}

// Validate checks the field values on GetTeamListReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetTeamListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTeamListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTeamListReplyMultiError, or nil if none found.
func (m *GetTeamListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTeamListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTeams() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTeamListReplyValidationError{
						field:  fmt.Sprintf("Teams[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTeamListReplyValidationError{
						field:  fmt.Sprintf("Teams[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTeamListReplyValidationError{
					field:  fmt.Sprintf("Teams[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetTeamListReplyMultiError(errors)
	}

	return nil
}

// GetTeamListReplyMultiError is an error wrapping multiple validation errors
// returned by GetTeamListReply.ValidateAll() if the designated constraints
// aren't met.
type GetTeamListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTeamListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTeamListReplyMultiError) AllErrors() []error { return m }

// GetTeamListReplyValidationError is the validation error returned by
// GetTeamListReply.Validate if the designated constraints aren't met.
type GetTeamListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTeamListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTeamListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTeamListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTeamListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTeamListReplyValidationError) ErrorName() string { return "GetTeamListReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetTeamListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTeamListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTeamListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTeamListReplyValidationError{}

// Validate checks the field values on CreateTeamRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateTeamRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTeamRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTeamRequestMultiError, or nil if none found.
func (m *CreateTeamRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTeamRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSendBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTeamRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTeamRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSendBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTeamRequestValidationError{
				field:  "SendBody",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateTeamRequestMultiError(errors)
	}

	return nil
}

// CreateTeamRequestMultiError is an error wrapping multiple validation errors
// returned by CreateTeamRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateTeamRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTeamRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTeamRequestMultiError) AllErrors() []error { return m }

// CreateTeamRequestValidationError is the validation error returned by
// CreateTeamRequest.Validate if the designated constraints aren't met.
type CreateTeamRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTeamRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTeamRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTeamRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTeamRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTeamRequestValidationError) ErrorName() string {
	return "CreateTeamRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTeamRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTeamRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTeamRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTeamRequestValidationError{}

// Validate checks the field values on CreateTeamReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateTeamReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTeamReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTeamReplyMultiError, or nil if none found.
func (m *CreateTeamReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTeamReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TeamId

	if len(errors) > 0 {
		return CreateTeamReplyMultiError(errors)
	}

	return nil
}

// CreateTeamReplyMultiError is an error wrapping multiple validation errors
// returned by CreateTeamReply.ValidateAll() if the designated constraints
// aren't met.
type CreateTeamReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTeamReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTeamReplyMultiError) AllErrors() []error { return m }

// CreateTeamReplyValidationError is the validation error returned by
// CreateTeamReply.Validate if the designated constraints aren't met.
type CreateTeamReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTeamReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTeamReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTeamReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTeamReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTeamReplyValidationError) ErrorName() string { return "CreateTeamReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateTeamReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTeamReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTeamReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTeamReplyValidationError{}

// Validate checks the field values on GameIndexStatisticsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GameIndexStatisticsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GameIndexStatisticsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GameIndexStatisticsRequestMultiError, or nil if none found.
func (m *GameIndexStatisticsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GameIndexStatisticsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GameIndexStatisticsRequestMultiError(errors)
	}

	return nil
}

// GameIndexStatisticsRequestMultiError is an error wrapping multiple
// validation errors returned by GameIndexStatisticsRequest.ValidateAll() if
// the designated constraints aren't met.
type GameIndexStatisticsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GameIndexStatisticsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GameIndexStatisticsRequestMultiError) AllErrors() []error { return m }

// GameIndexStatisticsRequestValidationError is the validation error returned
// by GameIndexStatisticsRequest.Validate if the designated constraints aren't met.
type GameIndexStatisticsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GameIndexStatisticsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GameIndexStatisticsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GameIndexStatisticsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GameIndexStatisticsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GameIndexStatisticsRequestValidationError) ErrorName() string {
	return "GameIndexStatisticsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GameIndexStatisticsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGameIndexStatisticsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GameIndexStatisticsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GameIndexStatisticsRequestValidationError{}

// Validate checks the field values on GameIndexStatisticsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GameIndexStatisticsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GameIndexStatisticsReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GameIndexStatisticsReplyMultiError, or nil if none found.
func (m *GameIndexStatisticsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GameIndexStatisticsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GameId

	// no validation rules for GoalAllPlayId

	// no validation rules for GoalAllTotal

	// no validation rules for GoalAllRedTotal

	for idx, item := range m.GetGoalAllRed() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GameIndexStatisticsReplyValidationError{
						field:  fmt.Sprintf("GoalAllRed[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GameIndexStatisticsReplyValidationError{
						field:  fmt.Sprintf("GoalAllRed[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GameIndexStatisticsReplyValidationError{
					field:  fmt.Sprintf("GoalAllRed[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for GoalAllBlueTotal

	for idx, item := range m.GetGoalAllBlue() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GameIndexStatisticsReplyValidationError{
						field:  fmt.Sprintf("GoalAllBlue[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GameIndexStatisticsReplyValidationError{
						field:  fmt.Sprintf("GoalAllBlue[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GameIndexStatisticsReplyValidationError{
					field:  fmt.Sprintf("GoalAllBlue[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for GoalUpPlayId

	// no validation rules for GoalUpTotal

	// no validation rules for GoalUpRedTotal

	for idx, item := range m.GetGoalUpRed() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GameIndexStatisticsReplyValidationError{
						field:  fmt.Sprintf("GoalUpRed[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GameIndexStatisticsReplyValidationError{
						field:  fmt.Sprintf("GoalUpRed[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GameIndexStatisticsReplyValidationError{
					field:  fmt.Sprintf("GoalUpRed[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for GoalUpBlueTotal

	for idx, item := range m.GetGoalUpBlue() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GameIndexStatisticsReplyValidationError{
						field:  fmt.Sprintf("GoalUpBlue[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GameIndexStatisticsReplyValidationError{
						field:  fmt.Sprintf("GoalUpBlue[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GameIndexStatisticsReplyValidationError{
					field:  fmt.Sprintf("GoalUpBlue[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for GoalDownPlayId

	// no validation rules for GoalDownTotal

	// no validation rules for GoalDownRedTotal

	for idx, item := range m.GetGoalDownRed() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GameIndexStatisticsReplyValidationError{
						field:  fmt.Sprintf("GoalDownRed[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GameIndexStatisticsReplyValidationError{
						field:  fmt.Sprintf("GoalDownRed[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GameIndexStatisticsReplyValidationError{
					field:  fmt.Sprintf("GoalDownRed[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for GoalDownBlueTotal

	for idx, item := range m.GetGoalDownBlue() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GameIndexStatisticsReplyValidationError{
						field:  fmt.Sprintf("GoalDownBlue[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GameIndexStatisticsReplyValidationError{
						field:  fmt.Sprintf("GoalDownBlue[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GameIndexStatisticsReplyValidationError{
					field:  fmt.Sprintf("GoalDownBlue[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for ResultPlayId

	// no validation rules for ResultRedTotal

	// no validation rules for ResultTotal

	// no validation rules for ResultBlueTotal

	// no validation rules for ResultDrawTotal

	// no validation rules for ScorePlayId

	// no validation rules for ScoreTotal

	for idx, item := range m.GetScore() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GameIndexStatisticsReplyValidationError{
						field:  fmt.Sprintf("Score[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GameIndexStatisticsReplyValidationError{
						field:  fmt.Sprintf("Score[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GameIndexStatisticsReplyValidationError{
					field:  fmt.Sprintf("Score[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GameIndexStatisticsReplyMultiError(errors)
	}

	return nil
}

// GameIndexStatisticsReplyMultiError is an error wrapping multiple validation
// errors returned by GameIndexStatisticsReply.ValidateAll() if the designated
// constraints aren't met.
type GameIndexStatisticsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GameIndexStatisticsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GameIndexStatisticsReplyMultiError) AllErrors() []error { return m }

// GameIndexStatisticsReplyValidationError is the validation error returned by
// GameIndexStatisticsReply.Validate if the designated constraints aren't met.
type GameIndexStatisticsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GameIndexStatisticsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GameIndexStatisticsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GameIndexStatisticsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GameIndexStatisticsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GameIndexStatisticsReplyValidationError) ErrorName() string {
	return "GameIndexStatisticsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GameIndexStatisticsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGameIndexStatisticsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GameIndexStatisticsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GameIndexStatisticsReplyValidationError{}

// Validate checks the field values on UserDepositRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserDepositRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserDepositRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserDepositRequestMultiError, or nil if none found.
func (m *UserDepositRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserDepositRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSendBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserDepositRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserDepositRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSendBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserDepositRequestValidationError{
				field:  "SendBody",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserDepositRequestMultiError(errors)
	}

	return nil
}

// UserDepositRequestMultiError is an error wrapping multiple validation errors
// returned by UserDepositRequest.ValidateAll() if the designated constraints
// aren't met.
type UserDepositRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserDepositRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserDepositRequestMultiError) AllErrors() []error { return m }

// UserDepositRequestValidationError is the validation error returned by
// UserDepositRequest.Validate if the designated constraints aren't met.
type UserDepositRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserDepositRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserDepositRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserDepositRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserDepositRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserDepositRequestValidationError) ErrorName() string {
	return "UserDepositRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserDepositRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserDepositRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserDepositRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserDepositRequestValidationError{}

// Validate checks the field values on UserDepositReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserDepositReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserDepositReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserDepositReplyMultiError, or nil if none found.
func (m *UserDepositReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UserDepositReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return UserDepositReplyMultiError(errors)
	}

	return nil
}

// UserDepositReplyMultiError is an error wrapping multiple validation errors
// returned by UserDepositReply.ValidateAll() if the designated constraints
// aren't met.
type UserDepositReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserDepositReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserDepositReplyMultiError) AllErrors() []error { return m }

// UserDepositReplyValidationError is the validation error returned by
// UserDepositReply.Validate if the designated constraints aren't met.
type UserDepositReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserDepositReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserDepositReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserDepositReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserDepositReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserDepositReplyValidationError) ErrorName() string { return "UserDepositReplyValidationError" }

// Error satisfies the builtin error interface
func (e UserDepositReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserDepositReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserDepositReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserDepositReplyValidationError{}

// Validate checks the field values on GamePlayGrantRequest_SendBody with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GamePlayGrantRequest_SendBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GamePlayGrantRequest_SendBody with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GamePlayGrantRequest_SendBodyMultiError, or nil if none found.
func (m *GamePlayGrantRequest_SendBody) ValidateAll() error {
	return m.validate(true)
}

func (m *GamePlayGrantRequest_SendBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GameId

	if len(errors) > 0 {
		return GamePlayGrantRequest_SendBodyMultiError(errors)
	}

	return nil
}

// GamePlayGrantRequest_SendBodyMultiError is an error wrapping multiple
// validation errors returned by GamePlayGrantRequest_SendBody.ValidateAll()
// if the designated constraints aren't met.
type GamePlayGrantRequest_SendBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GamePlayGrantRequest_SendBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GamePlayGrantRequest_SendBodyMultiError) AllErrors() []error { return m }

// GamePlayGrantRequest_SendBodyValidationError is the validation error
// returned by GamePlayGrantRequest_SendBody.Validate if the designated
// constraints aren't met.
type GamePlayGrantRequest_SendBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GamePlayGrantRequest_SendBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GamePlayGrantRequest_SendBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GamePlayGrantRequest_SendBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GamePlayGrantRequest_SendBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GamePlayGrantRequest_SendBodyValidationError) ErrorName() string {
	return "GamePlayGrantRequest_SendBodyValidationError"
}

// Error satisfies the builtin error interface
func (e GamePlayGrantRequest_SendBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGamePlayGrantRequest_SendBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GamePlayGrantRequest_SendBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GamePlayGrantRequest_SendBodyValidationError{}

// Validate checks the field values on SortPlayGrantRequest_SendBody with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SortPlayGrantRequest_SendBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SortPlayGrantRequest_SendBody with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SortPlayGrantRequest_SendBodyMultiError, or nil if none found.
func (m *SortPlayGrantRequest_SendBody) ValidateAll() error {
	return m.validate(true)
}

func (m *SortPlayGrantRequest_SendBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SortId

	if len(errors) > 0 {
		return SortPlayGrantRequest_SendBodyMultiError(errors)
	}

	return nil
}

// SortPlayGrantRequest_SendBodyMultiError is an error wrapping multiple
// validation errors returned by SortPlayGrantRequest_SendBody.ValidateAll()
// if the designated constraints aren't met.
type SortPlayGrantRequest_SendBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SortPlayGrantRequest_SendBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SortPlayGrantRequest_SendBodyMultiError) AllErrors() []error { return m }

// SortPlayGrantRequest_SendBodyValidationError is the validation error
// returned by SortPlayGrantRequest_SendBody.Validate if the designated
// constraints aren't met.
type SortPlayGrantRequest_SendBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SortPlayGrantRequest_SendBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SortPlayGrantRequest_SendBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SortPlayGrantRequest_SendBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SortPlayGrantRequest_SendBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SortPlayGrantRequest_SendBodyValidationError) ErrorName() string {
	return "SortPlayGrantRequest_SendBodyValidationError"
}

// Error satisfies the builtin error interface
func (e SortPlayGrantRequest_SendBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSortPlayGrantRequest_SendBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SortPlayGrantRequest_SendBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SortPlayGrantRequest_SendBodyValidationError{}

// Validate checks the field values on UpdateConfigRequest_SendBody with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateConfigRequest_SendBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateConfigRequest_SendBody with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateConfigRequest_SendBodyMultiError, or nil if none found.
func (m *UpdateConfigRequest_SendBody) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateConfigRequest_SendBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Value

	if len(errors) > 0 {
		return UpdateConfigRequest_SendBodyMultiError(errors)
	}

	return nil
}

// UpdateConfigRequest_SendBodyMultiError is an error wrapping multiple
// validation errors returned by UpdateConfigRequest_SendBody.ValidateAll() if
// the designated constraints aren't met.
type UpdateConfigRequest_SendBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateConfigRequest_SendBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateConfigRequest_SendBodyMultiError) AllErrors() []error { return m }

// UpdateConfigRequest_SendBodyValidationError is the validation error returned
// by UpdateConfigRequest_SendBody.Validate if the designated constraints
// aren't met.
type UpdateConfigRequest_SendBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateConfigRequest_SendBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateConfigRequest_SendBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateConfigRequest_SendBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateConfigRequest_SendBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateConfigRequest_SendBodyValidationError) ErrorName() string {
	return "UpdateConfigRequest_SendBodyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateConfigRequest_SendBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateConfigRequest_SendBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateConfigRequest_SendBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateConfigRequest_SendBodyValidationError{}

// Validate checks the field values on CreateGameRequest_SendBody with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateGameRequest_SendBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateGameRequest_SendBody with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateGameRequest_SendBodyMultiError, or nil if none found.
func (m *CreateGameRequest_SendBody) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateGameRequest_SendBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RedTeamId

	// no validation rules for BlueTeamId

	// no validation rules for StartTime

	// no validation rules for EndTime

	// no validation rules for UpEndTime

	// no validation rules for DownStartTime

	// no validation rules for Name

	if len(errors) > 0 {
		return CreateGameRequest_SendBodyMultiError(errors)
	}

	return nil
}

// CreateGameRequest_SendBodyMultiError is an error wrapping multiple
// validation errors returned by CreateGameRequest_SendBody.ValidateAll() if
// the designated constraints aren't met.
type CreateGameRequest_SendBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateGameRequest_SendBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateGameRequest_SendBodyMultiError) AllErrors() []error { return m }

// CreateGameRequest_SendBodyValidationError is the validation error returned
// by CreateGameRequest_SendBody.Validate if the designated constraints aren't met.
type CreateGameRequest_SendBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGameRequest_SendBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGameRequest_SendBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGameRequest_SendBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGameRequest_SendBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGameRequest_SendBodyValidationError) ErrorName() string {
	return "CreateGameRequest_SendBodyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateGameRequest_SendBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGameRequest_SendBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGameRequest_SendBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGameRequest_SendBodyValidationError{}

// Validate checks the field values on UpdateGameRequest_SendBody with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateGameRequest_SendBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateGameRequest_SendBody with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateGameRequest_SendBodyMultiError, or nil if none found.
func (m *UpdateGameRequest_SendBody) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateGameRequest_SendBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RedTeamId

	// no validation rules for BlueTeamId

	// no validation rules for StartTime

	// no validation rules for EndTime

	// no validation rules for UpEndTime

	// no validation rules for DownStartTime

	// no validation rules for GameId

	// no validation rules for Status

	// no validation rules for RedTeamUpGoal

	// no validation rules for BlueTeamUpGoal

	// no validation rules for RedTeamDownGoal

	// no validation rules for BlueTeamDownGoal

	// no validation rules for WinTeamId

	// no validation rules for Name

	if len(errors) > 0 {
		return UpdateGameRequest_SendBodyMultiError(errors)
	}

	return nil
}

// UpdateGameRequest_SendBodyMultiError is an error wrapping multiple
// validation errors returned by UpdateGameRequest_SendBody.ValidateAll() if
// the designated constraints aren't met.
type UpdateGameRequest_SendBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateGameRequest_SendBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateGameRequest_SendBodyMultiError) AllErrors() []error { return m }

// UpdateGameRequest_SendBodyValidationError is the validation error returned
// by UpdateGameRequest_SendBody.Validate if the designated constraints aren't met.
type UpdateGameRequest_SendBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGameRequest_SendBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGameRequest_SendBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGameRequest_SendBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGameRequest_SendBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGameRequest_SendBodyValidationError) ErrorName() string {
	return "UpdateGameRequest_SendBodyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGameRequest_SendBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGameRequest_SendBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGameRequest_SendBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGameRequest_SendBodyValidationError{}

// Validate checks the field values on UpdateSortRequest_SendBody with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateSortRequest_SendBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSortRequest_SendBody with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSortRequest_SendBodyMultiError, or nil if none found.
func (m *UpdateSortRequest_SendBody) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSortRequest_SendBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SortId

	// no validation rules for EndTime

	// no validation rules for Content

	// no validation rules for Status

	if len(errors) > 0 {
		return UpdateSortRequest_SendBodyMultiError(errors)
	}

	return nil
}

// UpdateSortRequest_SendBodyMultiError is an error wrapping multiple
// validation errors returned by UpdateSortRequest_SendBody.ValidateAll() if
// the designated constraints aren't met.
type UpdateSortRequest_SendBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSortRequest_SendBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSortRequest_SendBodyMultiError) AllErrors() []error { return m }

// UpdateSortRequest_SendBodyValidationError is the validation error returned
// by UpdateSortRequest_SendBody.Validate if the designated constraints aren't met.
type UpdateSortRequest_SendBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSortRequest_SendBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSortRequest_SendBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSortRequest_SendBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSortRequest_SendBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSortRequest_SendBodyValidationError) ErrorName() string {
	return "UpdateSortRequest_SendBodyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSortRequest_SendBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSortRequest_SendBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSortRequest_SendBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSortRequest_SendBodyValidationError{}

// Validate checks the field values on GetUserRecommendListReply_Item with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserRecommendListReply_Item) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserRecommendListReply_Item with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetUserRecommendListReply_ItemMultiError, or nil if none found.
func (m *GetUserRecommendListReply_Item) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserRecommendListReply_Item) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Address

	// no validation rules for CreatedAt

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetUserRecommendListReply_ItemMultiError(errors)
	}

	return nil
}

// GetUserRecommendListReply_ItemMultiError is an error wrapping multiple
// validation errors returned by GetUserRecommendListReply_Item.ValidateAll()
// if the designated constraints aren't met.
type GetUserRecommendListReply_ItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserRecommendListReply_ItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserRecommendListReply_ItemMultiError) AllErrors() []error { return m }

// GetUserRecommendListReply_ItemValidationError is the validation error
// returned by GetUserRecommendListReply_Item.Validate if the designated
// constraints aren't met.
type GetUserRecommendListReply_ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserRecommendListReply_ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserRecommendListReply_ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserRecommendListReply_ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserRecommendListReply_ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserRecommendListReply_ItemValidationError) ErrorName() string {
	return "GetUserRecommendListReply_ItemValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserRecommendListReply_ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserRecommendListReply_Item.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserRecommendListReply_ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserRecommendListReply_ItemValidationError{}

// Validate checks the field values on GetGameListReply_Item with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGameListReply_Item) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGameListReply_Item with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGameListReply_ItemMultiError, or nil if none found.
func (m *GetGameListReply_Item) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGameListReply_Item) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GameId

	// no validation rules for Name

	// no validation rules for StartTime

	// no validation rules for EndTime

	// no validation rules for UpEndTime

	// no validation rules for DownStartTime

	if len(errors) > 0 {
		return GetGameListReply_ItemMultiError(errors)
	}

	return nil
}

// GetGameListReply_ItemMultiError is an error wrapping multiple validation
// errors returned by GetGameListReply_Item.ValidateAll() if the designated
// constraints aren't met.
type GetGameListReply_ItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGameListReply_ItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGameListReply_ItemMultiError) AllErrors() []error { return m }

// GetGameListReply_ItemValidationError is the validation error returned by
// GetGameListReply_Item.Validate if the designated constraints aren't met.
type GetGameListReply_ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGameListReply_ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGameListReply_ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGameListReply_ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGameListReply_ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGameListReply_ItemValidationError) ErrorName() string {
	return "GetGameListReply_ItemValidationError"
}

// Error satisfies the builtin error interface
func (e GetGameListReply_ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGameListReply_Item.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGameListReply_ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGameListReply_ItemValidationError{}

// Validate checks the field values on GetPlayListReply_Item with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPlayListReply_Item) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPlayListReply_Item with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPlayListReply_ItemMultiError, or nil if none found.
func (m *GetPlayListReply_Item) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPlayListReply_Item) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PlayId

	// no validation rules for Type

	// no validation rules for StartTime

	// no validation rules for EndTime

	if len(errors) > 0 {
		return GetPlayListReply_ItemMultiError(errors)
	}

	return nil
}

// GetPlayListReply_ItemMultiError is an error wrapping multiple validation
// errors returned by GetPlayListReply_Item.ValidateAll() if the designated
// constraints aren't met.
type GetPlayListReply_ItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPlayListReply_ItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPlayListReply_ItemMultiError) AllErrors() []error { return m }

// GetPlayListReply_ItemValidationError is the validation error returned by
// GetPlayListReply_Item.Validate if the designated constraints aren't met.
type GetPlayListReply_ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPlayListReply_ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPlayListReply_ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPlayListReply_ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPlayListReply_ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPlayListReply_ItemValidationError) ErrorName() string {
	return "GetPlayListReply_ItemValidationError"
}

// Error satisfies the builtin error interface
func (e GetPlayListReply_ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPlayListReply_Item.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPlayListReply_ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPlayListReply_ItemValidationError{}

// Validate checks the field values on GetRoomPlayListReply_Item with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRoomPlayListReply_Item) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRoomPlayListReply_Item with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRoomPlayListReply_ItemMultiError, or nil if none found.
func (m *GetRoomPlayListReply_Item) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRoomPlayListReply_Item) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PlayId

	// no validation rules for Type

	// no validation rules for StartTime

	// no validation rules for EndTime

	if len(errors) > 0 {
		return GetRoomPlayListReply_ItemMultiError(errors)
	}

	return nil
}

// GetRoomPlayListReply_ItemMultiError is an error wrapping multiple validation
// errors returned by GetRoomPlayListReply_Item.ValidateAll() if the
// designated constraints aren't met.
type GetRoomPlayListReply_ItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRoomPlayListReply_ItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRoomPlayListReply_ItemMultiError) AllErrors() []error { return m }

// GetRoomPlayListReply_ItemValidationError is the validation error returned by
// GetRoomPlayListReply_Item.Validate if the designated constraints aren't met.
type GetRoomPlayListReply_ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRoomPlayListReply_ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRoomPlayListReply_ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRoomPlayListReply_ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRoomPlayListReply_ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRoomPlayListReply_ItemValidationError) ErrorName() string {
	return "GetRoomPlayListReply_ItemValidationError"
}

// Error satisfies the builtin error interface
func (e GetRoomPlayListReply_ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRoomPlayListReply_Item.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRoomPlayListReply_ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRoomPlayListReply_ItemValidationError{}

// Validate checks the field values on GetPlayRelListReply_Item with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPlayRelListReply_Item) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPlayRelListReply_Item with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPlayRelListReply_ItemMultiError, or nil if none found.
func (m *GetPlayRelListReply_Item) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPlayRelListReply_Item) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Address

	// no validation rules for Status

	// no validation rules for Pay

	if len(errors) > 0 {
		return GetPlayRelListReply_ItemMultiError(errors)
	}

	return nil
}

// GetPlayRelListReply_ItemMultiError is an error wrapping multiple validation
// errors returned by GetPlayRelListReply_Item.ValidateAll() if the designated
// constraints aren't met.
type GetPlayRelListReply_ItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPlayRelListReply_ItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPlayRelListReply_ItemMultiError) AllErrors() []error { return m }

// GetPlayRelListReply_ItemValidationError is the validation error returned by
// GetPlayRelListReply_Item.Validate if the designated constraints aren't met.
type GetPlayRelListReply_ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPlayRelListReply_ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPlayRelListReply_ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPlayRelListReply_ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPlayRelListReply_ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPlayRelListReply_ItemValidationError) ErrorName() string {
	return "GetPlayRelListReply_ItemValidationError"
}

// Error satisfies the builtin error interface
func (e GetPlayRelListReply_ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPlayRelListReply_Item.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPlayRelListReply_ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPlayRelListReply_ItemValidationError{}

// Validate checks the field values on GetRoomListReply_Item with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRoomListReply_Item) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRoomListReply_Item with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRoomListReply_ItemMultiError, or nil if none found.
func (m *GetRoomListReply_Item) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRoomListReply_Item) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoomId

	// no validation rules for Account

	// no validation rules for CreatedAt

	if len(errors) > 0 {
		return GetRoomListReply_ItemMultiError(errors)
	}

	return nil
}

// GetRoomListReply_ItemMultiError is an error wrapping multiple validation
// errors returned by GetRoomListReply_Item.ValidateAll() if the designated
// constraints aren't met.
type GetRoomListReply_ItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRoomListReply_ItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRoomListReply_ItemMultiError) AllErrors() []error { return m }

// GetRoomListReply_ItemValidationError is the validation error returned by
// GetRoomListReply_Item.Validate if the designated constraints aren't met.
type GetRoomListReply_ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRoomListReply_ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRoomListReply_ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRoomListReply_ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRoomListReply_ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRoomListReply_ItemValidationError) ErrorName() string {
	return "GetRoomListReply_ItemValidationError"
}

// Error satisfies the builtin error interface
func (e GetRoomListReply_ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRoomListReply_Item.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRoomListReply_ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRoomListReply_ItemValidationError{}

// Validate checks the field values on GetConfigListReply_Item with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetConfigListReply_Item) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConfigListReply_Item with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConfigListReply_ItemMultiError, or nil if none found.
func (m *GetConfigListReply_Item) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConfigListReply_Item) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Value

	if len(errors) > 0 {
		return GetConfigListReply_ItemMultiError(errors)
	}

	return nil
}

// GetConfigListReply_ItemMultiError is an error wrapping multiple validation
// errors returned by GetConfigListReply_Item.ValidateAll() if the designated
// constraints aren't met.
type GetConfigListReply_ItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConfigListReply_ItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConfigListReply_ItemMultiError) AllErrors() []error { return m }

// GetConfigListReply_ItemValidationError is the validation error returned by
// GetConfigListReply_Item.Validate if the designated constraints aren't met.
type GetConfigListReply_ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConfigListReply_ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConfigListReply_ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConfigListReply_ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConfigListReply_ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConfigListReply_ItemValidationError) ErrorName() string {
	return "GetConfigListReply_ItemValidationError"
}

// Error satisfies the builtin error interface
func (e GetConfigListReply_ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConfigListReply_Item.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConfigListReply_ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConfigListReply_ItemValidationError{}

// Validate checks the field values on GetUserListReply_Item with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserListReply_Item) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserListReply_Item with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserListReply_ItemMultiError, or nil if none found.
func (m *GetUserListReply_Item) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserListReply_Item) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Address

	// no validation rules for ToAddress

	// no validation rules for CreatedAt

	if len(errors) > 0 {
		return GetUserListReply_ItemMultiError(errors)
	}

	return nil
}

// GetUserListReply_ItemMultiError is an error wrapping multiple validation
// errors returned by GetUserListReply_Item.ValidateAll() if the designated
// constraints aren't met.
type GetUserListReply_ItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserListReply_ItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserListReply_ItemMultiError) AllErrors() []error { return m }

// GetUserListReply_ItemValidationError is the validation error returned by
// GetUserListReply_Item.Validate if the designated constraints aren't met.
type GetUserListReply_ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserListReply_ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserListReply_ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserListReply_ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserListReply_ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserListReply_ItemValidationError) ErrorName() string {
	return "GetUserListReply_ItemValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserListReply_ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserListReply_Item.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserListReply_ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserListReply_ItemValidationError{}

// Validate checks the field values on GetUserProxyListReply_Item with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserProxyListReply_Item) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserProxyListReply_Item with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserProxyListReply_ItemMultiError, or nil if none found.
func (m *GetUserProxyListReply_Item) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserProxyListReply_Item) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Address

	// no validation rules for CreatedAt

	// no validation rules for Rate

	if len(errors) > 0 {
		return GetUserProxyListReply_ItemMultiError(errors)
	}

	return nil
}

// GetUserProxyListReply_ItemMultiError is an error wrapping multiple
// validation errors returned by GetUserProxyListReply_Item.ValidateAll() if
// the designated constraints aren't met.
type GetUserProxyListReply_ItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserProxyListReply_ItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserProxyListReply_ItemMultiError) AllErrors() []error { return m }

// GetUserProxyListReply_ItemValidationError is the validation error returned
// by GetUserProxyListReply_Item.Validate if the designated constraints aren't met.
type GetUserProxyListReply_ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserProxyListReply_ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserProxyListReply_ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserProxyListReply_ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserProxyListReply_ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserProxyListReply_ItemValidationError) ErrorName() string {
	return "GetUserProxyListReply_ItemValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserProxyListReply_ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserProxyListReply_Item.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserProxyListReply_ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserProxyListReply_ItemValidationError{}

// Validate checks the field values on GetUserBalanceRecordReply_Item with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserBalanceRecordReply_Item) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserBalanceRecordReply_Item with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetUserBalanceRecordReply_ItemMultiError, or nil if none found.
func (m *GetUserBalanceRecordReply_Item) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserBalanceRecordReply_Item) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Address

	// no validation rules for Balance

	// no validation rules for Amount

	// no validation rules for Reason

	// no validation rules for Type

	// no validation rules for CreatedAt

	if len(errors) > 0 {
		return GetUserBalanceRecordReply_ItemMultiError(errors)
	}

	return nil
}

// GetUserBalanceRecordReply_ItemMultiError is an error wrapping multiple
// validation errors returned by GetUserBalanceRecordReply_Item.ValidateAll()
// if the designated constraints aren't met.
type GetUserBalanceRecordReply_ItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserBalanceRecordReply_ItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserBalanceRecordReply_ItemMultiError) AllErrors() []error { return m }

// GetUserBalanceRecordReply_ItemValidationError is the validation error
// returned by GetUserBalanceRecordReply_Item.Validate if the designated
// constraints aren't met.
type GetUserBalanceRecordReply_ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserBalanceRecordReply_ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserBalanceRecordReply_ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserBalanceRecordReply_ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserBalanceRecordReply_ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserBalanceRecordReply_ItemValidationError) ErrorName() string {
	return "GetUserBalanceRecordReply_ItemValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserBalanceRecordReply_ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserBalanceRecordReply_Item.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserBalanceRecordReply_ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserBalanceRecordReply_ItemValidationError{}

// Validate checks the field values on CreatePlayGameScoreRequest_SendBody with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreatePlayGameScoreRequest_SendBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePlayGameScoreRequest_SendBody
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreatePlayGameScoreRequest_SendBodyMultiError, or nil if none found.
func (m *CreatePlayGameScoreRequest_SendBody) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePlayGameScoreRequest_SendBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PlayId

	// no validation rules for Pay

	if len(errors) > 0 {
		return CreatePlayGameScoreRequest_SendBodyMultiError(errors)
	}

	return nil
}

// CreatePlayGameScoreRequest_SendBodyMultiError is an error wrapping multiple
// validation errors returned by
// CreatePlayGameScoreRequest_SendBody.ValidateAll() if the designated
// constraints aren't met.
type CreatePlayGameScoreRequest_SendBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePlayGameScoreRequest_SendBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePlayGameScoreRequest_SendBodyMultiError) AllErrors() []error { return m }

// CreatePlayGameScoreRequest_SendBodyValidationError is the validation error
// returned by CreatePlayGameScoreRequest_SendBody.Validate if the designated
// constraints aren't met.
type CreatePlayGameScoreRequest_SendBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePlayGameScoreRequest_SendBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePlayGameScoreRequest_SendBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePlayGameScoreRequest_SendBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePlayGameScoreRequest_SendBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePlayGameScoreRequest_SendBodyValidationError) ErrorName() string {
	return "CreatePlayGameScoreRequest_SendBodyValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePlayGameScoreRequest_SendBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePlayGameScoreRequest_SendBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePlayGameScoreRequest_SendBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePlayGameScoreRequest_SendBodyValidationError{}

// Validate checks the field values on CreatePlayGameResultRequest_SendBody
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreatePlayGameResultRequest_SendBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePlayGameResultRequest_SendBody
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreatePlayGameResultRequest_SendBodyMultiError, or nil if none found.
func (m *CreatePlayGameResultRequest_SendBody) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePlayGameResultRequest_SendBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PlayId

	// no validation rules for Content

	// no validation rules for Pay

	if len(errors) > 0 {
		return CreatePlayGameResultRequest_SendBodyMultiError(errors)
	}

	return nil
}

// CreatePlayGameResultRequest_SendBodyMultiError is an error wrapping multiple
// validation errors returned by
// CreatePlayGameResultRequest_SendBody.ValidateAll() if the designated
// constraints aren't met.
type CreatePlayGameResultRequest_SendBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePlayGameResultRequest_SendBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePlayGameResultRequest_SendBodyMultiError) AllErrors() []error { return m }

// CreatePlayGameResultRequest_SendBodyValidationError is the validation error
// returned by CreatePlayGameResultRequest_SendBody.Validate if the designated
// constraints aren't met.
type CreatePlayGameResultRequest_SendBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePlayGameResultRequest_SendBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePlayGameResultRequest_SendBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePlayGameResultRequest_SendBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePlayGameResultRequest_SendBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePlayGameResultRequest_SendBodyValidationError) ErrorName() string {
	return "CreatePlayGameResultRequest_SendBodyValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePlayGameResultRequest_SendBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePlayGameResultRequest_SendBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePlayGameResultRequest_SendBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePlayGameResultRequest_SendBodyValidationError{}

// Validate checks the field values on CreatePlayGameSortRequest_SendBody with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreatePlayGameSortRequest_SendBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePlayGameSortRequest_SendBody
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreatePlayGameSortRequest_SendBodyMultiError, or nil if none found.
func (m *CreatePlayGameSortRequest_SendBody) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePlayGameSortRequest_SendBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PlayId

	// no validation rules for Pay

	// no validation rules for SortId

	if len(errors) > 0 {
		return CreatePlayGameSortRequest_SendBodyMultiError(errors)
	}

	return nil
}

// CreatePlayGameSortRequest_SendBodyMultiError is an error wrapping multiple
// validation errors returned by
// CreatePlayGameSortRequest_SendBody.ValidateAll() if the designated
// constraints aren't met.
type CreatePlayGameSortRequest_SendBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePlayGameSortRequest_SendBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePlayGameSortRequest_SendBodyMultiError) AllErrors() []error { return m }

// CreatePlayGameSortRequest_SendBodyValidationError is the validation error
// returned by CreatePlayGameSortRequest_SendBody.Validate if the designated
// constraints aren't met.
type CreatePlayGameSortRequest_SendBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePlayGameSortRequest_SendBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePlayGameSortRequest_SendBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePlayGameSortRequest_SendBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePlayGameSortRequest_SendBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePlayGameSortRequest_SendBodyValidationError) ErrorName() string {
	return "CreatePlayGameSortRequest_SendBodyValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePlayGameSortRequest_SendBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePlayGameSortRequest_SendBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePlayGameSortRequest_SendBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePlayGameSortRequest_SendBodyValidationError{}

// Validate checks the field values on CreatePlayGameGoalRequest_SendBody with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreatePlayGameGoalRequest_SendBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePlayGameGoalRequest_SendBody
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreatePlayGameGoalRequest_SendBodyMultiError, or nil if none found.
func (m *CreatePlayGameGoalRequest_SendBody) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePlayGameGoalRequest_SendBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GameId

	// no validation rules for Goal

	// no validation rules for PlayId

	// no validation rules for Pay

	// no validation rules for Team

	if len(errors) > 0 {
		return CreatePlayGameGoalRequest_SendBodyMultiError(errors)
	}

	return nil
}

// CreatePlayGameGoalRequest_SendBodyMultiError is an error wrapping multiple
// validation errors returned by
// CreatePlayGameGoalRequest_SendBody.ValidateAll() if the designated
// constraints aren't met.
type CreatePlayGameGoalRequest_SendBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePlayGameGoalRequest_SendBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePlayGameGoalRequest_SendBodyMultiError) AllErrors() []error { return m }

// CreatePlayGameGoalRequest_SendBodyValidationError is the validation error
// returned by CreatePlayGameGoalRequest_SendBody.Validate if the designated
// constraints aren't met.
type CreatePlayGameGoalRequest_SendBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePlayGameGoalRequest_SendBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePlayGameGoalRequest_SendBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePlayGameGoalRequest_SendBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePlayGameGoalRequest_SendBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePlayGameGoalRequest_SendBodyValidationError) ErrorName() string {
	return "CreatePlayGameGoalRequest_SendBodyValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePlayGameGoalRequest_SendBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePlayGameGoalRequest_SendBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePlayGameGoalRequest_SendBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePlayGameGoalRequest_SendBodyValidationError{}

// Validate checks the field values on GetGameSortListReply_Sort with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGameSortListReply_Sort) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGameSortListReply_Sort with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGameSortListReply_SortMultiError, or nil if none found.
func (m *GetGameSortListReply_Sort) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGameSortListReply_Sort) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SortId

	// no validation rules for SortType

	// no validation rules for Content

	// no validation rules for Status

	// no validation rules for SortName

	// no validation rules for EndTime

	if len(errors) > 0 {
		return GetGameSortListReply_SortMultiError(errors)
	}

	return nil
}

// GetGameSortListReply_SortMultiError is an error wrapping multiple validation
// errors returned by GetGameSortListReply_Sort.ValidateAll() if the
// designated constraints aren't met.
type GetGameSortListReply_SortMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGameSortListReply_SortMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGameSortListReply_SortMultiError) AllErrors() []error { return m }

// GetGameSortListReply_SortValidationError is the validation error returned by
// GetGameSortListReply_Sort.Validate if the designated constraints aren't met.
type GetGameSortListReply_SortValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGameSortListReply_SortValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGameSortListReply_SortValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGameSortListReply_SortValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGameSortListReply_SortValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGameSortListReply_SortValidationError) ErrorName() string {
	return "GetGameSortListReply_SortValidationError"
}

// Error satisfies the builtin error interface
func (e GetGameSortListReply_SortValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGameSortListReply_Sort.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGameSortListReply_SortValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGameSortListReply_SortValidationError{}

// Validate checks the field values on SaveDisplayGameIndexRequest_SendBody
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SaveDisplayGameIndexRequest_SendBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SaveDisplayGameIndexRequest_SendBody
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SaveDisplayGameIndexRequest_SendBodyMultiError, or nil if none found.
func (m *SaveDisplayGameIndexRequest_SendBody) ValidateAll() error {
	return m.validate(true)
}

func (m *SaveDisplayGameIndexRequest_SendBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GameId

	if len(errors) > 0 {
		return SaveDisplayGameIndexRequest_SendBodyMultiError(errors)
	}

	return nil
}

// SaveDisplayGameIndexRequest_SendBodyMultiError is an error wrapping multiple
// validation errors returned by
// SaveDisplayGameIndexRequest_SendBody.ValidateAll() if the designated
// constraints aren't met.
type SaveDisplayGameIndexRequest_SendBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SaveDisplayGameIndexRequest_SendBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SaveDisplayGameIndexRequest_SendBodyMultiError) AllErrors() []error { return m }

// SaveDisplayGameIndexRequest_SendBodyValidationError is the validation error
// returned by SaveDisplayGameIndexRequest_SendBody.Validate if the designated
// constraints aren't met.
type SaveDisplayGameIndexRequest_SendBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaveDisplayGameIndexRequest_SendBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaveDisplayGameIndexRequest_SendBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaveDisplayGameIndexRequest_SendBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaveDisplayGameIndexRequest_SendBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaveDisplayGameIndexRequest_SendBodyValidationError) ErrorName() string {
	return "SaveDisplayGameIndexRequest_SendBodyValidationError"
}

// Error satisfies the builtin error interface
func (e SaveDisplayGameIndexRequest_SendBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaveDisplayGameIndexRequest_SendBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaveDisplayGameIndexRequest_SendBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaveDisplayGameIndexRequest_SendBodyValidationError{}

// Validate checks the field values on CreatePlayGameRequest_SendBody with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePlayGameRequest_SendBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePlayGameRequest_SendBody with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreatePlayGameRequest_SendBodyMultiError, or nil if none found.
func (m *CreatePlayGameRequest_SendBody) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePlayGameRequest_SendBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StartTime

	// no validation rules for EndTime

	// no validation rules for PlayType

	// no validation rules for GameId

	if len(errors) > 0 {
		return CreatePlayGameRequest_SendBodyMultiError(errors)
	}

	return nil
}

// CreatePlayGameRequest_SendBodyMultiError is an error wrapping multiple
// validation errors returned by CreatePlayGameRequest_SendBody.ValidateAll()
// if the designated constraints aren't met.
type CreatePlayGameRequest_SendBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePlayGameRequest_SendBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePlayGameRequest_SendBodyMultiError) AllErrors() []error { return m }

// CreatePlayGameRequest_SendBodyValidationError is the validation error
// returned by CreatePlayGameRequest_SendBody.Validate if the designated
// constraints aren't met.
type CreatePlayGameRequest_SendBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePlayGameRequest_SendBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePlayGameRequest_SendBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePlayGameRequest_SendBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePlayGameRequest_SendBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePlayGameRequest_SendBodyValidationError) ErrorName() string {
	return "CreatePlayGameRequest_SendBodyValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePlayGameRequest_SendBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePlayGameRequest_SendBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePlayGameRequest_SendBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePlayGameRequest_SendBodyValidationError{}

// Validate checks the field values on CreatePlaySortRequest_SendBody with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePlaySortRequest_SendBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePlaySortRequest_SendBody with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreatePlaySortRequest_SendBodyMultiError, or nil if none found.
func (m *CreatePlaySortRequest_SendBody) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePlaySortRequest_SendBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StartTime

	// no validation rules for EndTime

	// no validation rules for SortId

	if len(errors) > 0 {
		return CreatePlaySortRequest_SendBodyMultiError(errors)
	}

	return nil
}

// CreatePlaySortRequest_SendBodyMultiError is an error wrapping multiple
// validation errors returned by CreatePlaySortRequest_SendBody.ValidateAll()
// if the designated constraints aren't met.
type CreatePlaySortRequest_SendBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePlaySortRequest_SendBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePlaySortRequest_SendBodyMultiError) AllErrors() []error { return m }

// CreatePlaySortRequest_SendBodyValidationError is the validation error
// returned by CreatePlaySortRequest_SendBody.Validate if the designated
// constraints aren't met.
type CreatePlaySortRequest_SendBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePlaySortRequest_SendBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePlaySortRequest_SendBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePlaySortRequest_SendBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePlaySortRequest_SendBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePlaySortRequest_SendBodyValidationError) ErrorName() string {
	return "CreatePlaySortRequest_SendBodyValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePlaySortRequest_SendBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePlaySortRequest_SendBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePlaySortRequest_SendBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePlaySortRequest_SendBodyValidationError{}

// Validate checks the field values on CreateSortRequest_SendBody with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSortRequest_SendBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSortRequest_SendBody with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSortRequest_SendBodyMultiError, or nil if none found.
func (m *CreateSortRequest_SendBody) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSortRequest_SendBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SortName

	// no validation rules for Type

	// no validation rules for EndTime

	if len(errors) > 0 {
		return CreateSortRequest_SendBodyMultiError(errors)
	}

	return nil
}

// CreateSortRequest_SendBodyMultiError is an error wrapping multiple
// validation errors returned by CreateSortRequest_SendBody.ValidateAll() if
// the designated constraints aren't met.
type CreateSortRequest_SendBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSortRequest_SendBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSortRequest_SendBodyMultiError) AllErrors() []error { return m }

// CreateSortRequest_SendBodyValidationError is the validation error returned
// by CreateSortRequest_SendBody.Validate if the designated constraints aren't met.
type CreateSortRequest_SendBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSortRequest_SendBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSortRequest_SendBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSortRequest_SendBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSortRequest_SendBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSortRequest_SendBodyValidationError) ErrorName() string {
	return "CreateSortRequest_SendBodyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSortRequest_SendBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSortRequest_SendBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSortRequest_SendBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSortRequest_SendBodyValidationError{}

// Validate checks the field values on GetTeamListReply_Team with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTeamListReply_Team) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTeamListReply_Team with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTeamListReply_TeamMultiError, or nil if none found.
func (m *GetTeamListReply_Team) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTeamListReply_Team) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TeamId

	// no validation rules for TeamName

	if len(errors) > 0 {
		return GetTeamListReply_TeamMultiError(errors)
	}

	return nil
}

// GetTeamListReply_TeamMultiError is an error wrapping multiple validation
// errors returned by GetTeamListReply_Team.ValidateAll() if the designated
// constraints aren't met.
type GetTeamListReply_TeamMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTeamListReply_TeamMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTeamListReply_TeamMultiError) AllErrors() []error { return m }

// GetTeamListReply_TeamValidationError is the validation error returned by
// GetTeamListReply_Team.Validate if the designated constraints aren't met.
type GetTeamListReply_TeamValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTeamListReply_TeamValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTeamListReply_TeamValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTeamListReply_TeamValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTeamListReply_TeamValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTeamListReply_TeamValidationError) ErrorName() string {
	return "GetTeamListReply_TeamValidationError"
}

// Error satisfies the builtin error interface
func (e GetTeamListReply_TeamValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTeamListReply_Team.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTeamListReply_TeamValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTeamListReply_TeamValidationError{}

// Validate checks the field values on CreateTeamRequest_SendBody with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTeamRequest_SendBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTeamRequest_SendBody with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTeamRequest_SendBodyMultiError, or nil if none found.
func (m *CreateTeamRequest_SendBody) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTeamRequest_SendBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return CreateTeamRequest_SendBodyMultiError(errors)
	}

	return nil
}

// CreateTeamRequest_SendBodyMultiError is an error wrapping multiple
// validation errors returned by CreateTeamRequest_SendBody.ValidateAll() if
// the designated constraints aren't met.
type CreateTeamRequest_SendBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTeamRequest_SendBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTeamRequest_SendBodyMultiError) AllErrors() []error { return m }

// CreateTeamRequest_SendBodyValidationError is the validation error returned
// by CreateTeamRequest_SendBody.Validate if the designated constraints aren't met.
type CreateTeamRequest_SendBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTeamRequest_SendBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTeamRequest_SendBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTeamRequest_SendBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTeamRequest_SendBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTeamRequest_SendBodyValidationError) ErrorName() string {
	return "CreateTeamRequest_SendBodyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTeamRequest_SendBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTeamRequest_SendBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTeamRequest_SendBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTeamRequest_SendBodyValidationError{}

// Validate checks the field values on GameIndexStatisticsReply_GoalAllRed with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GameIndexStatisticsReply_GoalAllRed) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GameIndexStatisticsReply_GoalAllRed
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GameIndexStatisticsReply_GoalAllRedMultiError, or nil if none found.
func (m *GameIndexStatisticsReply_GoalAllRed) ValidateAll() error {
	return m.validate(true)
}

func (m *GameIndexStatisticsReply_GoalAllRed) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Goal

	// no validation rules for Total

	if len(errors) > 0 {
		return GameIndexStatisticsReply_GoalAllRedMultiError(errors)
	}

	return nil
}

// GameIndexStatisticsReply_GoalAllRedMultiError is an error wrapping multiple
// validation errors returned by
// GameIndexStatisticsReply_GoalAllRed.ValidateAll() if the designated
// constraints aren't met.
type GameIndexStatisticsReply_GoalAllRedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GameIndexStatisticsReply_GoalAllRedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GameIndexStatisticsReply_GoalAllRedMultiError) AllErrors() []error { return m }

// GameIndexStatisticsReply_GoalAllRedValidationError is the validation error
// returned by GameIndexStatisticsReply_GoalAllRed.Validate if the designated
// constraints aren't met.
type GameIndexStatisticsReply_GoalAllRedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GameIndexStatisticsReply_GoalAllRedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GameIndexStatisticsReply_GoalAllRedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GameIndexStatisticsReply_GoalAllRedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GameIndexStatisticsReply_GoalAllRedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GameIndexStatisticsReply_GoalAllRedValidationError) ErrorName() string {
	return "GameIndexStatisticsReply_GoalAllRedValidationError"
}

// Error satisfies the builtin error interface
func (e GameIndexStatisticsReply_GoalAllRedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGameIndexStatisticsReply_GoalAllRed.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GameIndexStatisticsReply_GoalAllRedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GameIndexStatisticsReply_GoalAllRedValidationError{}

// Validate checks the field values on GameIndexStatisticsReply_GoalAllBlue
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GameIndexStatisticsReply_GoalAllBlue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GameIndexStatisticsReply_GoalAllBlue
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GameIndexStatisticsReply_GoalAllBlueMultiError, or nil if none found.
func (m *GameIndexStatisticsReply_GoalAllBlue) ValidateAll() error {
	return m.validate(true)
}

func (m *GameIndexStatisticsReply_GoalAllBlue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Goal

	// no validation rules for Total

	if len(errors) > 0 {
		return GameIndexStatisticsReply_GoalAllBlueMultiError(errors)
	}

	return nil
}

// GameIndexStatisticsReply_GoalAllBlueMultiError is an error wrapping multiple
// validation errors returned by
// GameIndexStatisticsReply_GoalAllBlue.ValidateAll() if the designated
// constraints aren't met.
type GameIndexStatisticsReply_GoalAllBlueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GameIndexStatisticsReply_GoalAllBlueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GameIndexStatisticsReply_GoalAllBlueMultiError) AllErrors() []error { return m }

// GameIndexStatisticsReply_GoalAllBlueValidationError is the validation error
// returned by GameIndexStatisticsReply_GoalAllBlue.Validate if the designated
// constraints aren't met.
type GameIndexStatisticsReply_GoalAllBlueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GameIndexStatisticsReply_GoalAllBlueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GameIndexStatisticsReply_GoalAllBlueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GameIndexStatisticsReply_GoalAllBlueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GameIndexStatisticsReply_GoalAllBlueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GameIndexStatisticsReply_GoalAllBlueValidationError) ErrorName() string {
	return "GameIndexStatisticsReply_GoalAllBlueValidationError"
}

// Error satisfies the builtin error interface
func (e GameIndexStatisticsReply_GoalAllBlueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGameIndexStatisticsReply_GoalAllBlue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GameIndexStatisticsReply_GoalAllBlueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GameIndexStatisticsReply_GoalAllBlueValidationError{}

// Validate checks the field values on GameIndexStatisticsReply_GoalUpRed with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GameIndexStatisticsReply_GoalUpRed) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GameIndexStatisticsReply_GoalUpRed
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GameIndexStatisticsReply_GoalUpRedMultiError, or nil if none found.
func (m *GameIndexStatisticsReply_GoalUpRed) ValidateAll() error {
	return m.validate(true)
}

func (m *GameIndexStatisticsReply_GoalUpRed) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Goal

	// no validation rules for Total

	if len(errors) > 0 {
		return GameIndexStatisticsReply_GoalUpRedMultiError(errors)
	}

	return nil
}

// GameIndexStatisticsReply_GoalUpRedMultiError is an error wrapping multiple
// validation errors returned by
// GameIndexStatisticsReply_GoalUpRed.ValidateAll() if the designated
// constraints aren't met.
type GameIndexStatisticsReply_GoalUpRedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GameIndexStatisticsReply_GoalUpRedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GameIndexStatisticsReply_GoalUpRedMultiError) AllErrors() []error { return m }

// GameIndexStatisticsReply_GoalUpRedValidationError is the validation error
// returned by GameIndexStatisticsReply_GoalUpRed.Validate if the designated
// constraints aren't met.
type GameIndexStatisticsReply_GoalUpRedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GameIndexStatisticsReply_GoalUpRedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GameIndexStatisticsReply_GoalUpRedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GameIndexStatisticsReply_GoalUpRedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GameIndexStatisticsReply_GoalUpRedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GameIndexStatisticsReply_GoalUpRedValidationError) ErrorName() string {
	return "GameIndexStatisticsReply_GoalUpRedValidationError"
}

// Error satisfies the builtin error interface
func (e GameIndexStatisticsReply_GoalUpRedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGameIndexStatisticsReply_GoalUpRed.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GameIndexStatisticsReply_GoalUpRedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GameIndexStatisticsReply_GoalUpRedValidationError{}

// Validate checks the field values on GameIndexStatisticsReply_GoalUpBlue with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GameIndexStatisticsReply_GoalUpBlue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GameIndexStatisticsReply_GoalUpBlue
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GameIndexStatisticsReply_GoalUpBlueMultiError, or nil if none found.
func (m *GameIndexStatisticsReply_GoalUpBlue) ValidateAll() error {
	return m.validate(true)
}

func (m *GameIndexStatisticsReply_GoalUpBlue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Goal

	// no validation rules for Total

	if len(errors) > 0 {
		return GameIndexStatisticsReply_GoalUpBlueMultiError(errors)
	}

	return nil
}

// GameIndexStatisticsReply_GoalUpBlueMultiError is an error wrapping multiple
// validation errors returned by
// GameIndexStatisticsReply_GoalUpBlue.ValidateAll() if the designated
// constraints aren't met.
type GameIndexStatisticsReply_GoalUpBlueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GameIndexStatisticsReply_GoalUpBlueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GameIndexStatisticsReply_GoalUpBlueMultiError) AllErrors() []error { return m }

// GameIndexStatisticsReply_GoalUpBlueValidationError is the validation error
// returned by GameIndexStatisticsReply_GoalUpBlue.Validate if the designated
// constraints aren't met.
type GameIndexStatisticsReply_GoalUpBlueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GameIndexStatisticsReply_GoalUpBlueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GameIndexStatisticsReply_GoalUpBlueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GameIndexStatisticsReply_GoalUpBlueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GameIndexStatisticsReply_GoalUpBlueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GameIndexStatisticsReply_GoalUpBlueValidationError) ErrorName() string {
	return "GameIndexStatisticsReply_GoalUpBlueValidationError"
}

// Error satisfies the builtin error interface
func (e GameIndexStatisticsReply_GoalUpBlueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGameIndexStatisticsReply_GoalUpBlue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GameIndexStatisticsReply_GoalUpBlueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GameIndexStatisticsReply_GoalUpBlueValidationError{}

// Validate checks the field values on GameIndexStatisticsReply_GoalDownRed
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GameIndexStatisticsReply_GoalDownRed) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GameIndexStatisticsReply_GoalDownRed
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GameIndexStatisticsReply_GoalDownRedMultiError, or nil if none found.
func (m *GameIndexStatisticsReply_GoalDownRed) ValidateAll() error {
	return m.validate(true)
}

func (m *GameIndexStatisticsReply_GoalDownRed) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Goal

	// no validation rules for Total

	if len(errors) > 0 {
		return GameIndexStatisticsReply_GoalDownRedMultiError(errors)
	}

	return nil
}

// GameIndexStatisticsReply_GoalDownRedMultiError is an error wrapping multiple
// validation errors returned by
// GameIndexStatisticsReply_GoalDownRed.ValidateAll() if the designated
// constraints aren't met.
type GameIndexStatisticsReply_GoalDownRedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GameIndexStatisticsReply_GoalDownRedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GameIndexStatisticsReply_GoalDownRedMultiError) AllErrors() []error { return m }

// GameIndexStatisticsReply_GoalDownRedValidationError is the validation error
// returned by GameIndexStatisticsReply_GoalDownRed.Validate if the designated
// constraints aren't met.
type GameIndexStatisticsReply_GoalDownRedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GameIndexStatisticsReply_GoalDownRedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GameIndexStatisticsReply_GoalDownRedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GameIndexStatisticsReply_GoalDownRedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GameIndexStatisticsReply_GoalDownRedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GameIndexStatisticsReply_GoalDownRedValidationError) ErrorName() string {
	return "GameIndexStatisticsReply_GoalDownRedValidationError"
}

// Error satisfies the builtin error interface
func (e GameIndexStatisticsReply_GoalDownRedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGameIndexStatisticsReply_GoalDownRed.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GameIndexStatisticsReply_GoalDownRedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GameIndexStatisticsReply_GoalDownRedValidationError{}

// Validate checks the field values on GameIndexStatisticsReply_GoalDownBlue
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GameIndexStatisticsReply_GoalDownBlue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GameIndexStatisticsReply_GoalDownBlue
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GameIndexStatisticsReply_GoalDownBlueMultiError, or nil if none found.
func (m *GameIndexStatisticsReply_GoalDownBlue) ValidateAll() error {
	return m.validate(true)
}

func (m *GameIndexStatisticsReply_GoalDownBlue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Goal

	// no validation rules for Total

	if len(errors) > 0 {
		return GameIndexStatisticsReply_GoalDownBlueMultiError(errors)
	}

	return nil
}

// GameIndexStatisticsReply_GoalDownBlueMultiError is an error wrapping
// multiple validation errors returned by
// GameIndexStatisticsReply_GoalDownBlue.ValidateAll() if the designated
// constraints aren't met.
type GameIndexStatisticsReply_GoalDownBlueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GameIndexStatisticsReply_GoalDownBlueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GameIndexStatisticsReply_GoalDownBlueMultiError) AllErrors() []error { return m }

// GameIndexStatisticsReply_GoalDownBlueValidationError is the validation error
// returned by GameIndexStatisticsReply_GoalDownBlue.Validate if the
// designated constraints aren't met.
type GameIndexStatisticsReply_GoalDownBlueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GameIndexStatisticsReply_GoalDownBlueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GameIndexStatisticsReply_GoalDownBlueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GameIndexStatisticsReply_GoalDownBlueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GameIndexStatisticsReply_GoalDownBlueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GameIndexStatisticsReply_GoalDownBlueValidationError) ErrorName() string {
	return "GameIndexStatisticsReply_GoalDownBlueValidationError"
}

// Error satisfies the builtin error interface
func (e GameIndexStatisticsReply_GoalDownBlueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGameIndexStatisticsReply_GoalDownBlue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GameIndexStatisticsReply_GoalDownBlueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GameIndexStatisticsReply_GoalDownBlueValidationError{}

// Validate checks the field values on GameIndexStatisticsReply_Score with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GameIndexStatisticsReply_Score) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GameIndexStatisticsReply_Score with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GameIndexStatisticsReply_ScoreMultiError, or nil if none found.
func (m *GameIndexStatisticsReply_Score) ValidateAll() error {
	return m.validate(true)
}

func (m *GameIndexStatisticsReply_Score) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Content

	// no validation rules for Total

	if len(errors) > 0 {
		return GameIndexStatisticsReply_ScoreMultiError(errors)
	}

	return nil
}

// GameIndexStatisticsReply_ScoreMultiError is an error wrapping multiple
// validation errors returned by GameIndexStatisticsReply_Score.ValidateAll()
// if the designated constraints aren't met.
type GameIndexStatisticsReply_ScoreMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GameIndexStatisticsReply_ScoreMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GameIndexStatisticsReply_ScoreMultiError) AllErrors() []error { return m }

// GameIndexStatisticsReply_ScoreValidationError is the validation error
// returned by GameIndexStatisticsReply_Score.Validate if the designated
// constraints aren't met.
type GameIndexStatisticsReply_ScoreValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GameIndexStatisticsReply_ScoreValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GameIndexStatisticsReply_ScoreValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GameIndexStatisticsReply_ScoreValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GameIndexStatisticsReply_ScoreValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GameIndexStatisticsReply_ScoreValidationError) ErrorName() string {
	return "GameIndexStatisticsReply_ScoreValidationError"
}

// Error satisfies the builtin error interface
func (e GameIndexStatisticsReply_ScoreValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGameIndexStatisticsReply_Score.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GameIndexStatisticsReply_ScoreValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GameIndexStatisticsReply_ScoreValidationError{}

// Validate checks the field values on UserDepositRequest_SendBody with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserDepositRequest_SendBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserDepositRequest_SendBody with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserDepositRequest_SendBodyMultiError, or nil if none found.
func (m *UserDepositRequest_SendBody) ValidateAll() error {
	return m.validate(true)
}

func (m *UserDepositRequest_SendBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UserDepositRequest_SendBodyMultiError(errors)
	}

	return nil
}

// UserDepositRequest_SendBodyMultiError is an error wrapping multiple
// validation errors returned by UserDepositRequest_SendBody.ValidateAll() if
// the designated constraints aren't met.
type UserDepositRequest_SendBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserDepositRequest_SendBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserDepositRequest_SendBodyMultiError) AllErrors() []error { return m }

// UserDepositRequest_SendBodyValidationError is the validation error returned
// by UserDepositRequest_SendBody.Validate if the designated constraints
// aren't met.
type UserDepositRequest_SendBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserDepositRequest_SendBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserDepositRequest_SendBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserDepositRequest_SendBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserDepositRequest_SendBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserDepositRequest_SendBodyValidationError) ErrorName() string {
	return "UserDepositRequest_SendBodyValidationError"
}

// Error satisfies the builtin error interface
func (e UserDepositRequest_SendBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserDepositRequest_SendBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserDepositRequest_SendBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserDepositRequest_SendBodyValidationError{}
