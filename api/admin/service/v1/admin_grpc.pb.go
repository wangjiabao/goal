// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: api/admin/service/v1/admin.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdminClient is the client API for Admin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminClient interface {
	GamePlayGrant(ctx context.Context, in *GamePlayGrantRequest, opts ...grpc.CallOption) (*GamePlayGrantReply, error)
	SortPlayGrant(ctx context.Context, in *SortPlayGrantRequest, opts ...grpc.CallOption) (*SortPlayGrantReply, error)
	CreatePlayGame(ctx context.Context, in *CreatePlayGameRequest, opts ...grpc.CallOption) (*CreatePlayGameReply, error)
	CreatePlaySort(ctx context.Context, in *CreatePlaySortRequest, opts ...grpc.CallOption) (*CreatePlaySortReply, error)
	GetPlayList(ctx context.Context, in *GetPlayListRequest, opts ...grpc.CallOption) (*GetPlayListReply, error)
	GetPlayRelList(ctx context.Context, in *GetPlayRelListRequest, opts ...grpc.CallOption) (*GetPlayRelListReply, error)
	GetRoomList(ctx context.Context, in *GetRoomListRequest, opts ...grpc.CallOption) (*GetRoomListReply, error)
	GetRoomPlayList(ctx context.Context, in *GetRoomPlayListRequest, opts ...grpc.CallOption) (*GetRoomPlayListReply, error)
	CreatePlayGameScore(ctx context.Context, in *CreatePlayGameScoreRequest, opts ...grpc.CallOption) (*CreatePlayGameScoreReply, error)
	CreatePlayGameResult(ctx context.Context, in *CreatePlayGameResultRequest, opts ...grpc.CallOption) (*CreatePlayGameResultReply, error)
	CreatePlayGameGoal(ctx context.Context, in *CreatePlayGameGoalRequest, opts ...grpc.CallOption) (*CreatePlayGameGoalReply, error)
	CreatePlayGameSort(ctx context.Context, in *CreatePlayGameSortRequest, opts ...grpc.CallOption) (*CreatePlayGameSortReply, error)
}

type adminClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminClient(cc grpc.ClientConnInterface) AdminClient {
	return &adminClient{cc}
}

func (c *adminClient) GamePlayGrant(ctx context.Context, in *GamePlayGrantRequest, opts ...grpc.CallOption) (*GamePlayGrantReply, error) {
	out := new(GamePlayGrantReply)
	err := c.cc.Invoke(ctx, "/api.admin.service.v1.Admin/GamePlayGrant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SortPlayGrant(ctx context.Context, in *SortPlayGrantRequest, opts ...grpc.CallOption) (*SortPlayGrantReply, error) {
	out := new(SortPlayGrantReply)
	err := c.cc.Invoke(ctx, "/api.admin.service.v1.Admin/SortPlayGrant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CreatePlayGame(ctx context.Context, in *CreatePlayGameRequest, opts ...grpc.CallOption) (*CreatePlayGameReply, error) {
	out := new(CreatePlayGameReply)
	err := c.cc.Invoke(ctx, "/api.admin.service.v1.Admin/CreatePlayGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CreatePlaySort(ctx context.Context, in *CreatePlaySortRequest, opts ...grpc.CallOption) (*CreatePlaySortReply, error) {
	out := new(CreatePlaySortReply)
	err := c.cc.Invoke(ctx, "/api.admin.service.v1.Admin/CreatePlaySort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetPlayList(ctx context.Context, in *GetPlayListRequest, opts ...grpc.CallOption) (*GetPlayListReply, error) {
	out := new(GetPlayListReply)
	err := c.cc.Invoke(ctx, "/api.admin.service.v1.Admin/GetPlayList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetPlayRelList(ctx context.Context, in *GetPlayRelListRequest, opts ...grpc.CallOption) (*GetPlayRelListReply, error) {
	out := new(GetPlayRelListReply)
	err := c.cc.Invoke(ctx, "/api.admin.service.v1.Admin/GetPlayRelList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetRoomList(ctx context.Context, in *GetRoomListRequest, opts ...grpc.CallOption) (*GetRoomListReply, error) {
	out := new(GetRoomListReply)
	err := c.cc.Invoke(ctx, "/api.admin.service.v1.Admin/GetRoomList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetRoomPlayList(ctx context.Context, in *GetRoomPlayListRequest, opts ...grpc.CallOption) (*GetRoomPlayListReply, error) {
	out := new(GetRoomPlayListReply)
	err := c.cc.Invoke(ctx, "/api.admin.service.v1.Admin/GetRoomPlayList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CreatePlayGameScore(ctx context.Context, in *CreatePlayGameScoreRequest, opts ...grpc.CallOption) (*CreatePlayGameScoreReply, error) {
	out := new(CreatePlayGameScoreReply)
	err := c.cc.Invoke(ctx, "/api.admin.service.v1.Admin/CreatePlayGameScore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CreatePlayGameResult(ctx context.Context, in *CreatePlayGameResultRequest, opts ...grpc.CallOption) (*CreatePlayGameResultReply, error) {
	out := new(CreatePlayGameResultReply)
	err := c.cc.Invoke(ctx, "/api.admin.service.v1.Admin/CreatePlayGameResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CreatePlayGameGoal(ctx context.Context, in *CreatePlayGameGoalRequest, opts ...grpc.CallOption) (*CreatePlayGameGoalReply, error) {
	out := new(CreatePlayGameGoalReply)
	err := c.cc.Invoke(ctx, "/api.admin.service.v1.Admin/CreatePlayGameGoal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CreatePlayGameSort(ctx context.Context, in *CreatePlayGameSortRequest, opts ...grpc.CallOption) (*CreatePlayGameSortReply, error) {
	out := new(CreatePlayGameSortReply)
	err := c.cc.Invoke(ctx, "/api.admin.service.v1.Admin/CreatePlayGameSort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServer is the server API for Admin service.
// All implementations must embed UnimplementedAdminServer
// for forward compatibility
type AdminServer interface {
	GamePlayGrant(context.Context, *GamePlayGrantRequest) (*GamePlayGrantReply, error)
	SortPlayGrant(context.Context, *SortPlayGrantRequest) (*SortPlayGrantReply, error)
	CreatePlayGame(context.Context, *CreatePlayGameRequest) (*CreatePlayGameReply, error)
	CreatePlaySort(context.Context, *CreatePlaySortRequest) (*CreatePlaySortReply, error)
	GetPlayList(context.Context, *GetPlayListRequest) (*GetPlayListReply, error)
	GetPlayRelList(context.Context, *GetPlayRelListRequest) (*GetPlayRelListReply, error)
	GetRoomList(context.Context, *GetRoomListRequest) (*GetRoomListReply, error)
	GetRoomPlayList(context.Context, *GetRoomPlayListRequest) (*GetRoomPlayListReply, error)
	CreatePlayGameScore(context.Context, *CreatePlayGameScoreRequest) (*CreatePlayGameScoreReply, error)
	CreatePlayGameResult(context.Context, *CreatePlayGameResultRequest) (*CreatePlayGameResultReply, error)
	CreatePlayGameGoal(context.Context, *CreatePlayGameGoalRequest) (*CreatePlayGameGoalReply, error)
	CreatePlayGameSort(context.Context, *CreatePlayGameSortRequest) (*CreatePlayGameSortReply, error)
	mustEmbedUnimplementedAdminServer()
}

// UnimplementedAdminServer must be embedded to have forward compatible implementations.
type UnimplementedAdminServer struct {
}

func (UnimplementedAdminServer) GamePlayGrant(context.Context, *GamePlayGrantRequest) (*GamePlayGrantReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GamePlayGrant not implemented")
}
func (UnimplementedAdminServer) SortPlayGrant(context.Context, *SortPlayGrantRequest) (*SortPlayGrantReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SortPlayGrant not implemented")
}
func (UnimplementedAdminServer) CreatePlayGame(context.Context, *CreatePlayGameRequest) (*CreatePlayGameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlayGame not implemented")
}
func (UnimplementedAdminServer) CreatePlaySort(context.Context, *CreatePlaySortRequest) (*CreatePlaySortReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlaySort not implemented")
}
func (UnimplementedAdminServer) GetPlayList(context.Context, *GetPlayListRequest) (*GetPlayListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayList not implemented")
}
func (UnimplementedAdminServer) GetPlayRelList(context.Context, *GetPlayRelListRequest) (*GetPlayRelListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayRelList not implemented")
}
func (UnimplementedAdminServer) GetRoomList(context.Context, *GetRoomListRequest) (*GetRoomListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoomList not implemented")
}
func (UnimplementedAdminServer) GetRoomPlayList(context.Context, *GetRoomPlayListRequest) (*GetRoomPlayListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoomPlayList not implemented")
}
func (UnimplementedAdminServer) CreatePlayGameScore(context.Context, *CreatePlayGameScoreRequest) (*CreatePlayGameScoreReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlayGameScore not implemented")
}
func (UnimplementedAdminServer) CreatePlayGameResult(context.Context, *CreatePlayGameResultRequest) (*CreatePlayGameResultReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlayGameResult not implemented")
}
func (UnimplementedAdminServer) CreatePlayGameGoal(context.Context, *CreatePlayGameGoalRequest) (*CreatePlayGameGoalReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlayGameGoal not implemented")
}
func (UnimplementedAdminServer) CreatePlayGameSort(context.Context, *CreatePlayGameSortRequest) (*CreatePlayGameSortReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlayGameSort not implemented")
}
func (UnimplementedAdminServer) mustEmbedUnimplementedAdminServer() {}

// UnsafeAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServer will
// result in compilation errors.
type UnsafeAdminServer interface {
	mustEmbedUnimplementedAdminServer()
}

func RegisterAdminServer(s grpc.ServiceRegistrar, srv AdminServer) {
	s.RegisterService(&Admin_ServiceDesc, srv)
}

func _Admin_GamePlayGrant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GamePlayGrantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GamePlayGrant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.service.v1.Admin/GamePlayGrant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GamePlayGrant(ctx, req.(*GamePlayGrantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SortPlayGrant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SortPlayGrantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SortPlayGrant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.service.v1.Admin/SortPlayGrant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SortPlayGrant(ctx, req.(*SortPlayGrantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CreatePlayGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlayGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CreatePlayGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.service.v1.Admin/CreatePlayGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CreatePlayGame(ctx, req.(*CreatePlayGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CreatePlaySort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlaySortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CreatePlaySort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.service.v1.Admin/CreatePlaySort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CreatePlaySort(ctx, req.(*CreatePlaySortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetPlayList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetPlayList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.service.v1.Admin/GetPlayList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetPlayList(ctx, req.(*GetPlayListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetPlayRelList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayRelListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetPlayRelList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.service.v1.Admin/GetPlayRelList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetPlayRelList(ctx, req.(*GetPlayRelListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetRoomList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoomListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetRoomList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.service.v1.Admin/GetRoomList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetRoomList(ctx, req.(*GetRoomListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetRoomPlayList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoomPlayListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetRoomPlayList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.service.v1.Admin/GetRoomPlayList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetRoomPlayList(ctx, req.(*GetRoomPlayListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CreatePlayGameScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlayGameScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CreatePlayGameScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.service.v1.Admin/CreatePlayGameScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CreatePlayGameScore(ctx, req.(*CreatePlayGameScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CreatePlayGameResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlayGameResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CreatePlayGameResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.service.v1.Admin/CreatePlayGameResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CreatePlayGameResult(ctx, req.(*CreatePlayGameResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CreatePlayGameGoal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlayGameGoalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CreatePlayGameGoal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.service.v1.Admin/CreatePlayGameGoal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CreatePlayGameGoal(ctx, req.(*CreatePlayGameGoalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CreatePlayGameSort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlayGameSortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CreatePlayGameSort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.service.v1.Admin/CreatePlayGameSort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CreatePlayGameSort(ctx, req.(*CreatePlayGameSortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Admin_ServiceDesc is the grpc.ServiceDesc for Admin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Admin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.admin.service.v1.Admin",
	HandlerType: (*AdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GamePlayGrant",
			Handler:    _Admin_GamePlayGrant_Handler,
		},
		{
			MethodName: "SortPlayGrant",
			Handler:    _Admin_SortPlayGrant_Handler,
		},
		{
			MethodName: "CreatePlayGame",
			Handler:    _Admin_CreatePlayGame_Handler,
		},
		{
			MethodName: "CreatePlaySort",
			Handler:    _Admin_CreatePlaySort_Handler,
		},
		{
			MethodName: "GetPlayList",
			Handler:    _Admin_GetPlayList_Handler,
		},
		{
			MethodName: "GetPlayRelList",
			Handler:    _Admin_GetPlayRelList_Handler,
		},
		{
			MethodName: "GetRoomList",
			Handler:    _Admin_GetRoomList_Handler,
		},
		{
			MethodName: "GetRoomPlayList",
			Handler:    _Admin_GetRoomPlayList_Handler,
		},
		{
			MethodName: "CreatePlayGameScore",
			Handler:    _Admin_CreatePlayGameScore_Handler,
		},
		{
			MethodName: "CreatePlayGameResult",
			Handler:    _Admin_CreatePlayGameResult_Handler,
		},
		{
			MethodName: "CreatePlayGameGoal",
			Handler:    _Admin_CreatePlayGameGoal_Handler,
		},
		{
			MethodName: "CreatePlayGameSort",
			Handler:    _Admin_CreatePlayGameSort_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/admin/service/v1/admin.proto",
}

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	UserDeposit(ctx context.Context, in *UserDepositRequest, opts ...grpc.CallOption) (*UserDepositReply, error)
	GetUserList(ctx context.Context, in *GetUserListRequest, opts ...grpc.CallOption) (*GetUserListReply, error)
	GetUserProxyList(ctx context.Context, in *GetUserProxyListRequest, opts ...grpc.CallOption) (*GetUserProxyListReply, error)
	GetUserRecommendList(ctx context.Context, in *GetUserRecommendListRequest, opts ...grpc.CallOption) (*GetUserRecommendListReply, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserReply, error)
	GetUserBalanceRecord(ctx context.Context, in *GetUserBalanceRecordRequest, opts ...grpc.CallOption) (*GetUserBalanceRecordReply, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) UserDeposit(ctx context.Context, in *UserDepositRequest, opts ...grpc.CallOption) (*UserDepositReply, error) {
	out := new(UserDepositReply)
	err := c.cc.Invoke(ctx, "/api.admin.service.v1.User/UserDeposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUserList(ctx context.Context, in *GetUserListRequest, opts ...grpc.CallOption) (*GetUserListReply, error) {
	out := new(GetUserListReply)
	err := c.cc.Invoke(ctx, "/api.admin.service.v1.User/GetUserList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUserProxyList(ctx context.Context, in *GetUserProxyListRequest, opts ...grpc.CallOption) (*GetUserProxyListReply, error) {
	out := new(GetUserProxyListReply)
	err := c.cc.Invoke(ctx, "/api.admin.service.v1.User/GetUserProxyList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUserRecommendList(ctx context.Context, in *GetUserRecommendListRequest, opts ...grpc.CallOption) (*GetUserRecommendListReply, error) {
	out := new(GetUserRecommendListReply)
	err := c.cc.Invoke(ctx, "/api.admin.service.v1.User/GetUserRecommendList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserReply, error) {
	out := new(GetUserReply)
	err := c.cc.Invoke(ctx, "/api.admin.service.v1.User/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUserBalanceRecord(ctx context.Context, in *GetUserBalanceRecordRequest, opts ...grpc.CallOption) (*GetUserBalanceRecordReply, error) {
	out := new(GetUserBalanceRecordReply)
	err := c.cc.Invoke(ctx, "/api.admin.service.v1.User/GetUserBalanceRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility
type UserServer interface {
	UserDeposit(context.Context, *UserDepositRequest) (*UserDepositReply, error)
	GetUserList(context.Context, *GetUserListRequest) (*GetUserListReply, error)
	GetUserProxyList(context.Context, *GetUserProxyListRequest) (*GetUserProxyListReply, error)
	GetUserRecommendList(context.Context, *GetUserRecommendListRequest) (*GetUserRecommendListReply, error)
	GetUser(context.Context, *GetUserRequest) (*GetUserReply, error)
	GetUserBalanceRecord(context.Context, *GetUserBalanceRecordRequest) (*GetUserBalanceRecordReply, error)
	mustEmbedUnimplementedUserServer()
}

// UnimplementedUserServer must be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (UnimplementedUserServer) UserDeposit(context.Context, *UserDepositRequest) (*UserDepositReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDeposit not implemented")
}
func (UnimplementedUserServer) GetUserList(context.Context, *GetUserListRequest) (*GetUserListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserList not implemented")
}
func (UnimplementedUserServer) GetUserProxyList(context.Context, *GetUserProxyListRequest) (*GetUserProxyListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserProxyList not implemented")
}
func (UnimplementedUserServer) GetUserRecommendList(context.Context, *GetUserRecommendListRequest) (*GetUserRecommendListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserRecommendList not implemented")
}
func (UnimplementedUserServer) GetUser(context.Context, *GetUserRequest) (*GetUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUserServer) GetUserBalanceRecord(context.Context, *GetUserBalanceRecordRequest) (*GetUserBalanceRecordReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserBalanceRecord not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_UserDeposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserDeposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.service.v1.User/UserDeposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserDeposit(ctx, req.(*UserDepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.service.v1.User/GetUserList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserList(ctx, req.(*GetUserListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUserProxyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserProxyListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserProxyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.service.v1.User/GetUserProxyList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserProxyList(ctx, req.(*GetUserProxyListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUserRecommendList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRecommendListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserRecommendList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.service.v1.User/GetUserRecommendList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserRecommendList(ctx, req.(*GetUserRecommendListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.service.v1.User/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUserBalanceRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserBalanceRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserBalanceRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.service.v1.User/GetUserBalanceRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserBalanceRecord(ctx, req.(*GetUserBalanceRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.admin.service.v1.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserDeposit",
			Handler:    _User_UserDeposit_Handler,
		},
		{
			MethodName: "GetUserList",
			Handler:    _User_GetUserList_Handler,
		},
		{
			MethodName: "GetUserProxyList",
			Handler:    _User_GetUserProxyList_Handler,
		},
		{
			MethodName: "GetUserRecommendList",
			Handler:    _User_GetUserRecommendList_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _User_GetUser_Handler,
		},
		{
			MethodName: "GetUserBalanceRecord",
			Handler:    _User_GetUserBalanceRecord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/admin/service/v1/admin.proto",
}

// GameClient is the client API for Game service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameClient interface {
	CreateGame(ctx context.Context, in *CreateGameRequest, opts ...grpc.CallOption) (*CreateGameReply, error)
	UpdateGame(ctx context.Context, in *UpdateGameRequest, opts ...grpc.CallOption) (*UpdateGameReply, error)
	GetGame(ctx context.Context, in *GetGameRequest, opts ...grpc.CallOption) (*GetGameReply, error)
	GetGameList(ctx context.Context, in *GetGameListRequest, opts ...grpc.CallOption) (*GetGameListReply, error)
	DisplayGameIndex(ctx context.Context, in *DisplayGameIndexRequest, opts ...grpc.CallOption) (*DisplayGameIndexReply, error)
	SaveDisplayGameIndex(ctx context.Context, in *SaveDisplayGameIndexRequest, opts ...grpc.CallOption) (*SaveDisplayGameIndexReply, error)
	CreateSort(ctx context.Context, in *CreateSortRequest, opts ...grpc.CallOption) (*CreateSortReply, error)
	GetGameSortList(ctx context.Context, in *GetGameSortListRequest, opts ...grpc.CallOption) (*GetGameSortListReply, error)
	GetTeamList(ctx context.Context, in *GetTeamListRequest, opts ...grpc.CallOption) (*GetTeamListReply, error)
	CreateTeam(ctx context.Context, in *CreateTeamRequest, opts ...grpc.CallOption) (*CreateTeamReply, error)
	GameIndexStatistics(ctx context.Context, in *GameIndexStatisticsRequest, opts ...grpc.CallOption) (*GameIndexStatisticsReply, error)
}

type gameClient struct {
	cc grpc.ClientConnInterface
}

func NewGameClient(cc grpc.ClientConnInterface) GameClient {
	return &gameClient{cc}
}

func (c *gameClient) CreateGame(ctx context.Context, in *CreateGameRequest, opts ...grpc.CallOption) (*CreateGameReply, error) {
	out := new(CreateGameReply)
	err := c.cc.Invoke(ctx, "/api.admin.service.v1.Game/CreateGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) UpdateGame(ctx context.Context, in *UpdateGameRequest, opts ...grpc.CallOption) (*UpdateGameReply, error) {
	out := new(UpdateGameReply)
	err := c.cc.Invoke(ctx, "/api.admin.service.v1.Game/UpdateGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) GetGame(ctx context.Context, in *GetGameRequest, opts ...grpc.CallOption) (*GetGameReply, error) {
	out := new(GetGameReply)
	err := c.cc.Invoke(ctx, "/api.admin.service.v1.Game/GetGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) GetGameList(ctx context.Context, in *GetGameListRequest, opts ...grpc.CallOption) (*GetGameListReply, error) {
	out := new(GetGameListReply)
	err := c.cc.Invoke(ctx, "/api.admin.service.v1.Game/GetGameList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) DisplayGameIndex(ctx context.Context, in *DisplayGameIndexRequest, opts ...grpc.CallOption) (*DisplayGameIndexReply, error) {
	out := new(DisplayGameIndexReply)
	err := c.cc.Invoke(ctx, "/api.admin.service.v1.Game/DisplayGameIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) SaveDisplayGameIndex(ctx context.Context, in *SaveDisplayGameIndexRequest, opts ...grpc.CallOption) (*SaveDisplayGameIndexReply, error) {
	out := new(SaveDisplayGameIndexReply)
	err := c.cc.Invoke(ctx, "/api.admin.service.v1.Game/SaveDisplayGameIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) CreateSort(ctx context.Context, in *CreateSortRequest, opts ...grpc.CallOption) (*CreateSortReply, error) {
	out := new(CreateSortReply)
	err := c.cc.Invoke(ctx, "/api.admin.service.v1.Game/CreateSort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) GetGameSortList(ctx context.Context, in *GetGameSortListRequest, opts ...grpc.CallOption) (*GetGameSortListReply, error) {
	out := new(GetGameSortListReply)
	err := c.cc.Invoke(ctx, "/api.admin.service.v1.Game/GetGameSortList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) GetTeamList(ctx context.Context, in *GetTeamListRequest, opts ...grpc.CallOption) (*GetTeamListReply, error) {
	out := new(GetTeamListReply)
	err := c.cc.Invoke(ctx, "/api.admin.service.v1.Game/GetTeamList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) CreateTeam(ctx context.Context, in *CreateTeamRequest, opts ...grpc.CallOption) (*CreateTeamReply, error) {
	out := new(CreateTeamReply)
	err := c.cc.Invoke(ctx, "/api.admin.service.v1.Game/CreateTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) GameIndexStatistics(ctx context.Context, in *GameIndexStatisticsRequest, opts ...grpc.CallOption) (*GameIndexStatisticsReply, error) {
	out := new(GameIndexStatisticsReply)
	err := c.cc.Invoke(ctx, "/api.admin.service.v1.Game/GameIndexStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameServer is the server API for Game service.
// All implementations must embed UnimplementedGameServer
// for forward compatibility
type GameServer interface {
	CreateGame(context.Context, *CreateGameRequest) (*CreateGameReply, error)
	UpdateGame(context.Context, *UpdateGameRequest) (*UpdateGameReply, error)
	GetGame(context.Context, *GetGameRequest) (*GetGameReply, error)
	GetGameList(context.Context, *GetGameListRequest) (*GetGameListReply, error)
	DisplayGameIndex(context.Context, *DisplayGameIndexRequest) (*DisplayGameIndexReply, error)
	SaveDisplayGameIndex(context.Context, *SaveDisplayGameIndexRequest) (*SaveDisplayGameIndexReply, error)
	CreateSort(context.Context, *CreateSortRequest) (*CreateSortReply, error)
	GetGameSortList(context.Context, *GetGameSortListRequest) (*GetGameSortListReply, error)
	GetTeamList(context.Context, *GetTeamListRequest) (*GetTeamListReply, error)
	CreateTeam(context.Context, *CreateTeamRequest) (*CreateTeamReply, error)
	GameIndexStatistics(context.Context, *GameIndexStatisticsRequest) (*GameIndexStatisticsReply, error)
	mustEmbedUnimplementedGameServer()
}

// UnimplementedGameServer must be embedded to have forward compatible implementations.
type UnimplementedGameServer struct {
}

func (UnimplementedGameServer) CreateGame(context.Context, *CreateGameRequest) (*CreateGameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGame not implemented")
}
func (UnimplementedGameServer) UpdateGame(context.Context, *UpdateGameRequest) (*UpdateGameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGame not implemented")
}
func (UnimplementedGameServer) GetGame(context.Context, *GetGameRequest) (*GetGameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGame not implemented")
}
func (UnimplementedGameServer) GetGameList(context.Context, *GetGameListRequest) (*GetGameListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameList not implemented")
}
func (UnimplementedGameServer) DisplayGameIndex(context.Context, *DisplayGameIndexRequest) (*DisplayGameIndexReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisplayGameIndex not implemented")
}
func (UnimplementedGameServer) SaveDisplayGameIndex(context.Context, *SaveDisplayGameIndexRequest) (*SaveDisplayGameIndexReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveDisplayGameIndex not implemented")
}
func (UnimplementedGameServer) CreateSort(context.Context, *CreateSortRequest) (*CreateSortReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSort not implemented")
}
func (UnimplementedGameServer) GetGameSortList(context.Context, *GetGameSortListRequest) (*GetGameSortListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameSortList not implemented")
}
func (UnimplementedGameServer) GetTeamList(context.Context, *GetTeamListRequest) (*GetTeamListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeamList not implemented")
}
func (UnimplementedGameServer) CreateTeam(context.Context, *CreateTeamRequest) (*CreateTeamReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTeam not implemented")
}
func (UnimplementedGameServer) GameIndexStatistics(context.Context, *GameIndexStatisticsRequest) (*GameIndexStatisticsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GameIndexStatistics not implemented")
}
func (UnimplementedGameServer) mustEmbedUnimplementedGameServer() {}

// UnsafeGameServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameServer will
// result in compilation errors.
type UnsafeGameServer interface {
	mustEmbedUnimplementedGameServer()
}

func RegisterGameServer(s grpc.ServiceRegistrar, srv GameServer) {
	s.RegisterService(&Game_ServiceDesc, srv)
}

func _Game_CreateGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).CreateGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.service.v1.Game/CreateGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).CreateGame(ctx, req.(*CreateGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_UpdateGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).UpdateGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.service.v1.Game/UpdateGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).UpdateGame(ctx, req.(*UpdateGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_GetGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).GetGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.service.v1.Game/GetGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).GetGame(ctx, req.(*GetGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_GetGameList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGameListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).GetGameList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.service.v1.Game/GetGameList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).GetGameList(ctx, req.(*GetGameListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_DisplayGameIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisplayGameIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).DisplayGameIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.service.v1.Game/DisplayGameIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).DisplayGameIndex(ctx, req.(*DisplayGameIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_SaveDisplayGameIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveDisplayGameIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).SaveDisplayGameIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.service.v1.Game/SaveDisplayGameIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).SaveDisplayGameIndex(ctx, req.(*SaveDisplayGameIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_CreateSort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).CreateSort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.service.v1.Game/CreateSort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).CreateSort(ctx, req.(*CreateSortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_GetGameSortList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGameSortListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).GetGameSortList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.service.v1.Game/GetGameSortList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).GetGameSortList(ctx, req.(*GetGameSortListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_GetTeamList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeamListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).GetTeamList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.service.v1.Game/GetTeamList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).GetTeamList(ctx, req.(*GetTeamListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_CreateTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).CreateTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.service.v1.Game/CreateTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).CreateTeam(ctx, req.(*CreateTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_GameIndexStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameIndexStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).GameIndexStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.admin.service.v1.Game/GameIndexStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).GameIndexStatistics(ctx, req.(*GameIndexStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Game_ServiceDesc is the grpc.ServiceDesc for Game service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Game_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.admin.service.v1.Game",
	HandlerType: (*GameServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGame",
			Handler:    _Game_CreateGame_Handler,
		},
		{
			MethodName: "UpdateGame",
			Handler:    _Game_UpdateGame_Handler,
		},
		{
			MethodName: "GetGame",
			Handler:    _Game_GetGame_Handler,
		},
		{
			MethodName: "GetGameList",
			Handler:    _Game_GetGameList_Handler,
		},
		{
			MethodName: "DisplayGameIndex",
			Handler:    _Game_DisplayGameIndex_Handler,
		},
		{
			MethodName: "SaveDisplayGameIndex",
			Handler:    _Game_SaveDisplayGameIndex_Handler,
		},
		{
			MethodName: "CreateSort",
			Handler:    _Game_CreateSort_Handler,
		},
		{
			MethodName: "GetGameSortList",
			Handler:    _Game_GetGameSortList_Handler,
		},
		{
			MethodName: "GetTeamList",
			Handler:    _Game_GetTeamList_Handler,
		},
		{
			MethodName: "CreateTeam",
			Handler:    _Game_CreateTeam_Handler,
		},
		{
			MethodName: "GameIndexStatistics",
			Handler:    _Game_GameIndexStatistics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/admin/service/v1/admin.proto",
}
